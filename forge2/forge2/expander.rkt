#lang br/quicklang

(require racket/pretty)

(define-macro (forge2-module-begin MODULE)
  #'(#%module-begin 
    ; (pretty-print 'MODULE)
    ; (displayln "")
    (pretty-print MODULE)
    ; MODULE
  ))
(provide (rename-out [forge2-module-begin #%module-begin]))

;; TODO: check staging (make sure these run at expand-time)

(define Number string->number) (provide Number)



;; placeholders
(define (AlloyModule . args) (cons 'AlloyModule args)) (provide AlloyModule)
(define (ModuleDecl . args) (cons 'ModuleDecl args)) (provide ModuleDecl)
(define (Import . args) (cons 'Import args)) (provide Import)
(define (SigDecl . args) (cons 'SigDecl args)) (provide SigDecl)
(define (SigExt . args) (cons 'SigExt args)) (provide SigExt)
(define (Mult . args) (cons 'Mult args)) (provide Mult)
(define (Decl . args) (cons 'Decl args)) (provide Decl)
(define (FactDecl . args) (cons 'FactDecl args)) (provide FactDecl)
(define (PredDecl . args) (cons 'PredDecl args)) (provide PredDecl)
(define (FunDecl . args) (cons 'FunDecl args)) (provide FunDecl)
(define (ParaDecls . args) (cons 'ParaDecls args)) (provide ParaDecls)
(define (AssertDecl . args) (cons 'AssertDecl args)) (provide AssertDecl)
(define (CmdDecl . args) (cons 'CmdDecl args)) (provide CmdDecl)
(define (Scope . args) (cons 'Scope args)) (provide Scope)
(define (Typescope . args) (cons 'Typescope args)) (provide Typescope)
(define (Const . args) (cons 'Const args)) (provide Const)
(define (UnOp . args) (cons 'UnOp args)) (provide UnOp)
(define (BinOp . args) (cons 'BinOp args)) (provide BinOp)
(define (ArrowOp . args) (cons 'ArrowOp args)) (provide ArrowOp)
(define (CompareOp . args) (cons 'CompareOp args)) (provide CompareOp)
(define (LetDecl . args) (cons 'LetDecl args)) (provide LetDecl)
(define (Block . args) (cons 'Block args)) (provide Block)
(define (BlockOrBar . args) (cons 'BlockOrBar args)) (provide BlockOrBar)
(define (Quant . args) (cons 'Quant args)) (provide Quant)
(define (QualName . args) (cons 'QualName args)) (provide QualName)
(define (Name . args) (cons 'Name args)) (provide Name)
; (define (Number . args) (cons 'Number args)) (provide Number)
(define (NameList . args) (cons 'NameList args)) (provide NameList)
(define (QualNameList . args) (cons 'QualNameList args)) (provide QualNameList)
(define (DeclList . args) (cons 'DeclList args)) (provide DeclList)
(define (LetDeclList . args) (cons 'LetDeclList args)) (provide LetDeclList)
(define (TypescopeList . args) (cons 'TypescopeList args)) (provide TypescopeList)
(define (ExprList . args) (cons 'ExprList args)) (provide ExprList)
(define (Sexpr . args) (cons 'Sexpr args)) (provide Sexpr)


(define (Expr   . args) (cons 'Expr   args)) (provide Expr)   
(define Expr1  Expr) (provide Expr1)
(define Expr2  Expr) (provide Expr2)
(define Expr3  Expr) (provide Expr3)
(define Expr4  Expr) (provide Expr4)
(define Expr5  Expr) (provide Expr5)
(define Expr6  Expr) (provide Expr6)
(define Expr65 Expr) (provide Expr65)
(define Expr7  Expr) (provide Expr7)
(define Expr8  Expr) (provide Expr8)
(define Expr9  Expr) (provide Expr9)
(define Expr10 Expr) (provide Expr10)
(define Expr11 Expr) (provide Expr11)
(define Expr12 Expr) (provide Expr12)
(define Expr13 Expr) (provide Expr13)
(define Expr14 Expr) (provide Expr14)
(define Expr15 Expr) (provide Expr15)
(define Expr16 Expr) (provide Expr16)