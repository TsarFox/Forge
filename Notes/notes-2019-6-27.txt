; new formulation, return values, take out extraneous atoms
; relation branch cardinality?
; sum across tuple?
;

; look for number of primary variables. should be zero. all time spent in translation
; dont treat ocelot as blackbox
; see what i can print out by hacking ocelot, to find bottleneck

; primary variable for every tuple / relation symbol for every tupel that may or not be there.
; not for things that are in the lower bound, or are not in upper bound.

;secondary variables are things for anciliary reasons for converting to cnf, may be metadata stuff.
; amine linear blowup tseitin formylation, tsytin.
; ocelot probably uses tseytin

; ocelot pipeline, probably: sparse matrices?

; boolean circuit to z3. or tseytin to CNF to SAT solver.
; How to get to boolean circuit?
; Alloy/Forge goes to Ocelot formula/bounds.
; That goes to Boolean formula = Boolean circuit. How? formula/bounds become primary variabels, then sparse matrices.
; Goes through sparse matrices. What are they? mysterious. research

; emina does talk about sparse matrices, her thesis was basically kodkod.
; also did cool work on cores, and detecting symmetries. what are hte permutation of the graphs?
; work with solver that understands those. Just farm off to solver.
; OR convert symmetries to boolean symmetries, add boolean constraint to the formula that excludes anything that's not smallest model,
; by number conversion of bit vector as boolean integer.

; have to partition into equivalence classes. only want one model from each class, ideally, but that/s too expensive.
; but requirigin that is super hard, much harder than original sat probleM? reserach.
; want to rule out as many models as possible, but don't ever want to disallow an entire equivalence class.
; so we ensure that the lexicographically least model from each class is left in, as many as possible of others are left out.

; it's NP-hard to produce any expression of lex leadership without reordering variables.
