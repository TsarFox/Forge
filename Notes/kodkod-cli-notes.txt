What I want now is an automated build system for the kodkod cli.

The cli has these dependencies:
Kodkod-CLI requires Java 8, Kodkod v2.1, and the following libaries:

- asm-5.0.4.jar, asm-analysis-5.0.4.jar, asm-tree-5.0.4.jar, asm-util-5.0.4.jar from [asm-5.0.4-bin.zip](http://forge.ow2.org/project/download.php?group_id=23&file_id=20550);
- [parboiled-core-1.1.7.jar](http://mvnrepository.com/artifact/org.parboiled/parboiled-core/1.1.7); and,
- [parboiled-java-1.1.7.jar](http://mvnrepository.com/artifact/org.parboiled/parboiled-java/1.1.7).

So here we need the kodkod-cli source.
and a recent kodkod.jar.
and recent asm jars, and parboil jars.

use 7.1 for asm.
now chekc parboil.


Right I also need SAT4J.




OK so there's still this issue with the asm library, most likely. Like two different versions are dependencies. hmmmmm.
OK so te problem is coming from deep inside the asm library, then propagating back up to the kodkod cli main function.
Coming from org.objectweb.asm.ClassReader. is that the same asm that I have where I need it?

https://github.com/clojure/tools.analyzer.jvm/commit/f273e18a58bcf9d34861e80c5ca278427dea48cd
This advises heavily not to use asm-all, because of possible conflicts?

IS there an asm available somewhere else on my system?
No, I'm not seeing anything else in the classpath or in the system paths or extension paths.

It's just a problem with this fucking build...


Should I ask them? Hrmmmmmmm, what's going onnnn.

Idea: decompile the asm classes that are being used. (asm, asm-tree)


OH OH OH it could easily be a problem with java 8. BECAUSE, at this point, that's the only thing that's different that could reasonably be causing these problems.
Something with the java class library is different in version 8.

OH WAIT, ALSO THE README MENTIONS ASM VERSION 5, BUT THEY HAVE VERSION 4.
Do what they say, not what the rosette library has, you fool.
And I am using java version 8, so that's not the issue. It's probably the asm stuff.

OK now it's just not printing stuff. why is that?
Also, even more concerning, it says there are errors, which means it's definitely not the same build as the one i see in kodkod tools.
try analyzing kodkod tools and see what libraries its using.
that, or try building wit hthe original jars again.

Or just ask them how to build it!!!




WAIT I'm being dumb. It can't be a problem with the libraries, because their jar works with their classes! Hm.



OK. ok. calm it down. Take what I know.
I know that the old libraries should work, right. If the source hasn't changed, the old libraries should work. Do they?
And if the source has changed, the new libraries should work.

Ok it doesn't work with the old classes or the new classes. Time to email. Then start doing viz again.


yep definitely gotta ask.



OK wait I was too hasty, it partially works. But why does it throw that parse error?
Does it throw the same parse error with the other one?

And they're identical on the good one. So what's the difference.... It's a parsing error. Maybe it doesn't like the newlines?

no, it's not the configure statement. It actually is a parsing error. And they have no parsing documentation...








don't wait for james and emina, change ocelot ourselves. and figure out what's causing that error in parsing!!!!!
tim wants to be able to play around with it monday morning!
He said I was doing the right thing, good not to ask emina about the parsing yet. Figure it out myself.

Then we'll be gutting ocelot to make the kodkod-cli.

But the first thing will be adapting the cmd lang to send to the kodkod-cli, which will be quick.




I need to know whether this kodkod cli is even satisfying its own tests. at the moment I'm not sure about the one I built. 


OK I need the org.junit library.
If I run the server test from inside the server, of course it causes infinite recursion.
So where do I run this?




Ask emina about expected behavior
am I building this right




Concrete issues I am wrestling with:

discrepancy in test results,
how should we fix this, whats the problem,

magic numbers? no, 

What the fuck is going on with the integer bounds?

Did I build it right? right libraries?

good.kks not producing any output




YOOOOO I was right about the syntax error in sample-incremental with r3. Needed the double colon.
Same with sample.kks, and the verbosity was set to zero!
SAME WITH THE SERVER TESTING.

failing tests:
ServerTest (fixed, was an issue with ::)
TupleSetRuleTest
NodeRuleTest
IntExprRuleTest
ExprRuleTest
ConstraintRuleTest
ConfigureRuleTest (but just cuz MiniSat isn't installed)
AssertRuleTest


OK, so in kodkod, a tuple's index specifies it exactly. Say it's of arity 3, and the universe contains 12 atoms.
Then the index can be thought of as a 2-digit number in base 12, so each digit specifies one element of the tuple.
The indexview of a TupleSet just tells you the indices of all the tuples in it, so it precisely specifies the set.


Need to understand how kodkod does integers in relations, cuz tim will be unhappy otherwise.
Also, people will ask questions. He needs to know.

Use the old build to test the unit tests.


Alloy style integers use bitwidths, but they make atoms for every integers.
Rosette makes atoms for every power of 2.


we know that rosette does bitvector style integers, we need to know how that maps down to kodkod.
provide one concrete example of kodkod-cli syntax and how it is represe


Send Tim an update on testin with the old kodkod, and on kodkod rep.
Ah ok the old rosette tests are implemented in racket, they're not the junit tests i want.

Yeah so I tested that and I was right, Emina updated the kodkod-cli without updating the tests.
I tested that by testing the old rosette kodkod-cli jars with the source tests.
Next thing: how does kodkod do ints in relations?

So the question is, if I put an int in a relation, how does kodkod actually interpret that?
So, look at docs, make example with kodkod-cli syntax, run it, inspect kodkod rep.
I'll have to make the example anyways, so do that first.

Hm. where can I really see how these integers are stored?
I can just look at how ints are implemented, from the BooleanFactory, or TwosComplementInt
But I think it's better to look at int operators applied to relations, like sum or minus.
Ah no not a good example, cuz there's no overloading at the operator level.
What is an IntExpression really?

Reading the docs isn't helping, cuz the docs just build up the AST, you don't really know what's actually happening.
OK what do I really need to know? I need to know what happens when you START from the kodkod-cli. So investigate the parsing.
OK, I give to the KodKod solver some asserts and some bounds. I need to see what those are, that can help me understand what integers are.
And I want to see what it gives back.

Simple enough! Just inject that code.

OK, I'm not interested in the kodkod output, cuz they could easily represent it with normal integers. What we need to know is what kodkod does with the asserts.
And we need to know the form of the asserts. But I'm not sure it's worth it? But I can trace it inside the kodkod source from here.
MM, no, in the solve() kodkod function seems like it just translates to cnf and sat solves. So unless something interesting happens in translation, the interesting bits are in the asserted formulas themselves.

OK yeah I just don't think the translation is the interesting bit.

Alright, then trace the parser actions.


Can also look at FOL2BoolTranslator. Yep that's an excellent place to look.
And that includes the sum operation, which returns the abstracted int representing the sum of the integers in a given abstract set.
I believe what we want is sum(BooleanMatrix m), where BooleanMatrix represents the contents of a relation

Ah but I'm also concerned about how sigs get converted to real ints. So that's something to think about. 




Hmmm. Look at LeafInterpreter.interpret for an int i. It just returns an index into the universe for the atom representing that integer.
In which case, it is just the same as alloy! So that is where the int to sig conversion takes place it seems.

And in the relations themselves, they seem to be stored as Ints.
So for summing, it just goes through all possible ints, and adds them if they are there.
How does that actually happen? OK so it goes through every possible int (lowercase). For each one, it gets an Int, which is 0 if the int isn't in the relation, and the right Int otherwise. It does this by making a new TwosComplementInt. Then it sums those.
And yeah, they are Ints, but are actually TwosComplementInts, so they hold a bitvector!

Ok, last question, how does the conversion from ints to atoms work? and how many atoms we got?
Wait a sec, visit(IntConstant) suggests that the ints aren't in the universe at all!
Ah no because we can't put that kind of Int in a relation. We only put atoms in a relation, and to put atoms in a relation we always use booleanmatrices!
And we just have a flag to indicate that the atom is in the relation, and that BooleanValue becomes true.
So to actually put an int in a relation, it has to have its own atom.

Last question: how do all these ints get into the universe in the first place????
Like, do we specify that explicitly? Each int being in the universe?
OK so the list of allowed ints comes from the bounds, which are passed into the solve() function, which is the entry point into kodkod solving.
And bounds are passed a list of allowed ints.


OK let's clarify again where this is going. To go from an int to an int atom, which we need if we want to put ints in relations, we use LeafInterpreter.interpret()
this gives us this: ints.get(i).indexView().min();

We are trying to understand the meaning of that line.

Also, now what happens when you want to go from atom back to full Integer?
Oh right, that's described above. if atom 16's BooleanValue is true, then you construct the TwosComplementInt for 16.

Sparsesequences are basically just like arrays. But they map to tuplesets.
So you get the tupleset that your plain int maps to, then ask it for all the tuples it contains, and get the minimum such tuple number since there should be only one tuple. (unrelated, but it will be arity 1.)

SO. How are these ints made? That's a question for the Kodkodparser.
OK so you make the universe, with all the normal atoms, and with bounds on shit.
Then you add to the bounds stuff for the ints.
So, for each power

Ach. OK so I think the way they did stuff in kodkod-cli is just for rosette, but I still don't understand a bunch of shit...
OK so the int -16 would be bound to the tuple 4 in our cases. What does this actually mean for us?




I don't really understand the purpose of the intbounds. Do the atoms in the tuple really have any meaning as integers?
And what if they're not bound? Can't we map every integer to itself? that seems easy....
And what if an integer is not found? Do you really have to map every single integer? that seems awful.


Right, ok, they even specify: the atoms in a universe are not specified in any way by the Kodkod engine. Then again, Universe atoms are different...




WAIT A SEC I WAS WRONG. ok i get it. it makes sense now. Say you want four ints, and you need six other atoms. Then you declare a universe with 10 atoms, and four of those will be bound to ints! ints must be bound to atoms already in the universe!!!!! YOU DONT EXTEND THE UNIVERSE WHEN YOU DECLARE INTS, YOU ACTUALLY SHRINK IT BY STEALING INTS



mock up 7 example (no atom for it)
Yep, so if there's no atom for it and you use intcast it produces an empty set.
If you use bitcast, it tries to make it with smaller pow2 atoms.
its as we expected.

understand bitsetcast (native support for bits?????)
Doing alloy-style integers for now (atom for every int)

make sure we understand bitsetcast vs intcast
