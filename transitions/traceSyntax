
### FORGE ###

trace<|S, S_init, S_tran, S_term|> T: plinear {}

### TARGET ###

one sig T {
  init: set S,
  tran: set S->S,
  term: set S
}
facts[T] T_pred {
  some tran => {
    S    = tran.S+S.tran
    init = tran.S-S.tran
    term = S.tran-tran.S
  } else {
    lone   S
    init = S
    term = S
  }
  all s: init          | S_init[s]
  all s: S, s': s.tran | S_tran[s, s']
  all s: term          | S_term[s]
}
pred T_fact { all t:T | T_pred[t] }
inst T_inst { tran is plinear }

### EXPANDED ###

(begin
  (pre-declare-sig T #:extends univ)
  (SigDecl (Mult "one") (NameList T) (ArrowDeclList 
    (ArrowDecl (NameList init) (ArrowMult "set") (ArrowExpr (QualName S))) 
    (ArrowDecl (NameList tran) (ArrowMult "set") (ArrowExpr (QualName S) (QualName S))) 
    (ArrowDecl (NameList term) (ArrowMult "set") (ArrowExpr (QualName S)))))
  (StateDecl "facts" (QualName T) (Name T_pred) (Block 
    (Expr (Expr4 "some" (Expr8 (QualName tran))) 
      "=>" (Expr3 (Block 
        (Expr (Expr6 (QualName S)) (CompareOp "=") 
          (Expr7 (Expr8 (Expr15 (QualName tran)) "." (Expr16 (QualName S))) "+" 
          (Expr10 (Expr15 (QualName S)) "." (Expr16 (QualName tran))))) 
        (Expr (Expr6 (QualName init)) (CompareOp "=") 
          (Expr7 (Expr8 (Expr15 (QualName tran)) "." (Expr16 (QualName S))) "-" 
          (Expr10 (Expr15 (QualName S)) "." (Expr16 (QualName tran))))) 
        (Expr (Expr6 (QualName term)) (CompareOp "=") 
          (Expr7 (Expr8 (Expr15 (QualName S)) "." (Expr16 (QualName tran))) "-" 
          (Expr10 (Expr15 (QualName tran)) "." (Expr16 (QualName S))))))) 
      "else" (Expr3 (Block 
        (Expr "one" (Expr8 (QualName S))) 
        (Expr (Expr6 (QualName init)) (CompareOp "=") (Expr7 (QualName S))) 
        (Expr (Expr6 (QualName term)) (CompareOp "=") (Expr7 (QualName S)))))) 
    (Expr (Quant "all") (DeclList (Decl (NameList s) (Expr (QualName init)))) 
      (BlockOrBar "|" (Expr (Expr14 (QualName S_init)) 
        "[" (ExprList (Expr (QualName s))) "]"))) 
    (Expr (Quant "all") (DeclList 
        (Decl (NameList s) (Expr (QualName S))) 
        (Decl (NameList |s'|) (Expr (Expr15 (QualName s)) "." (Expr16 (QualName tran))))) 
      (BlockOrBar "|" (Expr (Expr14 (QualName S_tran)) 
        "[" (ExprList (Expr (QualName s)) (Expr (QualName |s'|))) "]"))) 
    (Expr (Quant "all") (DeclList (Decl (NameList s) (Expr (QualName term)))) 
      (BlockOrBar "|" (Expr (Expr14 (QualName S_term)) 
        "[" (ExprList (Expr (QualName s))) "]")))))
  (PredDecl (Name T_fact) (Block 
  (Expr (Quant "all") (DeclList (Decl (NameList t) (Expr (QualName T)))) 
    (BlockOrBar "|" (Expr (Expr14 (QualName T_pred)) 
      "[" (ExprList (Expr (QualName t))) "]")))))
  (InstDecl (Name T_inst) (Bounds 
    (Expr (Expr6 (QualName tran)) (CompareOp "is") (Expr7 (QualName plinear))))))
