from z3 import *

# SETUP
Node = DeclareSort('Node')
Edge = Function('Edge', Node, Node, BoolSort())
s = Solver()
solver = s
#s.set(unsat_core=True)


n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n0 = Consts('n1 n2 n3 n4 n5 n6 n7 n8 n9 n10 n11 n12 n13 n14 n15 n16 n17 n18 n19 n0', Node)

X, Y, Z = Consts('X Y Z', Node)
N = Int("N")

CC0 = ForAll([X], Or(X == n1, X == n2, X == n3, X == n4, X == n5, X == n6, X == n7, X == n8, X == n9, X == n10, X == n11, X == n12, X == n13, X == n14, X == n15, X == n16, X == n17, X == n18, X == n19, X == n0))
CC1 = Distinct(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n0)


GC = And(
    Edge(n3, n17),
    Edge(n3, n2),
    Edge(n1, n5),
    Edge(n19, n11),
    Edge(n16, n6),
    Edge(n16, n4),
    Edge(n17, n2),
    Edge(n8, n3),
    Edge(n17, n15),
    Edge(n7, n13),
    Edge(n4, n4),
    Edge(n4, n10),
    Edge(n9, n16),
    Edge(n0, n17),
    Edge(n15, n7),
    Edge(n11, n3),
    Edge(n15, n6),
    Edge(n17, n13),
    Edge(n1, n14),
    Edge(n15, n19),
    Edge(n5, n2),
    Edge(n10, n3),
    Edge(n7, n10),
    Edge(n13, n7),
    Edge(n1, n13),
    Edge(n12, n14),
    Edge(n9, n19),
    Edge(n12, n15),
    Edge(n12, n7),
    Edge(n5, n0),
    Edge(n7, n3),
    Edge(n17, n17),
    Edge(n13, n13),
    Edge(n19, n18),
    Edge(n17, n11),
    Edge(n2, n6),
    Edge(n6, n15),
    Edge(n12, n5),
    Edge(n2, n15),
    Edge(n1, n11),
    Not(Edge(n4, n9)),
    Not(Edge(n9, n0)),
    Not(Edge(n2, n9)),
    Not(Edge(n7, n2)),
    Not(Edge(n10, n16)),
    Not(Edge(n10, n10)),
    Not(Edge(n1, n1)),
    Not(Edge(n14, n0)),
    Not(Edge(n16, n0)),
    Not(Edge(n13, n1)),
    Not(Edge(n13, n0)),
    Not(Edge(n3, n7)),
    Not(Edge(n18, n10)),
    Not(Edge(n8, n4)),
    Not(Edge(n9, n12)),
    Not(Edge(n10, n13)),
    Not(Edge(n0, n3)),
    Not(Edge(n8, n8)),
    Not(Edge(n3, n13)),
    Not(Edge(n0, n15)),
    Not(Edge(n19, n0)),
    Not(Edge(n16, n7)),
    Not(Edge(n14, n11)),
    Not(Edge(n2, n12)),
    Not(Edge(n3, n1)),
    Not(Edge(n18, n3)),
    Not(Edge(n6, n16)),
    Not(Edge(n16, n15)),
    Not(Edge(n3, n12)),
    Not(Edge(n17, n12)),
    Not(Edge(n11, n16)),
    Not(Edge(n2, n16)),
    Not(Edge(n3, n19)),
    Not(Edge(n12, n4)),
    Not(Edge(n19, n4)),
    Not(Edge(n5, n9)),
    Not(Edge(n13, n12)),
    Not(Edge(n13, n10)),
    Not(Edge(n16, n16)),
    Not(Edge(n15, n3)),
    Not(Edge(n11, n6)),
    Not(Edge(n2, n10)),
    Not(Edge(n11, n18)),
    Not(Edge(n9, n17)),
    Not(Edge(n6, n1)),
    Not(Edge(n0, n19)),
    Not(Edge(n13, n14)),
    Not(Edge(n14, n14)),
    Not(Edge(n13, n16)),
    Not(Edge(n15, n1)),
    Not(Edge(n3, n6)),
    Not(Edge(n18, n17)),
    Not(Edge(n16, n11)),
    Not(Edge(n18, n2)),
    Not(Edge(n7, n14)),
    Not(Edge(n2, n7)),
    Not(Edge(n9, n1)),
    Not(Edge(n14, n9)),
    Not(Edge(n9, n15)),
    Not(Edge(n6, n0)),
    Not(Edge(n19, n7)),
    Not(Edge(n5, n10)),
    Not(Edge(n6, n9)),
    Not(Edge(n15, n10)),
    Not(Edge(n12, n9)),
    Not(Edge(n18, n6)),
    Not(Edge(n15, n16)),
    Not(Edge(n7, n16)),
    Not(Edge(n12, n10)),
    Not(Edge(n9, n2)),
    Not(Edge(n16, n19)),
    Not(Edge(n19, n1)),
    Not(Edge(n3, n0)),
    Not(Edge(n11, n11)),
    Not(Edge(n16, n9)),
    Not(Edge(n5, n13)),
    Not(Edge(n13, n8)),
    Not(Edge(n18, n0)),
    Not(Edge(n12, n11)),
    Not(Edge(n1, n3)),
    Not(Edge(n6, n4)),
    Not(Edge(n18, n13)),
    Not(Edge(n3, n11)),
    Not(Edge(n11, n13)),
    Not(Edge(n18, n11)),
    Not(Edge(n5, n19)),
    Not(Edge(n7, n8)),
    Not(Edge(n14, n5)),
    Not(Edge(n0, n5)),
    Not(Edge(n1, n16)),
    Not(Edge(n10, n0)),
    Not(Edge(n0, n0)),
    Not(Edge(n15, n9)),
    Not(Edge(n0, n18)),
    Not(Edge(n14, n16)),
    Not(Edge(n6, n11)),
    Not(Edge(n18, n19)),
    Not(Edge(n19, n15)),
    Not(Edge(n15, n8)),
    Not(Edge(n3, n16)),
    Not(Edge(n19, n3)),
    Not(Edge(n1, n9)),
    Not(Edge(n3, n9)),
    Not(Edge(n15, n15)),
    Not(Edge(n9, n10)),
    Not(Edge(n4, n18)),
    Not(Edge(n14, n2)),
    Not(Edge(n11, n19)),
    Not(Edge(n17, n9)),
    Not(Edge(n2, n4)),
    Not(Edge(n13, n5)),
    Not(Edge(n15, n14)),
    Not(Edge(n2, n1)),
    Not(Edge(n0, n16)),
    Not(Edge(n12, n13)),
    Not(Edge(n4, n1)),
    Not(Edge(n10, n9)),
    Not(Edge(n8, n5)),
    Not(Edge(n2, n8)),
    Not(Edge(n1, n6)),
    Not(Edge(n19, n17)),
    Not(Edge(n4, n0)),
    Not(Edge(n10, n4)),
    Not(Edge(n1, n12)),
    Not(Edge(n3, n4)),
    Not(Edge(n2, n2)),
    Not(Edge(n16, n2)),
    Not(Edge(n18, n18)),
    Not(Edge(n8, n15)),
    Not(Edge(n13, n11)),
    Not(Edge(n5, n4)),
    Not(Edge(n0, n7)),
    Not(Edge(n10, n14)),
    Not(Edge(n15, n12)),
    Not(Edge(n6, n19)),
    Not(Edge(n14, n1)),
    Not(Edge(n14, n6)),
    Not(Edge(n18, n8)),
    Not(Edge(n6, n10)),
    Not(Edge(n14, n12)),
    Not(Edge(n15, n5)),
    Not(Edge(n9, n13)),
    Not(Edge(n17, n5)),
    Not(Edge(n19, n8)),
    Not(Edge(n3, n14)),
    Not(Edge(n9, n8)),
    Not(Edge(n17, n3)),
    Not(Edge(n1, n19)),
    Not(Edge(n6, n17)),
    Not(Edge(n2, n13)),
    Not(Edge(n16, n3)),
    Not(Edge(n2, n11)),
    Not(Edge(n6, n13)),
    Not(Edge(n6, n6)),
    Not(Edge(n0, n6)),
    Not(Edge(n4, n7)),
    Not(Edge(n13, n18)),
    Not(Edge(n17, n7)),
    Not(Edge(n3, n8)),
    Not(Edge(n17, n16)),
    Not(Edge(n11, n0)),
    Not(Edge(n5, n8)),
    Not(Edge(n19, n6)),
    Not(Edge(n14, n17)),
    Not(Edge(n15, n4)),
    Not(Edge(n5, n3)),
    Not(Edge(n9, n6)),
    Not(Edge(n19, n12)),
    Not(Edge(n8, n19)),
    Not(Edge(n0, n11)),
    Not(Edge(n17, n4)),
    Not(Edge(n11, n12)),
    Not(Edge(n5, n6)),
    Not(Edge(n8, n16)),
    Not(Edge(n4, n2)),
    Not(Edge(n4, n6)),
    Not(Edge(n0, n8)),
    Not(Edge(n3, n18)),
    Not(Edge(n15, n11)),
    Not(Edge(n8, n7)),
    Not(Edge(n19, n14)),
    Not(Edge(n8, n14)),
    Not(Edge(n1, n17)),
    Not(Edge(n5, n5)),
    Not(Edge(n17, n0)),
    Not(Edge(n9, n7)),
    Not(Edge(n16, n12)),
    Not(Edge(n7, n15)),
    Not(Edge(n8, n18)),
    Not(Edge(n7, n9)),
    Not(Edge(n6, n7)),
    Not(Edge(n4, n12)),
    Not(Edge(n16, n14)),
    Not(Edge(n10, n17)),
    Not(Edge(n17, n8)),
    Not(Edge(n17, n10)),
    Not(Edge(n10, n7)),
    Not(Edge(n1, n10)),
    Not(Edge(n12, n0)),
    Not(Edge(n9, n14)),
    Not(Edge(n14, n19)),
    Not(Edge(n12, n19)),
    Not(Edge(n1, n15)),
    Not(Edge(n2, n0)),
    Not(Edge(n3, n15)),
    Not(Edge(n13, n6)),
    Not(Edge(n5, n15)),
    Not(Edge(n10, n1)),
    Not(Edge(n0, n12)),
    Not(Edge(n13, n4)),
    Not(Edge(n11, n17)),
    Not(Edge(n11, n7)),
    Not(Edge(n5, n12)),
    Not(Edge(n15, n18)),
    Not(Edge(n7, n11)),
    Not(Edge(n12, n1)),
    Not(Edge(n14, n10)),
    Not(Edge(n3, n3)),
    Not(Edge(n0, n9)),
    Not(Edge(n0, n10)),
    Not(Edge(n12, n18)),
    Not(Edge(n11, n8)),
    Not(Edge(n12, n12)),
    Not(Edge(n8, n6)),
    Not(Edge(n15, n2)),
    Not(Edge(n18, n1)),
    Not(Edge(n9, n4)),
    Not(Edge(n16, n17)),
    Not(Edge(n3, n5)),
    Not(Edge(n6, n8)),
    Not(Edge(n8, n2)),
    Not(Edge(n17, n1)),
    Not(Edge(n1, n8)),
    Not(Edge(n13, n17)),
    Not(Edge(n10, n12)),
    Not(Edge(n11, n10)),
    Not(Edge(n17, n14)),
    Not(Edge(n4, n14)),
    Not(Edge(n8, n10)),
    Not(Edge(n16, n13)),
    Not(Edge(n1, n4)),
    Not(Edge(n1, n0)),
    Not(Edge(n9, n3)),
    Not(Edge(n7, n18)),
    Not(Edge(n10, n5)),
    Not(Edge(n5, n11)),
    Not(Edge(n11, n9)),
    Not(Edge(n18, n5)),
    Not(Edge(n10, n18)),
    Not(Edge(n4, n17)),
    Not(Edge(n0, n2)),
    Not(Edge(n5, n14)),
    Not(Edge(n19, n19)),
    Not(Edge(n14, n13)),
    Not(Edge(n4, n3)),
    Not(Edge(n7, n4)),
    Not(Edge(n9, n18)),
    Not(Edge(n18, n15)),
    Not(Edge(n13, n2)),
    Not(Edge(n16, n1)),
    Not(Edge(n4, n19)),
    Not(Edge(n6, n3)),
    Not(Edge(n7, n0)),
    Not(Edge(n17, n6)),
    Not(Edge(n18, n12)),
    Not(Edge(n8, n12)),
    Not(Edge(n19, n13)),
    Not(Edge(n6, n12)),
    Not(Edge(n2, n18)),
    Not(Edge(n8, n11)),
    Not(Edge(n10, n8)),
    Not(Edge(n8, n0)),
    Not(Edge(n14, n7)),
    Not(Edge(n8, n17)),
    Not(Edge(n9, n9)),
    Not(Edge(n4, n5)),
    Not(Edge(n11, n4)),
    Not(Edge(n5, n16)),
    Not(Edge(n12, n3)),
    Not(Edge(n2, n5)),
    Not(Edge(n7, n1)),
    Not(Edge(n12, n16)),
    Not(Edge(n7, n6)),
    Not(Edge(n11, n5)),
    Not(Edge(n4, n13)),
    Not(Edge(n13, n15)),
    Not(Edge(n9, n5)),
    Not(Edge(n16, n5)),
    Not(Edge(n4, n16)),
    Not(Edge(n9, n11)),
    Not(Edge(n19, n9)),
    Not(Edge(n5, n1)),
    Not(Edge(n5, n18)),
    Not(Edge(n0, n13)),
    Not(Edge(n3, n10)),
    Not(Edge(n7, n7)),
    Not(Edge(n15, n0)),
    Not(Edge(n5, n17)),
    Not(Edge(n19, n5)),
    Not(Edge(n4, n11)),
    Not(Edge(n13, n9)),
    Not(Edge(n18, n9)),
    Not(Edge(n10, n19)),
    Not(Edge(n2, n3)),
    Not(Edge(n19, n10)),
    Not(Edge(n16, n10)),
    Not(Edge(n2, n19)),
    Not(Edge(n10, n2)),
    Not(Edge(n7, n12)),
    Not(Edge(n16, n8)),
    Not(Edge(n7, n19)),
    Not(Edge(n10, n6)),
    Not(Edge(n12, n17)),
    Not(Edge(n2, n17)),
    Not(Edge(n13, n19)),
    Not(Edge(n11, n14)),
    Not(Edge(n7, n17)),
    Not(Edge(n18, n4)),
    Not(Edge(n14, n15)),
    Not(Edge(n1, n7)),
    Not(Edge(n18, n14)),
    Not(Edge(n15, n17)),
    Not(Edge(n19, n16)),
    Not(Edge(n17, n18)),
    Not(Edge(n6, n18)),
    Not(Edge(n14, n8)),
    Not(Edge(n10, n15)),
    Not(Edge(n0, n14)),
    Not(Edge(n19, n2)),
    Not(Edge(n8, n9)),
    Not(Edge(n15, n13)),
    Not(Edge(n16, n18)),
    Not(Edge(n5, n7)),
    Not(Edge(n2, n14)),
    Not(Edge(n14, n18)),
    Not(Edge(n11, n1)),
    Not(Edge(n6, n14)),
    Not(Edge(n6, n5)),
    Not(Edge(n18, n16)),
    Not(Edge(n14, n3)),
    Not(Edge(n13, n3)),
    Not(Edge(n0, n1)),
    Not(Edge(n10, n11)),
    Not(Edge(n1, n18)),
    Not(Edge(n12, n2)),
    Not(Edge(n11, n15)),
    Not(Edge(n12, n6)),
    Not(Edge(n11, n2)),
    Not(Edge(n7, n5)),
    Not(Edge(n8, n1)),
    Not(Edge(n1, n2)),
    Not(Edge(n14, n4)),
    Not(Edge(n6, n2)),
    Not(Edge(n4, n15)),
    Not(Edge(n17, n19)),
    Not(Edge(n8, n13)),
    Not(Edge(n18, n7)),
    Not(Edge(n0, n4)),
    Not(Edge(n12, n8)),
    Not(Edge(n4, n8)))

# Transitive closure of edges relation
TC = Function('TC', IntSort(), Node, Node, BoolSort())
TC0 = ForAll([N, X, Y], Implies(N < 1, Not(TC(N, X, Y))))
TC1 = ForAll([X, Y], TC(1, X, Y) == Edge(X, Y))
TC2 = ForAll([N, X, Y], Implies(And(N > 1, N <= 19), TC(N, X, Y) == Or(
					TC(N - 1, X, Y),
					Exists([Z], And(TC(N - 1, X, Z), Edge(Z, Y))))))
#TC3 = ForAll([N, X, Y], Implies(N > 19, Not(TC(N, X, Y))))



'''
j1 = Function('j1', Node, Node, BoolSort())
u1 = Function('u1', Node, Node, BoolSort())
ab1 = Function('ab1', Node, Node, BoolSort())
TCU = Function('TCU', IntSort(), Node, Node, BoolSort())
j2 = Function('j2', Node, BoolSort())

ABA1 = ForAll([X, Y], ab1(X, Y) == And((X == n0), (Y == n1)))
JA1 = ForAll([X, Y], j1(X, Y) == Exists([Z], And(Edge(X, Z), Edge(Z, Y))))
UA1 = ForAll([X, Y], u1(X, Y) == Or(j1(X, Y), ab1(X, Y)))
TCU0 = ForAll([N, X, Y], Implies(N < 1, Not(TCU(N, X, Y))))
TCU1 = ForAll([X, Y], TCU(1, X, Y) == u1(X, Y))
TCU2 = ForAll([N, X, Y], Implies(And(N > 1, N <= 19), TCU(N, X, Y) == Or(
					TCU(N - 1, X, Y),
					Exists([Z], And(TCU(N - 1, X, Z), u1(Z, Y))))))
JA2 = ForAll([X], j2(X) == TCU(19, Y, X))                                        
IN1 = j2(X)'''

#s.add(Not(TC(19, n1, n2)))

#print(s.check(CC0, CC1, GC, TC0, TC1, TC2, TC3))
print(s.check(CC0, GC, CC1, TC0, TC1, TC2))
#print(s.check(CC), CC1, GC, ))
#print(s.unsat_core())
print(s.model().sexpr())
m = s.model()
