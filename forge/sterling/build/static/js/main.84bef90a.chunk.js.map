{"version":3,"sources":["serviceWorker.ts","connections/ForgeConnection.ts","connections/SterlingConnection.ts","util/EventDispatcher.ts","store/sterling/sterlingSlice.ts","store/store.ts","features/nav/SterlingNavbar.tsx","features/graph/GraphNavbar.tsx","features/graph/GraphView.tsx","sterling/Sterling.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ForgeConnection","search","slice","url","_url","_ws","_auto_reconnect","_auto_reconnect_interval","_connected","_heartbeat_count","_heartbeat_id","_heartbeat_interval","_heartbeat_latency","_heartbeat_timestamp","this","onclose","close","_initializeConnection","_request","id","expression","data","header","xml","length","dispatchEvent","type","instance","AlloyInstance","e","message","performance","now","WebSocket","onopen","_onOpen","bind","_onClose","onerror","_onError","onmessage","_onMessage","_reconnect","_resetHeartbeat","_handlePong","_handleContrastingCase","_handleEval","_handleXML","send","setTimeout","request","clearTimeout","_ping","_listeners","listener","undefined","listeners","indexOf","push","event","listenerarray","target","forEach","callback","call","index","splice","sterlingSlice","createSlice","name","initialState","contrast","reducers","setInstance","state","action","payload","setContrastingCase","actions","store","createStore","SterlingNavbar","props","_requestNext","connection","requestNextInstance","connected","ready","addEventListener","setState","fixedToTop","className","Group","disabled","intent","large","onClick","rightIcon","text","React","Component","GraphNavbar","_layoutMenu","icon","_requestContrasting","requestContrastingCase","style","minWidth","minimal","position","Position","BOTTOM_LEFT","fill","canRequestContrastingCase","outlined","GraphView","signatures","filter","sig","atoms","sort","a","b","map","_signatureTable","fields","_fieldTable","signature","key","atom","i","field","types","tuples","tuple","j","mapDispatch","connector","connect","requestCurrentInstance","_renderStage","Sterling","_renderPlaceholder","_renderSingleInstance","_renderInstanceWithContrast","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.84bef90a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { SterlingConnection } from './SterlingConnection';\n\nclass ForgeConnection extends SterlingConnection {\n\n    constructor () {\n\n        super('ws://localhost:' + window.location.search.slice(1));\n\n    }\n\n}\n\nexport {\n    ForgeConnection\n}","import { AlloyInstance } from 'alloy-ts';\nimport { EventDispatcher } from '../util/EventDispatcher';\nimport { createInstanceTest } from '../store/sterling/sterlingSlice';\n\n\n/**\n * Events dispatched by a SterlingConnectiong:\n *   connect: connection established\n *   disconnect: connection lost\n *   error: an error occurred\n *   eval: a response from the evaluator\n *   instance: a new instance received\n */\nabstract class SterlingConnection extends EventDispatcher {\n\n    protected _url: string;\n    protected _ws: WebSocket | null;\n\n    private _auto_reconnect: boolean;\n    private _auto_reconnect_interval: number;\n    private _connected: boolean;\n\n    _heartbeat_count: number;\n    _heartbeat_id: number;\n    _heartbeat_interval: number;\n    _heartbeat_latency: DOMHighResTimeStamp;\n    _heartbeat_timestamp: DOMHighResTimeStamp;\n\n    protected constructor (url: string) {\n\n        super();\n\n        this._url = url;\n        this._ws = null;\n\n        this._auto_reconnect = false;\n        this._auto_reconnect_interval = 5000;\n        this._connected = false;\n\n        this._heartbeat_count = 0;\n        this._heartbeat_id = 0;\n        this._heartbeat_interval = 15000;\n        this._heartbeat_latency = 0;\n        this._heartbeat_timestamp = 0;\n\n    }\n\n    /**\n     * Establish a connection with a data provider\n     */\n    connect (): void {\n\n        if (this._ws) {\n            this._ws.onclose = null;\n            this._ws.close();\n        }\n\n        this._initializeConnection();\n\n    }\n\n    requestContrastingCase (): boolean {\n\n        return this._request('contrast');\n\n    }\n\n    requestCurrentInstance (): boolean {\n\n        return this._request('current');\n\n    }\n\n    requestEvaluateExpression (id: number, expression: string): boolean {\n\n        return this._request(`EVL:${id}:${expression}`);\n\n    }\n\n    requestNextInstance (): boolean {\n\n        return this._request('next');\n\n    }\n\n    private _handleContrastingCase (data: string): void {\n\n        let header = data.slice(0, 4);\n        let xml = data.slice(4);\n\n        if (header === 'XML:' && xml.length) {\n            try {\n                this.dispatchEvent({\n                    type: 'contrast',\n                    instance: new AlloyInstance(xml)\n                });\n            } catch (e) {\n                this.dispatchEvent({\n                    type: 'error',\n                    message: 'Invalid instance data'\n                });\n            }\n        }\n\n    }\n\n    private _handleEval (data: string): void {\n\n        this.dispatchEvent({\n            type: 'eval',\n            data: data\n        });\n\n    }\n\n    private _handlePong (): void {\n\n        this._heartbeat_latency += performance.now() - this._heartbeat_timestamp;\n        this._heartbeat_count += 1;\n\n    }\n\n    private _handleXML (data: string): void {\n\n        if (data.length) {\n            try {\n                this.dispatchEvent({\n                    type: 'instance',\n                    instance: new AlloyInstance(data)\n                });\n            } catch (e) {\n                this.dispatchEvent({\n                    type: 'error',\n                    message: 'Invalid instance data'\n                });\n            }\n        }\n\n    }\n\n    private _initializeConnection () {\n\n        this._ws = new WebSocket(this._url);\n        this._ws.onopen = this._onOpen.bind(this);\n        this._ws.onclose = this._onClose.bind(this);\n        this._ws.onerror = this._onError.bind(this);\n        this._ws.onmessage = this._onMessage.bind(this);\n\n    }\n\n    private _onClose (e: Event): void {\n\n        this._connected = false;\n        this._ws = null;\n        if (this._auto_reconnect) this._reconnect();\n        this.dispatchEvent({ type: 'disconnect' });\n\n    }\n\n    private _onError (e: Event): void {\n\n        this.dispatchEvent({ type: 'error' });\n\n    }\n\n    private _onMessage (e: MessageEvent): void {\n\n        this._resetHeartbeat();\n        let header = e.data.slice(0, 4);\n        let data = e.data.slice(4);\n        switch (header) {\n            case 'pong':\n                this._handlePong();\n                break;\n            case 'CST:':\n                this._handleContrastingCase(data);\n                break;\n            case 'EVL:':\n                this._handleEval(data);\n                break;\n            case 'XML:':\n                this._handleXML(data);\n                break;\n            default:\n                this.dispatchEvent({\n                    type: 'error',\n                    message: `Unknown response header: ${header}`\n                });\n                break;\n        }\n\n    }\n\n    private _onOpen (e: Event): void {\n\n        this._connected = true;\n        this._resetHeartbeat();\n        this.dispatchEvent({ type: 'connect' });\n\n    }\n\n    private _ping () {\n\n        if (this._ws) {\n            this._heartbeat_timestamp = performance.now();\n            this._ws.send('ping');\n        }\n\n    }\n\n    private _reconnect (): void {\n\n        window.setTimeout(this._initializeConnection.bind(this), this._auto_reconnect_interval);\n\n    }\n\n    private _request (request: string): boolean {\n\n        return this._connected && this._ws\n            ? (this._ws.send(request), true)\n            : false;\n\n    }\n\n    private _resetHeartbeat (): void {\n\n        clearTimeout(this._heartbeat_id);\n        this._heartbeat_id = window.setTimeout(this._ping.bind(this), this._heartbeat_interval);\n\n    }\n\n}\n\nexport {\n    SterlingConnection\n};\n","export interface Event {\n    type: string,\n    [key: string]: any\n}\n\nclass EventDispatcher {\n\n    private _listeners?: {[key: string]: ((event: any) => void)[]};\n\n    addEventListener (type: string, listener: (event: any) => void): this {\n\n        if (this._listeners === undefined) this._listeners = {};\n\n        const listeners = this._listeners;\n\n        if (listeners[type] === undefined) {\n            listeners[type] = [];\n        }\n\n        if (listeners[type].indexOf(listener) === -1) {\n            listeners[type].push(listener);\n        }\n\n        return this;\n\n    }\n\n    dispatchEvent (event: Event): this {\n\n        if (this._listeners === undefined) return this;\n\n        const listenerarray = this._listeners[event.type];\n\n        if (listenerarray !== undefined) {\n\n            event.target = this;\n\n            const arraycopy = listenerarray.slice();\n\n            arraycopy.forEach(callback => {\n                callback.call(this, event);\n            });\n\n        }\n\n        return this;\n\n    }\n\n    hasEventListener (type: string, listener: (event: any) => void): boolean {\n\n        if (this._listeners === undefined) return false;\n\n        const listeners = this._listeners;\n\n        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\n    }\n\n    removeEventListener (type: string, listener: (event: any) => void): this {\n\n        if (this._listeners === undefined) return this;\n\n        const listenerarray = this._listeners[type];\n\n        if (listenerarray !== undefined) {\n            const index = listenerarray.indexOf(listener);\n            if (index !== -1) {\n                listenerarray.splice(index, 1);\n            }\n        }\n\n        return this;\n\n    }\n\n}\n\nexport {\n    EventDispatcher\n}\n","import {AlloyInstance} from \"alloy-ts\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport interface SterlingState {\n    instance: AlloyInstance | null,\n    contrast: AlloyInstance | null\n}\n\nconst initialState: SterlingState = {\n    instance: null,\n    contrast: null\n}\n\nconst sterlingSlice = createSlice({\n    name: 'sterling',\n    initialState: initialState,\n    reducers: {\n        setInstance (state, action: PayloadAction<AlloyInstance | null>) {\n            state.instance = action.payload;\n            state.contrast = null;\n        },\n        setContrastingCase (state, action: PayloadAction<AlloyInstance | null>) {\n            state.contrast = action.payload;\n        }\n    }\n});\n\nexport const {\n    setInstance,\n    setContrastingCase\n} = sterlingSlice.actions;\nexport default sterlingSlice.reducer;\n\nexport function createInstanceTest (): string {\n    return `<alloy builddate=\"2019-08-14T18:53:58.297Z\">\n\n<instance bitwidth=\"4\" maxseq=\"4\" command=\"Run binaryTree for exactly 4 Branch, 5 Leaf\" filename=\"/Users/atdyer/research/alloy/models/binaryTree.als\">\n\n<sig label=\"seq/Int\" ID=\"0\" parentID=\"1\" builtin=\"yes\">\n</sig>\n\n<sig label=\"Int\" ID=\"1\" parentID=\"2\" builtin=\"yes\">\n</sig>\n\n<sig label=\"String\" ID=\"3\" parentID=\"2\" builtin=\"yes\">\n</sig>\n\n<sig label=\"this/Leaf\" ID=\"4\" parentID=\"5\">\n   <atom label=\"Leaf$0\"/>\n   <atom label=\"Leaf$1\"/>\n   <atom label=\"Leaf$2\"/>\n   <atom label=\"Leaf$3\"/>\n   <atom label=\"Leaf$4\"/>\n</sig>\n\n<sig label=\"this/Branch\" ID=\"6\" parentID=\"5\">\n   <atom label=\"Branch$0\"/>\n   <atom label=\"Branch$1\"/>\n   <atom label=\"Branch$2\"/>\n   <atom label=\"Branch$3\"/>\n</sig>\n\n<field label=\"left\" ID=\"7\" parentID=\"6\">\n   <tuple> <atom label=\"Branch$0\"/> <atom label=\"Leaf$4\"/> </tuple>\n   <tuple> <atom label=\"Branch$1\"/> <atom label=\"Leaf$3\"/> </tuple>\n   <tuple> <atom label=\"Branch$2\"/> <atom label=\"Branch$1\"/> </tuple>\n   <tuple> <atom label=\"Branch$3\"/> <atom label=\"Branch$2\"/> </tuple>\n   <types> <type ID=\"6\"/> <type ID=\"5\"/> </types>\n</field>\n\n<field label=\"right\" ID=\"8\" parentID=\"6\">\n   <tuple> <atom label=\"Branch$0\"/> <atom label=\"Leaf$2\"/> </tuple>\n   <tuple> <atom label=\"Branch$1\"/> <atom label=\"Leaf$1\"/> </tuple>\n   <tuple> <atom label=\"Branch$2\"/> <atom label=\"Branch$0\"/> </tuple>\n   <tuple> <atom label=\"Branch$3\"/> <atom label=\"Leaf$0\"/> </tuple>\n   <types> <type ID=\"6\"/> <type ID=\"5\"/> </types>\n</field>\n\n<sig label=\"this/Node\" ID=\"5\" parentID=\"2\" abstract=\"yes\">\n</sig>\n\n<field label=\"depth\" ID=\"9\" parentID=\"5\">\n   <tuple> <atom label=\"Branch$0\"/> <atom label=\"2\"/> </tuple>\n   <tuple> <atom label=\"Branch$1\"/> <atom label=\"2\"/> </tuple>\n   <tuple> <atom label=\"Branch$2\"/> <atom label=\"1\"/> </tuple>\n   <tuple> <atom label=\"Branch$3\"/> <atom label=\"0\"/> </tuple>\n   <tuple> <atom label=\"Leaf$0\"/> <atom label=\"1\"/> </tuple>\n   <tuple> <atom label=\"Leaf$1\"/> <atom label=\"3\"/> </tuple>\n   <tuple> <atom label=\"Leaf$2\"/> <atom label=\"3\"/> </tuple>\n   <tuple> <atom label=\"Leaf$3\"/> <atom label=\"3\"/> </tuple>\n   <tuple> <atom label=\"Leaf$4\"/> <atom label=\"3\"/> </tuple>\n   <types> <type ID=\"5\"/> <type ID=\"1\"/> </types>\n</field>\n\n<sig label=\"univ\" ID=\"2\" builtin=\"yes\">\n</sig>\n\n<skolem label=\"$binaryTree_r\" ID=\"10\">\n   <tuple> <atom label=\"Branch$3\"/> </tuple>\n   <types> <type ID=\"5\"/> </types>\n</skolem>\n\n</instance>\n\n<source filename=\"/Users/atdyer/research/alloy/models/binaryTree.als\" content=\"abstract sig Node {&#x000a;&#x0009;depth: Int&#x000a;}&#x000a;sig Leaf extends Node {}&#x000a;sig Branch extends Node {&#x000a;&#x0009;left: Node,&#x000a;&#x0009;right: Node&#x000a;}&#x000a;&#x000a;pred binaryTree {&#x000a;&#x0009;some r: Node {&#x000a;&#x0009;&#x0009;Node in r.^(left + right) + r&#x000a;&#x0009;&#x0009;r.depth = 0&#x000a;&#x0009;&#x0009;all n: r.^(left + right) |&#x000a;&#x0009;&#x0009;&#x0009;n.depth = add[parent[n].depth, 1]&#x000a;&#x0009;}&#x000a;  all n: Node {&#x000a;&#x0009;&#x0009;n not in n.^(left + right)&#x000a;&#x0009;&#x0009;lone n.~(left + right)&#x000a;&#x0009;&#x0009;no n.left &amp; n.right&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;fun parent (node: Node): Node {&#x000a;&#x0009;{ n: Node | n.left = node or n.right = node }&#x000a;}&#x000a;&#x000a;fun size (node: Node): Int {&#x000a;&#x0009;#node.*(left+right)&#x000a;}&#x000a;&#x000a;run binaryTree for exactly 4 Branch, 5 Leaf&#x000a;\"/>\n\n<source filename=\"/$alloy4$/models/util/integer.als\" content=\"module util/integer&#x000a;&#x000a;/*&#x000a; * A collection of utility functions for using Integers in Alloy.&#x000a; * Note that integer overflows are silently truncated to the current bitwidth&#x000a; * using the 2&apos;s complement arithmetic, unless the &quot;forbid overfows&quot; option is&#x000a; * turned on, in which case only models that don&apos;t have any overflows are &#x000a; * analyzed. &#x000a; */&#x000a;&#x000a;fun add  [n1, n2: Int] : Int { this/plus[n1, n2] }&#x000a;fun plus [n1, n2: Int] : Int { n1 fun/add n2 }&#x000a;&#x000a;fun sub   [n1, n2: Int] : Int { this/minus[n1, n2] }&#x000a;fun minus [n1, n2: Int] : Int { n1 fun/sub n2 }&#x000a;&#x000a;fun mul [n1, n2: Int] : Int { n1 fun/mul n2 }&#x000a;&#x000a;/**&#x000a; * Performs the division with &quot;round to zero&quot; semantics, except the following 3 cases&#x000a; * 1) if a is 0, then it returns 0&#x000a; * 2) else if b is 0, then it returns 1 if a is negative and -1 if a is positive&#x000a; * 3) else if a is the smallest negative integer, and b is -1, then it returns a&#x000a; */&#x000a;fun div [n1, n2: Int] : Int { n1 fun/div n2 }&#x000a;&#x000a;/** answer is defined to be the unique integer that satisfies &quot;a = ((a/b)*b) + remainder&quot; */&#x000a;fun rem [n1, n2: Int] : Int { n1 fun/rem n2 }&#x000a;&#x000a;/** negate */&#x000a;fun negate [n: Int] : Int { 0 fun/sub n }&#x000a;&#x000a;/** equal to */&#x000a;pred eq [n1, n2: Int] { int[n1] = int[n2] }&#x000a;&#x000a;/** greater than */&#x000a;pred gt [n1, n2: Int] { n1 &gt; n2 }&#x000a;&#x000a;/** less then */&#x000a;pred lt [n1, n2: Int] { n1 &lt; n2 }&#x000a;&#x000a;/** greater than or equal */&#x000a;pred gte [n1, n2: Int] { n1 &gt;= n2 }&#x000a;&#x000a;/** less than or equal */&#x000a;pred lte [n1, n2: Int] { n1 &lt;= n2 }&#x000a;&#x000a;/** integer is zero */&#x000a;pred zero [n: Int] { n = 0 }&#x000a;&#x000a;/** positive */&#x000a;pred pos  [n: Int] { n &gt; 0 }&#x000a;&#x000a;/** negative */&#x000a;pred neg  [n: Int] { n &lt; 0 }&#x000a;&#x000a;/** non-positive */&#x000a;pred nonpos [n: Int] { n &lt;= 0 }&#x000a;&#x000a;/** non-negative */&#x000a;pred nonneg [n: Int] { n &gt;= 0 }&#x000a;&#x000a;/** signum (aka sign or sgn) */&#x000a;fun signum [n: Int] : Int { n&lt;0 =&gt; (0 fun/sub 1) else (n&gt;0 =&gt; 1 else 0) }&#x000a;&#x000a;/**&#x000a; * returns the ith element (zero-based) from the set s&#x000a; * in the ordering of &apos;next&apos;, which is a linear ordering&#x000a; * relation like that provided by util/ordering&#x000a; */&#x000a;fun int2elem[i: Int, next: univ-&gt;univ, s: set univ] : lone s {&#x000a;  {e: s | #^next.e = int i }&#x000a;}&#x000a;&#x000a;/**&#x000a; * returns the index of the element (zero-based) in the&#x000a; * ordering of next, which is a linear ordering relation&#x000a; * like that provided by util/ordering&#x000a; */&#x000a;fun elem2int[e: univ, next: univ-&gt;univ] : lone Int {&#x000a;  Int[#^next.e]&#x000a;}&#x000a;&#x000a;/** returns the largest integer in the current bitwidth */&#x000a;fun max:one Int { fun/max }&#x000a;&#x000a;/** returns the smallest integer in the current bitwidth */&#x000a;fun min:one Int { fun/min }&#x000a;&#x000a;/** maps each integer (except max) to the integer after it */&#x000a;fun next:Int-&gt;Int { fun/next }&#x000a;&#x000a;/** maps each integer (except min) to the integer before it */&#x000a;fun prev:Int-&gt;Int { ~next }&#x000a;&#x000a;/** given a set of integers, return the largest element */&#x000a;fun max [es: set Int]: lone Int { es - es.^prev }&#x000a;&#x000a;/** given a set of integers, return the smallest element */&#x000a;fun min [es: set Int]: lone Int { es - es.^next }&#x000a;&#x000a;/** given an integer, return all integers prior to it */&#x000a;fun prevs [e: Int]: set Int { e.^prev }&#x000a;&#x000a;/** given an integer, return all integers following it */&#x000a;fun nexts [e: Int]: set Int { e.^next }&#x000a;&#x000a;/** returns the larger of the two integers */&#x000a;fun larger [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; b else a) }&#x000a;&#x000a;/** returns the smaller of the two integers */&#x000a;fun smaller [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; a else b) }&#x000a;\"/>\n\n</alloy>\n`;\n}\n","import { createStore } from '@reduxjs/toolkit';\nimport sterlingSlice from './sterling/sterlingSlice';\n\nexport const store = createStore(sterlingSlice);\nexport type RootState = ReturnType<typeof sterlingSlice>;","import React from 'react';\nimport { SterlingConnection } from '../../connections/SterlingConnection';\nimport { Button, Navbar, NavbarDivider, NavbarHeading } from '@blueprintjs/core';\n\nexport interface ISterlingNavbarProps {\n    connection: SterlingConnection\n}\n\ninterface ISterlingNavbarState {\n    connected: boolean\n    ready: boolean\n}\n\nclass SterlingNavbar extends React.Component<ISterlingNavbarProps, ISterlingNavbarState> {\n\n    constructor(props: ISterlingNavbarProps) {\n        super(props);\n        this.state = {\n            connected: false,\n            ready: false\n        }\n    }\n\n    componentDidMount() {\n\n        const connection = this.props.connection;\n\n        connection\n            .addEventListener('connect', () => {\n                this.setState({connected: true});\n            })\n            .addEventListener('disconnect', () => {\n                this.setState({connected: false, ready: false});\n            })\n            .addEventListener('instance', event => {\n                this.setState({\n                    ready: this.state.connected\n                });\n            });\n\n    }\n\n    render() {\n\n        const state = this.state;\n\n        return (\n            <Navbar fixedToTop className={'nav bp3-dark'}>\n                <Navbar.Group>\n                    <NavbarHeading className={'nav-heading'}>\n                        Sterling <span className={'muted'}>Lite</span>\n                    </NavbarHeading>\n                    <NavbarDivider/>\n                </Navbar.Group>\n                <Navbar.Group>\n                    <Button disabled={!state.ready}\n                            intent={state.connected ? 'success' : 'danger'}\n                            large={true}\n                            onClick={this._requestNext}\n                            rightIcon={'circle-arrow-right'}\n                            text={'Next Instance'}/>\n                </Navbar.Group>\n            </Navbar>\n        );\n\n    }\n\n    private _requestNext = (): void => {\n\n        this.props.connection.requestNextInstance();\n\n    }\n}\n\nexport default SterlingNavbar;","import React from 'react';\nimport { Button, ButtonGroup, Menu, MenuItem, Navbar, Popover, Position } from '@blueprintjs/core';\nimport { SterlingConnection } from '../../connections/SterlingConnection';\n\nexport interface IGraphNavbarProps {\n    connection: SterlingConnection,\n    canRequestContrastingCase: boolean\n}\n\nclass GraphNavbar extends React.Component<IGraphNavbarProps> {\n\n    render () {\n        return <Navbar className={'nav'} fixedToTop={false}>\n            <Navbar.Group>\n                <ButtonGroup style={{minWidth: 120}}>\n                    <Popover\n                        minimal={true}\n                        position={Position.BOTTOM_LEFT}>\n                        <Button rightIcon={'caret-down'}\n                                fill={true}\n                                text={'Layout Options'}/>\n                        {this._layoutMenu()}\n                    </Popover>\n                </ButtonGroup>\n            </Navbar.Group>\n            {\n                this.props.canRequestContrastingCase && <Navbar.Group>\n                    <Button intent={'success'}\n                            outlined={true}\n                            large={false}\n                            text={'Generate Contrasting Case'}\n                            onClick={this._requestContrasting}\n                    />\n                </Navbar.Group>\n            }\n        </Navbar>\n    }\n\n    private _layoutMenu = (): React.ReactNode => (\n        <Menu>\n            <MenuItem text={'Test'} icon={'lab-test'}/>\n        </Menu>\n    )\n\n    private _requestContrasting = (): void => {\n        this.props.connection.requestContrastingCase();\n    }\n\n}\n\nexport default GraphNavbar;","import React from 'react';\nimport { AlloyField, AlloyInstance, AlloySignature } from 'alloy-ts';\nimport GraphNavbar from './GraphNavbar';\nimport { SterlingConnection } from '../../connections/SterlingConnection';\nimport { HTMLTable } from '@blueprintjs/core';\n\nexport interface IGraphViewProps {\n    connection: SterlingConnection\n    instance: AlloyInstance\n    canRequestContrastingCase: boolean\n}\n\nclass GraphView extends React.Component<IGraphViewProps> {\n\n    render () {\n        return (\n            <div className={'graph-view'}>\n                <GraphNavbar\n                    connection={this.props.connection}\n                    canRequestContrastingCase={this.props.canRequestContrastingCase}/>\n                <div className={'temp-tables'}>\n                    {\n                        this.props.instance.signatures()\n                            .filter(sig => sig.atoms().length)\n                            .sort((a, b) => a.atoms().length - b.atoms().length)\n                            .map(GraphView._signatureTable)\n                    }\n                    {\n                        this.props.instance.fields()\n                            .map(GraphView._fieldTable)\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    private static _signatureTable = (signature: AlloySignature, index: number): React.ReactNode => (\n        <HTMLTable key={index}\n                   className={'bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped'}>\n            <thead>\n            <tr>\n                <th>{signature.name()}</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n                signature.atoms().map((atom, i) => (\n                    <tr key={i}>\n                        <td>{atom.name()}</td>\n                    </tr>\n                ))\n            }\n            </tbody>\n        </HTMLTable>\n    )\n\n    private static _fieldTable = (field: AlloyField, index: number): React.ReactNode => (\n        <div className={'table-container'} key={index}>\n            {field.name()}\n            <HTMLTable className={'bp3-html-table-bordered bp3-html-table-condensed bp3-html-table-striped'}>\n                <thead>\n                <tr>\n                {\n                    field.types().map((sig, i) => (\n                        <th key={i}>{sig.name()}</th>\n                    ))\n                }\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    field.tuples().map((tuple, i) => (\n                        <tr key={i}>{\n                            tuple.atoms().map((atom, j) => (\n                                <td key={j}>{atom.name()}</td>\n                            ))\n                        }</tr>\n                    ))\n                }\n                </tbody>\n            </HTMLTable>\n        </div>\n    )\n\n}\n\nexport default GraphView;","import React from 'react';\nimport { RootState } from '../store/store';\nimport { setContrastingCase, setInstance } from '../store/sterling/sterlingSlice';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { SterlingConnection } from '../connections/SterlingConnection';\nimport SterlingNavbar from '../features/nav/SterlingNavbar';\nimport { AlloyInstance } from 'alloy-ts';\nimport GraphView from '../features/graph/GraphView';\n\nconst mapState = (state: RootState) => ({\n    ...state\n});\n\nconst mapDispatch = {\n    setInstance,\n    setContrastingCase\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype SterlingConnectedProps = ConnectedProps<typeof connector>;\n\nexport type SterlingProps = SterlingConnectedProps & {\n    connection: SterlingConnection\n}\n\nclass Sterling extends React.Component<SterlingProps> {\n\n    componentDidMount () {\n\n        this._initializeConnection();\n\n    }\n\n    render (): React.ReactNode {\n\n        return <div className={'sterling'}>\n            <SterlingNavbar connection={this.props.connection}/>\n            { this._renderStage() }\n        </div>\n\n    }\n\n    private _initializeConnection = (): void => {\n\n        const connection = this.props.connection;\n\n        connection.addEventListener('connect', () => {\n            connection.requestCurrentInstance();\n        });\n\n        connection.addEventListener('instance', event => {\n            this.props.setInstance(event.instance);\n        });\n\n        connection.addEventListener('contrast', event => {\n            this.props.setContrastingCase(event.instance);\n        });\n\n        connection.connect();\n\n    }\n\n    private _renderStage = (): React.ReactNode => {\n\n        const props = this.props;\n        const instance = props.instance;\n        const contrast = props.contrast;\n\n        if (instance === null) {\n            return Sterling._renderPlaceholder();\n        } else {\n            if (contrast === null) {\n                return this._renderSingleInstance(instance);\n            } else {\n                return this._renderInstanceWithContrast(instance, contrast);\n            }\n        }\n\n    }\n\n    private static _renderPlaceholder (): React.ReactNode {\n        return <div className={'stage placeholder'}>Generate an instance.</div>\n    }\n\n    private _renderSingleInstance (instance: AlloyInstance): React.ReactNode {\n        return <div className={'stage'}>\n            <GraphView\n                canRequestContrastingCase={true}\n                connection={this.props.connection}\n                instance={instance}/>\n        </div>;\n    }\n\n    private _renderInstanceWithContrast (instance: AlloyInstance, contrast: AlloyInstance): React.ReactNode {\n        return <div className={'stage'}>\n            <GraphView\n                canRequestContrastingCase={true}\n                connection={this.props.connection}\n                instance={instance}/>\n            <div className={'divider'}/>\n            <GraphView\n                canRequestContrastingCase={false}\n                connection={this.props.connection}\n                instance={contrast}/>\n        </div>\n    }\n\n}\n\nexport default connector(Sterling);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {ForgeConnection} from \"./connections/ForgeConnection\";\r\nimport { store } from \"./store/store\";\r\nimport Sterling from './sterling/Sterling';\r\nimport './styles/index.scss';\r\n\r\nconst connection = new ForgeConnection();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n          <Sterling connection={connection}/>\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}