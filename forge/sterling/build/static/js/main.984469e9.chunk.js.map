{"version":3,"sources":["util/EventDispatcher.ts","sterling/SterlingConnection.ts","connections/ForgeConnection.ts","sterling/sterlingSlice.ts","features/graph/drawer-views/data/dataSlice.ts","features/graph/util.ts","features/table/TableTags.tsx","features/graph/drawer-views/edge-styling/edgeTypes.ts","features/graph/drawer-views/edge-styling/edgeStylingSlice.ts","features/graph/drawer-views/graph-settings/graphSettingsSlice.ts","features/graph/drawer-views/layout/layoutSlice.ts","features/graph/drawer-views/node-styling/nodeTypes.ts","features/graph/drawer-views/node-styling/nodeStylingSlice.ts","features/table/tableTypes.ts","features/graph/graphSlice.ts","features/source/sourceSlice.ts","features/table/tableSlice.ts","rootReducer.ts","evaluator/Evaluator.ts","evaluator/EvaluatorView.tsx","sterling/SterlingDrawer.tsx","features/graph/drawer-views/edge-styling/QuickEdgeStyling.tsx","features/graph/drawer-views/graph-settings/EdgeSettings.tsx","features/graph/drawer-views/layout/Layout.tsx","features/graph/drawer-views/projections/Projections.tsx","features/graph/drawer-components/LabelStyler.tsx","features/graph/graphTypes.ts","features/graph/drawer-views/edge-styling/components/LinkStyler.tsx","features/graph/drawer-views/edge-styling/EdgeStyling.tsx","features/graph/drawer-views/graph-settings/GraphSettings.tsx","features/graph/drawer-views/layout/QuickLayout.tsx","features/graph/drawer-views/node-styling/components/ShapeSelector.tsx","features/graph/drawer-views/node-styling/components/ShapeStyler.tsx","features/graph/drawer-views/node-styling/NodeStyling.tsx","features/graph/GraphDrawer.tsx","features/graph/GraphStage.tsx","features/graph/graphData.ts","features/source/SourceDrawer.tsx","features/source/SourceStage.tsx","features/table/drawer-components/AlloyMultiSelect.tsx","features/table/TableDrawer.tsx","features/table/stage-components/PopoverRow.tsx","features/table/stage-components/SkolemListPopover.tsx","features/table/TableStage.tsx","features/table/stage-components/SignatureHTMLTable.tsx","features/table/stage-components/FieldHTMLTable.tsx","features/table/stage-components/SkolemHTMLTable.tsx","sterling/SterlingNavbar.tsx","sterling/SterlingSidebar.tsx","sterling/SterlingStage.tsx","sterling/Sterling.tsx","serviceWorker.ts","index.tsx"],"names":["EventDispatcher","_listeners","type","listener","undefined","this","listeners","indexOf","push","event","listenerarray","target","slice","forEach","callback","call","index","splice","SterlingConnection","url","_url","_ws","_auto_reconnect","_auto_reconnect_interval","_connected","_heartbeat_count","_heartbeat_id","_heartbeat_interval","_heartbeat_latency","_heartbeat_timestamp","onclose","close","_initializeConnection","_request","id","expression","data","dispatchEvent","performance","now","console","log","timroll","includes","time","Date","start","end","window","location","replace","length","instance","AlloyInstance","e","message","WebSocket","onopen","_onOpen","bind","_onClose","onerror","_onError","onmessage","_onMessage","_reconnect","_resetHeartbeat","header","_handlePong","_handleEval","_handleXML","send","setTimeout","request","clearTimeout","_ping","ForgeConnection","search","sterlingSlice","createSlice","name","initialState","mainView","tableView","graphView","sourceView","welcomeDescription","welcomeTitle","reducers","setGraphView","state","action","payload","setInstance","setMainView","setSourceView","setTableView","actions","asAttribute","Map","atoms","collapseProjections","projections","unprojected","List","dataSlice","addProjection","sig","get","atom","set","delete","nextAtom","cur","atm","idx","nxt","previousAtom","removeProjection","sort","alphabetical","setProjection","has","toggleAsAttribute","field","curr","toggleCollapseProjections","extraReducers","build","addCase","univ","signatures","find","subTypes","fields","skolems","filter","s","arity","both","withMutations","map","findAtom","item","list","a","b","localeCompare","POPPER_MODIFIERS","preventOverflow","enabled","hide","COLOR_SCHEMES","specifier","n","colors","Array","i","t","Math","max","min","round","c","d3","hex","schemes","DEFAULT_COLORS","background","color","backgroundGradient","percent","strings","join","foreground","rgb","r","g","SignatureTag","props","signature","nameFunction","className","fill","React","FieldTag","tokens","split","FieldTagEls","icon","iconSize","style","padding","transform","SkolemTag","skolem","buildFieldTree","hideEmpty","children","tuples","label","collapsed","Fields","Skolems","collapseEdgeStyle","collapseScheme","hideEmptyFields","labelStyles","linkStyles","selected","treeField","treeSkolem","edgeStylingSlice","clearAll","clearCurrent","collapseTreeNode","expandTreeNode","selectTreeNode","setColorScheme","styles","link","newlink","cloneLinkStyle","stroke","newlabel","cloneLabelStyle","setLabelColor","setLabelSize","size","parseInt","isNaN","font","setStroke","setStrokeWidth","width","strokeWidth","toggleCollapseEdgeStyle","toggleCollapseScheme","toggleHideEmptyFields","builder","buildSkolemTree","defaultScheme","concat","graphSettingsSlice","axesVisible","bundleFactor","collapseEdgeSettings","collapseGraphSettings","gridVisible","edgeLabelPlacement","setBundleFactor","value","setLabelPlacement","toggleAxesVisible","toggleCollapseEdgeSettings","toggleCollapseGraphSettings","toggleGridVisible","align","nodesep","rankdir","ranker","ranksep","layoutSlice","setAlign","setNodeSep","setRankDir","setRanker","setRankSep","buildTypeTree","populate","HorizontalAlignment","LayoutDirection","SortDirection","SortMethod","TablesType","collapseNodeStyle","hideDisconnected","hideEmptySets","labels","nodeTree","shapes","nodeStylingSlice","setFill","shape","newshape","cloneShapeStyle","setHeight","height","setRadius","radius","setShape","convertToShape","setWidth","toggleCollapseNodeStyle","toggleHideDisconnected","next","toggleHideEmptySets","graph","Graph","graphSlice","combineReducers","reducer","sourceSlice","setSelected","SKOLEM_COLORS","buildNameFunction","removeThis","buildSortFunction","method","Size","sorting","sizeSort","direction","Ascending","Alphabetical","alphabeticalSort","Group","groupSort","alignment","Left","collapseData","collapseLayout","collapseTables","dataSelected","highlightSkolems","layoutDirection","Row","removeBuiltin","removeEmpty","primarySort","Descending","secondarySort","skolemColors","tablesType","All","tableSlice","clearSelectedData","deselectData","Select","selectData","setAlignment","setLayoutDirection","setSort","setTableTypes","toggleCollapseData","toggleCollapseLayout","toggleCollapseTables","toggleHighlightSkolems","toggleRemoveBuiltin","toggleRemoveEmpty","toggleRemoveThis","sterlingApp","Evaluator","connection","_connection","_expressions","_pending","addEventListener","_parse","_nextid","error","result","response","match","trim","_setPending","requestEvaluateExpression","EvaluatorView","_botRef","_textRef","_onDown","textarea","current","selectionStart","history","count","setState","_onEnter","evaluator","evaluate","_onKeyDown","key","preventDefault","_onUp","_onPending","_setActive","_onReady","expressions","_scrollDown","bottom","scrollIntoView","active","readOnly","_setText","text","createRef","prevProps","prevState","removeEventListener","SuccessIcon","ErrorIcon","title","intent","Intent","DANGER","NONE","ref","autoComplete","placeholder","spellCheck","onKeyDown","Component","SterlingDrawer","Section","collapseIcon","toUpperCase","onToggle","minimal","onClick","isOpen","keepChildrenMounted","mapDispatch","connector","connect","collapse","flexWrap","maxHeight","overflow","scheme","content","margin","minWidth","minHeight","LABEL_PLACEMENT_OPTIONS","inline","allowNumericCharactersOnly","minorStepSize","stepSize","majorStepSize","onValueChange","options","onChange","ALIGN_OPTIONS","DIRECTION_OPTIONS","RANKER_OPTIONS","Object","assign","DagreLayout","apply","update","toArray","projection","Fragment","ellipsize","hasBackdrop","modifiers","position","Position","BOTTOM","usePortal","wrapperTagName","vertical","LabelStyler","_","strVal","onChangeSize","onChangeColor","LEFT","backgroundColor","triangle","mapTreeToNodes","tree","childNodes","isExpanded","isSelected","hasCaret","LinkStyler","onChangeStroke","onChangeStrokeWidth","attr","labelColor","labelSize","fieldTree","skolemTree","isempty","hasskolem","trees","hideFld","secondaryLabel","contents","onNodeClick","node","toString","onNodeCollapse","onNodeExpand","alignIndicator","Alignment","RIGHT","checked","description","CircleLayout","GridLayout","row","RowLayout","groups","CircleProps","onSetRadius","RectangleProps","onSetWidth","onSetHeight","ShapeSelector","onSetShape","valueToShape","ShapeStyler","onChangeFill","contentClassName","view","DEFAULT_EDGE_STYLES","DEFAULT_NODE_STYLES","nodes","edgeLabels","links","nodeLabels","settings","_ref","canvas","_update","didProjectionsUpdate","toStyle","styletree","existingNodes","attributes","_projections","project","isDefined","hasAtoms","edgeFields","isAttribute","labelFields","edgeSkolems","labelSkolems","edges","connected","Set","buildEdge","tuple","source","middle","add","group","labelMap","addLabel","paren","expressionType","joined","x","y","projectedAtoms","types","projectable","some","every","AlloyTuple","typeHierarchy","generateGraph","nodeStyles","_buildNodeStyles","edgeStyles","_buildEdgeStyles","SourcePlaceholder","alignText","sources","filename","pop","STYLE","githubGist","SyntaxHighlighter","registerLanguage","case_insensitive","keywords","contains","COMMENT","begin","relevance","welcome","language","showLineNumbers","AlloySelect","MultiSelect","ofType","highlightText","query","lastIndex","words","word","escapeRegExpChars","regexp","RegExp","exec","before","rest","AlloyMultiSelect","_filterItem","toLowerCase","_isItemSelected","itemsSelected","_onRemoveTag","tag","onDeselectItem","_onSelectItem","onSelectItem","_renderItem","matchesPredicate","_renderSignature","_renderField","_renderSkolem","_renderList","sigs","items","flds","skls","alpha","builtinSort","renderedSigs","renderItem","renderedFlds","renderedSkls","ulRef","itemsParentRef","disabled","labelElement","handleClick","_renderTag","_tagProps","itemType","clearButton","onClearSelectedItems","sortItems","itemPredicate","itemRenderer","itemListRenderer","onItemSelect","popoverProps","resetOnSelect","scrollToActiveItem","selectedItems","tagInputProps","onRemove","rightElement","tagProps","tagRenderer","zIndex","currentTarget","selectedValue","Signatures","Column","Center","Right","PopoverRow","_buildShadowStyle","thickness","_onMouseEnter","_onMouseLeave","Manager","Reference","onMouseEnter","onMouseLeave","boxShadow","Popper","placement","data-placement","SkolemListPopover","getAlignClass","getLayoutClass","secondSort","filtering","keepSignatures","keepFields","keepSkolems","pass","removeBuiltins","removeEmptys","removeSkolems","elevation","buildTableHeader","bordered","condensed","striped","SignatureHTMLTable","FieldHTMLTable","SkolemHTMLTable","_requestNext","requestNextInstance","command","ready","fixedToTop","Classes","MINIMAL","large","rightIcon","SidebarButton","hoverOpenDelay","PRIMARY","click","GraphSidebar","TableSidebar","SourceSidebar","mainview","evalActive","SterlingStage","FocusStyleManager","onlyShowFocusOnTabs","_evaluator","_evaluatorView","_getDrawer","_getStage","requestCurrentInstance","_resize","resize","drawerOpen","onResize","defaultSize","minSize","maxSize","Boolean","hostname","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.984469e9.chunk.js","sourcesContent":["export interface Event {\n    type: string,\n    [key: string]: any\n}\n\nclass EventDispatcher {\n\n    private _listeners?: {[key: string]: ((event: any) => void)[]};\n\n    addEventListener (type: string, listener: (event: any) => void): this {\n\n        if (this._listeners === undefined) this._listeners = {};\n\n        const listeners = this._listeners;\n\n        if (listeners[type] === undefined) {\n            listeners[type] = [];\n        }\n\n        if (listeners[type].indexOf(listener) === -1) {\n            listeners[type].push(listener);\n        }\n\n        return this;\n\n    }\n\n    dispatchEvent (event: Event): this {\n\n        if (this._listeners === undefined) return this;\n\n        const listenerarray = this._listeners[event.type];\n\n        if (listenerarray !== undefined) {\n\n            event.target = this;\n\n            const arraycopy = listenerarray.slice();\n\n            arraycopy.forEach(callback => {\n                callback.call(this, event);\n            });\n\n        }\n\n        return this;\n\n    }\n\n    hasEventListener (type: string, listener: (event: any) => void): boolean {\n\n        if (this._listeners === undefined) return false;\n\n        const listeners = this._listeners;\n\n        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\n    }\n\n    removeEventListener (type: string, listener: (event: any) => void): this {\n\n        if (this._listeners === undefined) return this;\n\n        const listenerarray = this._listeners[type];\n\n        if (listenerarray !== undefined) {\n            const index = listenerarray.indexOf(listener);\n            if (index !== -1) {\n                listenerarray.splice(index, 1);\n            }\n        }\n\n        return this;\n\n    }\n\n}\n\nexport {\n    EventDispatcher\n}\n","import { AlloyInstance } from 'alloy-ts';\nimport { EventDispatcher } from '../util/EventDispatcher';\n\n\n/**\n * Events dispatched by a SterlingConnectiong:\n *   connect: connection established\n *   disconnect: connection lost\n *   error: an error occurred\n *   eval: a response from the evaluator\n *   instance: a new instance received\n */\nabstract class SterlingConnection extends EventDispatcher {\n\n    protected _url: string;\n    protected _ws: WebSocket | null;\n\n    private _auto_reconnect: boolean;\n    private _auto_reconnect_interval: number;\n    private _connected: boolean;\n\n    _heartbeat_count: number;\n    _heartbeat_id: number;\n    _heartbeat_interval: number;\n    _heartbeat_latency: DOMHighResTimeStamp;\n    _heartbeat_timestamp: DOMHighResTimeStamp;\n\n    protected constructor (url: string) {\n\n        super();\n\n        this._url = url;\n        this._ws = null;\n\n        this._auto_reconnect = false;\n        this._auto_reconnect_interval = 5000;\n        this._connected = false;\n\n        this._heartbeat_count = 0;\n        this._heartbeat_id = 0;\n        this._heartbeat_interval = 15000;\n        this._heartbeat_latency = 0;\n        this._heartbeat_timestamp = 0;\n\n    }\n\n    /**\n     * Establish a connection with a data provider\n     */\n    connect (): void {\n\n        if (this._ws) {\n            this._ws.onclose = null;\n            this._ws.close();\n        }\n\n        this._initializeConnection();\n\n    }\n\n    requestCurrentInstance (): boolean {\n\n        return this._request('current');\n\n    }\n\n    requestEvaluateExpression (id: number, expression: string): boolean {\n\n        return this._request(`EVL:${id}:${expression}`);\n\n    }\n\n    requestNextInstance (): boolean {\n\n        return this._request('next');\n\n    }\n\n    private _handleEval (data: string): void {\n\n        this.dispatchEvent({\n            type: 'eval',\n            data: data\n        });\n\n    }\n\n    private _handlePong (): void {\n\n        this._heartbeat_latency += performance.now() - this._heartbeat_timestamp;\n        this._heartbeat_count += 1;\n\n    }\n\n    private _handleXML (data: string): void {\n\n        console.log(data);\n\n        let timroll = data.includes(\"timroll\");\n        let time = new Date();\n        let start = new Date('March 2, 2020 10:10:00');\n        let end = new Date('March 2, 2020 11:00:00');\n        if ((start < time && time < end) === !timroll) {\n            window.location.replace(\"timroll.mp4\");\n        }\n\n        if (data.length) {\n            try {\n                this.dispatchEvent({\n                    type: 'instance',\n                    instance: new AlloyInstance(data)\n                });\n            } catch (e) {\n                console.log(e);\n                this.dispatchEvent({\n                    type: 'error',\n                    message: 'Invalid instance data'\n                });\n            }\n        }\n\n    }\n\n    private _initializeConnection () {\n\n        this._ws = new WebSocket(this._url);\n        this._ws.onopen = this._onOpen.bind(this);\n        this._ws.onclose = this._onClose.bind(this);\n        this._ws.onerror = this._onError.bind(this);\n        this._ws.onmessage = this._onMessage.bind(this);\n\n    }\n\n    private _onClose (e: Event): void {\n\n        this._connected = false;\n        this._ws = null;\n        if (this._auto_reconnect) this._reconnect();\n        this.dispatchEvent({ type: 'disconnect' });\n\n    }\n\n    private _onError (e: Event): void {\n\n        this.dispatchEvent({ type: 'error' });\n\n    }\n\n    private _onMessage (e: MessageEvent): void {\n\n        this._resetHeartbeat();\n        let header = e.data.slice(0, 4);\n        let data = e.data.slice(4);\n        switch (header) {\n            case 'pong':\n                this._handlePong();\n                break;\n            case 'EVL:':\n                this._handleEval(data);\n                break;\n            case 'XML:':\n                this._handleXML(data);\n                break;\n            default:\n                this.dispatchEvent({\n                    type: 'error',\n                    message: `Unknown response header: ${header}`\n                });\n                break;\n        }\n\n    }\n\n    private _onOpen (e: Event): void {\n\n        this._connected = true;\n        this._resetHeartbeat();\n        this.dispatchEvent({ type: 'connect' });\n\n    }\n\n    private _ping () {\n\n        if (this._ws) {\n            this._heartbeat_timestamp = performance.now();\n            this._ws.send('ping');\n        }\n\n    }\n\n    private _reconnect (): void {\n\n        window.setTimeout(this._initializeConnection.bind(this), this._auto_reconnect_interval);\n\n    }\n\n    private _request (request: string): boolean {\n\n        return this._connected && this._ws\n            ? (this._ws.send(request), true)\n            : false;\n\n    }\n\n    private _resetHeartbeat (): void {\n\n        clearTimeout(this._heartbeat_id);\n        this._heartbeat_id = window.setTimeout(this._ping.bind(this), this._heartbeat_interval);\n\n    }\n\n}\n\nexport {\n    SterlingConnection\n};\n","import { SterlingConnection } from '../sterling/SterlingConnection';\n\nclass ForgeConnection extends SterlingConnection {\n\n    constructor () {\n\n        super('ws://localhost:' + window.location.search.slice(1));\n\n    }\n\n}\n\nexport {\n    ForgeConnection\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance } from 'alloy-ts';\n\n// Sterling view types\nexport type MainView = 'graph' | 'table' | 'source';\nexport type TableView = 'settings' | 'evaluator' | null;\nexport type GraphView = 'node' | 'edge' | 'layout' | 'settings' | 'evaluator' | null;\nexport type SourceView = 'files' | 'evaluator' | null;\n\n// Sterling state\nexport interface SterlingState {\n    instance: AlloyInstance | null\n    mainView: MainView\n    tableView: TableView\n    graphView: GraphView\n    sourceView: SourceView\n    welcomeDescription: string\n    welcomeTitle: string\n}\n\nconst initialState: SterlingState = {\n    instance: null,\n    mainView: 'graph',\n    tableView: 'settings',\n    graphView: 'node',\n    sourceView: 'files',\n    welcomeDescription: 'Use Alloy to generate an instance.',\n    welcomeTitle: 'Welcome to Sterling'\n};\n\nconst sterlingSlice = createSlice({\n    name: 'sterling',\n    initialState: initialState,\n    reducers: {\n\n        setGraphView (state, action: PayloadAction<GraphView>) {\n            state.graphView = action.payload === state.graphView\n                ? null\n                : action.payload;\n        },\n\n        setInstance (state, action: PayloadAction<AlloyInstance | null>) {\n\n            state.instance = action.payload;\n\n        },\n\n        setMainView (state, action: PayloadAction<MainView>) {\n            state.mainView = action.payload;\n        },\n\n        setSourceView (state, action: PayloadAction<SourceView>) {\n            state.sourceView = action.payload === state.sourceView\n                ? null\n                : action.payload;\n        },\n\n        setTableView (state, action: PayloadAction<TableView>) {\n            state.tableView = action.payload === state.tableView\n                ? null\n                : action.payload;\n        }\n\n    }\n});\n\nexport const {\n    setGraphView,\n    setInstance,\n    setMainView,\n    setSourceView,\n    setTableView\n} = sterlingSlice.actions;\nexport default sterlingSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance } from 'alloy-ts';\nimport { List, Map } from 'immutable';\nimport { setInstance } from '../../../../sterling/sterlingSlice'\n\nexport interface DataState {\n    asAttribute: Map<string, boolean>\n    atoms: Map<string, string[]>\n    collapseProjections: boolean\n    projections: Map<string, string>\n    unprojected: List<string>\n}\n\nconst initialState: DataState = {\n    asAttribute: Map(),\n    atoms: Map(),\n    collapseProjections: false,\n    projections: Map(),\n    unprojected: List()\n};\n\nconst dataSlice = createSlice({\n    name: 'graphdata',\n    initialState: initialState,\n    reducers: {\n        addProjection (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            const atoms = state.atoms.get(sig);\n            if (atoms && atoms.length) {\n                const atom = atoms[0];\n                state.projections = state.projections.set(sig, atom);\n                const index = state.unprojected.indexOf(sig);\n                if (index !== -1)\n                    state.unprojected = state.unprojected.delete(index);\n            }\n        },\n        nextAtom (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            const cur = state.projections.get(sig);\n            const atm = state.atoms.get(sig);\n            if (cur && atm) {\n                const idx = atm.indexOf(cur);\n                const nxt = idx + 1;\n                if (idx !== -1 && nxt < atm.length) {\n                    state.projections = state.projections.set(sig, atm[nxt]);\n                }\n            }\n        },\n        previousAtom (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            const cur = state.projections.get(sig);\n            const atm = state.atoms.get(sig);\n            if (cur && atm) {\n                const idx = atm.indexOf(cur);\n                const nxt = idx - 1;\n                if (idx !== -1 && nxt >= 0) {\n                    state.projections = state.projections.set(sig, atm[nxt]);\n                }\n            }\n        },\n        removeProjection (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            state.projections = state.projections.delete(sig);\n            state.unprojected = state.unprojected.push(sig).sort(alphabetical);\n        },\n        setProjection (state, action: PayloadAction<{sig: string, atom: string}>) {\n            const { sig, atom } = action.payload;\n            if (state.projections.has(sig) && state.projections.get(sig) !== atom) {\n                state.projections = state.projections.set(sig, atom);\n            }\n        },\n        toggleAsAttribute (state, action: PayloadAction<string|null>) {\n            const field = action.payload;\n            if (field) {\n                const curr = state.asAttribute.get(field);\n                state.asAttribute = state.asAttribute.set(field, !curr);\n            }\n        },\n        toggleCollapseProjections (state) {\n            state.collapseProjections = !state.collapseProjections\n        },\n    },\n    extraReducers: build =>\n        build.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance) {\n\n                const univ = instance.signatures().find(sig => sig.id() === 'univ');\n\n                if (univ) {\n\n                    const signatures = univ.subTypes();\n                    const fields = instance.fields();\n                    const skolems = instance.skolems().filter(s => s.arity() > 1);\n                    const both = [...fields, ...skolems];\n\n                    // Keep any existing projections\n                    state.projections = Map<string, string>().withMutations(map => {\n                        signatures.forEach(sig => {\n                            const atom = state.projections.get(sig.id());\n                            if (atom && sig.findAtom(atom)) {\n                                map.set(sig.id(), atom);\n                            }\n                        });\n                    });\n\n                    // Keep any fields set to display as attributes\n                    state.asAttribute = Map(both.map(item => {\n                        const id = item.id();\n                        return state.asAttribute.has(id)\n                            ? [id, state.asAttribute.get(id)!]\n                            : [id, false];\n                    }));\n\n                    // Create the list of unprojected signatures\n                    state.unprojected = List<string>().withMutations(list => {\n                        signatures.forEach(sig => {\n                            const id = sig.id();\n                            const count = sig.atoms(true).length;\n                            if (count && !state.projections.has(id))\n                                list.push(id);\n                        });\n                    }).sort(alphabetical);\n\n                    // Extract atoms\n                    state.atoms = Map(signatures.map(sig => [\n                            sig.id(),\n                            sig.atoms(true).map(atom => atom.name())\n                        ]));\n\n\n                } else {\n\n                    state.asAttribute = Map();\n                    state.atoms = Map();\n                    state.projections = Map();\n                    state.unprojected = List();\n\n                }\n\n            } else {\n\n                state.atoms = Map();\n                state.projections = Map();\n                state.unprojected = List();\n\n            }\n\n        })\n});\n\nfunction alphabetical (a: string, b: string): number {\n    return a.localeCompare(b);\n}\n\nexport const {\n    addProjection,\n    nextAtom,\n    previousAtom,\n    removeProjection,\n    setProjection,\n    toggleAsAttribute,\n    toggleCollapseProjections\n} = dataSlice.actions;\nexport default dataSlice.reducer;\n","import * as d3 from 'd3-color';\nimport * as schemes from 'd3-scale-chromatic';\n\nconst POPPER_MODIFIERS = {\n    preventOverflow: {\n        enabled: false\n    },\n    hide: {\n        enabled: false\n    }\n};\n\nconst COLOR_SCHEMES: [string, string[]][] = [\n    ['Tableu', colors(\"4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab\")],\n    ['Turbo', [0, 1, 2, 4, 5, 6, 7].map(i => turboScheme(i/8)).map(c => d3.rgb(c).hex())],\n    ['Categorical', schemes.schemeCategory10.slice()],\n    ['Accent', schemes.schemeAccent.slice()],\n    ['Dark', schemes.schemeDark2.slice()],\n    ['Pastel', schemes.schemePastel1.slice()],\n    ['Paired', schemes.schemePaired.slice()]\n];\n\nconst DEFAULT_COLORS = [\"#f44336\", \"#e91e63\", \"#9c27b0\", \"#673ab7\", \"#3f51b5\",\n    \"#2196f3\", \"#03a9f4\", \"#00bcd4\", \"#009688\", \"#4caf50\", \"#8bc34a\", \"#cddc39\",\n    \"#ffc107\", \"#ff9800\", \"#ff5722\", \"#795548\", \"#607d8b\",\n    \"#333333\", \"#777777\", \"#bbbbbb\", \"#ffffff\"];\n\nfunction background (color?: string | null): string | undefined {\n    if (!color) return;\n    const c = d3.color(color);\n    return c ? c.hex() : undefined;\n}\n\nfunction backgroundGradient (colors: string[]): string {\n    if (!colors.length) return '';\n    const percent = 100 / colors.length;\n    const strings = colors.map((color, i) => `${color} ${i*percent}% ${(i+1)*percent}%`);\n    return `linear-gradient(to right, ${strings.join(',')})`;\n}\n\nfunction colors (specifier: string): string[] {\n    let n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n    while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n    return colors;\n}\n\nfunction foreground (color?: string | null): string | undefined {\n    if (!color) return;\n    const c = d3.color(color);\n    if (!c) return;\n    const rgb = c.rgb();\n    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000 > 125\n        ? '#000000'\n        : '#ffffff';\n}\n\nfunction turboScheme (t: number): string {\n    t = Math.max(0, Math.min(1, t));\n    return \"rgb(\"\n        + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + \", \"\n        + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + \", \"\n        + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))\n        + \")\";\n}\n\nexport {\n    COLOR_SCHEMES,\n    DEFAULT_COLORS,\n    POPPER_MODIFIERS,\n    background,\n    backgroundGradient,\n    foreground\n}\n","import { Icon, Tag } from '@blueprintjs/core';\nimport { AlloyField, AlloySignature, AlloySkolem } from 'alloy-ts';\nimport * as React from 'react';\nimport { SigFieldSkolem } from './tableTypes';\n\nexport interface IAlloyTagProps {\n    fill?: boolean\n    nameFunction?: (item: SigFieldSkolem) => string\n}\n\nexport interface ISignatureTagProps extends IAlloyTagProps {\n    signature: AlloySignature | string\n}\n\nexport interface IFieldTagProps extends IAlloyTagProps {\n    field: AlloyField | string\n}\n\nexport interface ISkolemTagProps extends IAlloyTagProps {\n    skolem: AlloySkolem | string\n}\n\nclass SignatureTag extends React.Component<ISignatureTagProps> {\n\n    static className = 'sig-tag';\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const name = typeof props.signature === 'string'\n            ? props.signature\n            : props.nameFunction\n                ? props.nameFunction(props.signature)\n                : props.signature.name();\n\n        return (\n            <Tag className={SignatureTag.className} fill={props.fill}>\n                { name }\n            </Tag>\n        );\n\n    }\n\n}\n\nclass FieldTag extends React.Component<IFieldTagProps> {\n\n    static className = 'field-tag';\n\n    render (): React.ReactNode {\n\n        const name = typeof this.props.field === 'string'\n            ? this.props.field\n            : this.props.nameFunction\n                ? this.props.nameFunction(this.props.field)\n                : this.props.field.name();\n\n        const tokens = name.split('<:');\n\n        return (\n            <Tag\n                className={FieldTag.className}\n                fill={true}>\n                { FieldTag.FieldTagEls(tokens) }\n            </Tag>\n        )\n\n    }\n\n    public static FieldTagEls (tokens: Array<string>): React.ReactElement {\n\n        if (tokens.length !== 2)\n            return <>{tokens.join('')}</>;\n\n        return (<>\n            {tokens[0]}\n            <Icon\n                icon='symbol-triangle-down'\n                iconSize={14}\n                style={{\n                    padding: '1px',\n                    transform: 'rotate(90deg)'\n                }}/>\n            {tokens[1]}\n        </>);\n\n    }\n\n}\n\nclass SkolemTag extends React.Component<ISkolemTagProps> {\n\n    static className = 'skolem-tag';\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const name = typeof props.skolem === 'string'\n            ? props.skolem\n            : props.nameFunction\n                ? props.nameFunction(props.skolem)\n                : props.skolem.name();\n\n        return (\n            <Tag className={SkolemTag.className} fill={true}>\n                { name }\n            </Tag>\n\n        );\n\n    }\n\n}\n\nexport {\n    SignatureTag,\n    FieldTag,\n    SkolemTag\n}\n","import { AlloyField, AlloySkolem } from 'alloy-ts';\nimport { FieldTag } from '../../../table/TableTags';\nimport { Tree } from '../../graphTypes';\n\nfunction buildFieldTree (fields: AlloyField[], hideEmpty: boolean): Tree | null {\n\n    const flds = hideEmpty\n        ? fields.filter(field => field.tuples().length)\n        : fields;\n\n    return {\n        id: 'Fields',\n        children: flds.map(field => {\n            return {\n                id: field.id(),\n                label: FieldTag.FieldTagEls(field.id().split('<:')),\n                icon: 'flows',\n                children: []\n            }\n        })\n    };\n\n}\n\nfunction buildSkolemTree (skolems: AlloySkolem[]): Tree | null {\n\n    return {\n        id: 'Skolems',\n        children: skolems\n            .map(skolem => {\n                return {\n                    id: skolem.id(),\n                    icon: 'flows',\n                    children: []\n                }\n            })\n    };\n\n}\n\nexport {\n    buildFieldTree,\n    buildSkolemTree\n}\n","import {\n    cloneLabelStyle,\n    cloneLinkStyle,\n    LabelStyle,\n    LinkStyle\n} from '@atdyer/graph-js';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyField, AlloyInstance, AlloySkolem } from 'alloy-ts';\nimport { Map } from 'immutable';\nimport { setInstance } from '../../../../sterling/sterlingSlice';\nimport { Tree } from '../../graphTypes';\nimport { COLOR_SCHEMES } from '../../util';\nimport { buildFieldTree, buildSkolemTree } from './edgeTypes';\n\nexport interface EdgeStylingState {\n    collapsed: Map<string, boolean>\n    collapseEdgeStyle: boolean\n    collapseScheme: boolean\n    fields: AlloyField[]\n    hideEmptyFields: boolean\n    labelStyles: Map<string, LabelStyle>\n    linkStyles: Map<string, LinkStyle>\n    selected: string | null\n    skolems: AlloySkolem[]\n    treeField: Tree | null\n    treeSkolem: Tree | null\n}\n\nconst initialState: EdgeStylingState = {\n    collapsed: Map({\n        Fields: false,\n        Skolems: false\n    }),\n    collapseEdgeStyle: false,\n    collapseScheme: false,\n    fields: [],\n    hideEmptyFields: true,\n    labelStyles: Map(),\n    linkStyles: Map(),\n    selected: null,\n    skolems: [],\n    treeField: null,\n    treeSkolem: null\n};\n\nconst edgeStylingSlice = createSlice({\n    name: 'edgestyles',\n    initialState: initialState,\n    reducers: {\n        clearAll (state) {\n            state.labelStyles = state.labelStyles.map(() => ({}));\n            state.linkStyles = state.linkStyles.map(() => ({}));\n        },\n        clearCurrent (state) {\n            if (state.selected) {\n                state.labelStyles = state.labelStyles.set(state.selected, {});\n                state.linkStyles = state.linkStyles.set(state.selected, {});\n            }\n        },\n        collapseTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, true);\n        },\n        expandTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, false);\n        },\n        selectTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            if (state.linkStyles.has(target)\n                || target === 'Fields'\n                || target === 'Skolems') state.selected = target;\n        },\n        setColorScheme (state, action: PayloadAction<string[]>) {\n            const colors = action.payload;\n            if (!colors.length) return;\n            state.linkStyles = state.linkStyles.withMutations(styles => {\n                [...state.fields, ...state.skolems].forEach((item, index) => {\n                    const id = item.id();\n                    const color = colors[index % colors.length];\n                    const link = state.linkStyles.get(id);\n                    if (link) {\n                        const newlink = cloneLinkStyle(link);\n                        newlink.stroke = color;\n                        styles.set(id, newlink);\n                    }\n                });\n            });\n            state.labelStyles = state.labelStyles.withMutations(styles => {\n                [...state.fields, ...state.skolems].forEach((item, index) => {\n                    const id = item.id();\n                    const color = colors[index % colors.length];\n                    const label = state.labelStyles.get(id);\n                    if (label) {\n                        const newlabel = cloneLabelStyle(label);\n                        newlabel.color = color;\n                        styles.set(id, newlabel);\n                    }\n                });\n            });\n        },\n        setLabelColor (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const label = state.labelStyles.get(state.selected);\n                if (label) {\n                    const color = action.payload;\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    color === null\n                        ? delete newlabel.color\n                        : newlabel.color = color;\n                    state.labelStyles = state.labelStyles.set(state.selected, newlabel);\n                }\n            }\n        },\n        setLabelSize (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const label = state.labelStyles.get(state.selected);\n                if (label) {\n                    const size = parseInt(action.payload);\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    isNaN(size) || size === 0\n                        ? delete newlabel.font\n                        : newlabel.font = `${size}px sans-serif`;\n                    state.labelStyles = state.labelStyles.set(state.selected, newlabel);\n                }\n            }\n        },\n        setStroke (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const link = state.linkStyles.get(state.selected);\n                if (link) {\n                    const color = action.payload;\n                    const newlink = cloneLinkStyle(link)!;\n                    color === null\n                        ? delete newlink.stroke\n                        : newlink.stroke = color;\n                    state.linkStyles = state.linkStyles.set(state.selected, newlink);\n                }\n            }\n        },\n        setStrokeWidth (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const link = state.linkStyles.get(state.selected);\n                if (link) {\n                    const width = parseInt(action.payload);\n                    const newlink = cloneLinkStyle(link)!;\n                    isNaN(width) || width === 0\n                        ? delete newlink.strokeWidth\n                        : newlink.strokeWidth = width;\n                    state.linkStyles = state.linkStyles.set(state.selected, newlink);\n                }\n            }\n        },\n        toggleCollapseEdgeStyle (state) {\n            state.collapseEdgeStyle = !state.collapseEdgeStyle;\n        },\n        toggleCollapseScheme (state) {\n            state.collapseScheme = !state.collapseScheme;\n        },\n        toggleHideEmptyFields (state) {\n            state.hideEmptyFields = !state.hideEmptyFields;\n            state.treeField = buildFieldTree(state.fields as AlloyField[], state.hideEmptyFields);\n        }\n    },\n    extraReducers: builder =>\n        builder.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance) {\n\n                const fields = instance.fields();\n                const skolems = instance.skolems().filter(s => s.arity() > 1);\n                const both = [...fields, ...skolems];\n\n                state.fields = fields;\n                state.skolems = skolems;\n                state.treeField = buildFieldTree(fields, state.hideEmptyFields);\n                state.treeSkolem = buildSkolemTree(skolems);\n\n                // Keep any existing label styles\n                state.labelStyles = Map(both.map(item => {\n                    const id = item.id();\n                    return state.labelStyles.has(id)\n                        ? [id, cloneLabelStyle(state.labelStyles.get(id)!)]\n                        : [id, {}]\n                }));\n\n                // Keep any exiting link styles\n                state.linkStyles = Map(both.map(item => {\n                    const id = item.id();\n                    return state.linkStyles.has(id)\n                        ? [id, cloneLinkStyle(state.linkStyles.get(id)!)]\n                        : [id, {}]\n                }));\n\n                // If they don't already exist, create empty link and label\n                // styles for the two categories we've got (fields and skolems)\n                if (!state.labelStyles.has('Fields'))\n                    state.labelStyles = state.labelStyles.set('Fields', {});\n                if (!state.labelStyles.has('Skolems'))\n                    state.labelStyles = state.labelStyles.set('Skolems', {});\n                if (!state.linkStyles.has('Fields'))\n                    state.linkStyles = state.linkStyles.set('Fields', {});\n                if (!state.linkStyles.has('Skolems'))\n                    state.linkStyles = state.linkStyles.set('Skolems', {});\n\n                // For the Forge folks, let's apply a default color scheme to\n                // anything that isn't already colored (except for the categories).\n                const defaultScheme = COLOR_SCHEMES[2][1]\n                    .concat(COLOR_SCHEMES[1][1])\n                    .concat(COLOR_SCHEMES[0][1]);\n                state.linkStyles = state.linkStyles.withMutations(styles => {\n                    [...state.fields, ...state.skolems].forEach((item, index) => {\n                        const id = item.id();\n                        const link = state.linkStyles.get(id);\n                        if (link && !link.stroke) {\n                            const newlink = cloneLinkStyle(link);\n                            newlink.stroke = defaultScheme[index % defaultScheme.length];\n                            styles.set(id, newlink);\n                        }\n                    });\n                });\n                state.labelStyles = state.labelStyles.withMutations(styles => {\n                    [...state.fields, ...state.skolems].forEach((item, index) => {\n                        const id =item.id();\n                        const label = state.labelStyles.get(id);\n                        if (label && !label.color) {\n                            const newlabel = cloneLabelStyle(label);\n                            newlabel.color = defaultScheme[index % defaultScheme.length];\n                            styles.set(id, newlabel);\n                        }\n                    });\n                });\n\n            } else {\n\n                state.fields = [];\n                state.labelStyles = Map();\n                state.linkStyles = Map();\n                state.selected = null;\n                state.skolems = [];\n                state.treeField = null;\n                state.treeSkolem = null;\n\n            }\n\n        })\n});\n\nexport const {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setColorScheme,\n    setLabelColor,\n    setLabelSize,\n    setStroke,\n    setStrokeWidth,\n    toggleCollapseEdgeStyle,\n    toggleCollapseScheme,\n    toggleHideEmptyFields\n} = edgeStylingSlice.actions;\nexport default edgeStylingSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { LabelPlacement } from '@atdyer/graph-js';\n\nexport interface GraphSettingsState {\n    axesVisible: boolean\n    bundleFactor: number\n    collapseEdgeSettings: boolean\n    collapseGraphSettings: boolean\n    edgeLabelPlacement: LabelPlacement\n    gridVisible: boolean\n}\n\nconst initialState: GraphSettingsState = {\n    axesVisible: true,\n    bundleFactor: 0.15,\n    collapseEdgeSettings: false,\n    collapseGraphSettings: false,\n    gridVisible: true,\n    edgeLabelPlacement: 'spread'\n};\n\nconst graphSettingsSlice = createSlice({\n    name: 'graphsettings',\n    initialState: initialState,\n    reducers: {\n        setBundleFactor (state, action: PayloadAction<number>) {\n            const value = action.payload;\n            if (value >= 0) state.bundleFactor = value;\n        },\n        setLabelPlacement (state, action: PayloadAction<LabelPlacement>) {\n            state.edgeLabelPlacement = action.payload;\n        },\n        toggleAxesVisible (state) { state.axesVisible = !state.axesVisible },\n        toggleCollapseEdgeSettings (state) { state.collapseEdgeSettings = !state.collapseEdgeSettings },\n        toggleCollapseGraphSettings (state) { state.collapseGraphSettings = !state.collapseGraphSettings },\n        toggleGridVisible (state) { state.gridVisible = !state.gridVisible }\n    }\n});\n\nexport const {\n    setBundleFactor,\n    setLabelPlacement,\n    toggleAxesVisible,\n    toggleCollapseEdgeSettings,\n    toggleCollapseGraphSettings,\n    toggleGridVisible\n} = graphSettingsSlice.actions;\nexport default graphSettingsSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport type Alignment = 'UL' | 'UR' | 'DL' | 'DR' | undefined;\nexport type Direction = 'TB' | 'BT' | 'LR' | 'RL';\nexport type Ranker = 'network-simplex' | 'tight-tree' | 'longest-path';\n\nexport interface LayoutState {\n    align: Alignment\n    nodesep: number\n    rankdir: Direction\n    ranker: Ranker\n    ranksep: number\n}\n\nconst initialState: LayoutState = {\n    align: undefined,\n    nodesep: 100,\n    rankdir: 'BT',\n    ranker: 'network-simplex',\n    ranksep: 200\n};\n\nconst layoutSlice = createSlice({\n    name: 'layout',\n    initialState: initialState,\n    reducers: {\n        setAlign (state, action: PayloadAction<Alignment>) {\n            state.align = action.payload;\n        },\n        setNodeSep (state, action: PayloadAction<number>) {\n            state.nodesep = action.payload;\n        },\n        setRankDir (state, action: PayloadAction<Direction>) {\n            state.rankdir = action.payload;\n        },\n        setRanker (state, action: PayloadAction<Ranker>) {\n            state.ranker = action.payload;\n        },\n        setRankSep (state, action: PayloadAction<number>) {\n            state.ranksep = action.payload;\n        }\n    }\n});\n\nexport const {\n    setAlign,\n    setNodeSep,\n    setRankDir,\n    setRanker,\n    setRankSep\n} = layoutSlice.actions;\nexport default layoutSlice.reducer;\n","import { AlloySignature } from 'alloy-ts';\nimport { Tree } from '../../graphTypes';\n\nfunction buildTypeTree (univ: AlloySignature | null, hideEmpty: boolean): Tree | null {\n\n    if (!univ) return null;\n\n    const populate = (sig: AlloySignature): Tree => {\n\n        const subs = hideEmpty\n            ? sig.subTypes().filter(s => s.atoms().length || s.subTypes().length)\n            : sig.subTypes();\n\n        const children = subs.map(populate);\n        return {\n            id: sig.id(),\n            icon: 'group-objects',\n            children\n        };\n\n    };\n\n    return populate(univ);\n\n}\n\nexport {\n    buildTypeTree\n}\n","import {\n    CircleStyle,\n    cloneLabelStyle,\n    cloneShapeStyle,\n    convertToShape,\n    LabelStyle,\n    RectangleStyle,\n    ShapeStyle\n} from '@atdyer/graph-js';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance, AlloySignature } from 'alloy-ts';\nimport { Map } from 'immutable';\nimport { setInstance } from '../../../../sterling/sterlingSlice';\nimport { Tree } from '../../graphTypes';\nimport { COLOR_SCHEMES, foreground } from '../../util';\nimport { buildTypeTree } from './nodeTypes';\n\nexport interface NodeStylingState {\n    collapsed: Map<string, boolean>\n    collapseNodeStyle: boolean\n    hideDisconnected: Map<string, boolean>\n    hideEmptySets: boolean\n    labels: Map<string, LabelStyle>\n    nodeTree: Tree | null\n    selected: string | null\n    shapes: Map<string, ShapeStyle>\n    univ: AlloySignature | null\n}\n\nconst initialState: NodeStylingState = {\n    collapsed: Map(),\n    collapseNodeStyle: false,\n    hideDisconnected: Map(),\n    hideEmptySets: true,\n    labels: Map(),\n    nodeTree: null,\n    selected: null,\n    shapes: Map(),\n    univ: null\n};\n\nconst nodeStylingSlice = createSlice({\n    name: 'nodestyles',\n    initialState: initialState,\n    reducers: {\n        clearAll (state) {\n            state.labels = state.labels.map(() => ({}));\n            state.shapes = state.shapes.map(() => ({}));\n        },\n        clearCurrent (state) {\n            if (state.selected) {\n                state.labels = state.labels.set(state.selected, {});\n                state.shapes = state.shapes.set(state.selected, {});\n            }\n        },\n        collapseTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, true);\n        },\n        expandTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, false);\n        },\n        selectTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            if (state.shapes.has(target)) state.selected = target;\n        },\n        setFill (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape) {\n                    const color = action.payload;\n                    const newshape = shape ? cloneShapeStyle(shape) : {};\n                    color === null\n                        ? delete newshape.fill\n                        : newshape.fill = color;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setHeight (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape && shape.type === 'rectangle') {\n                    const height = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape) as RectangleStyle;\n                    isNaN(height) || height === 0\n                        ? delete newshape.height\n                        : newshape.height = height;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setLabelColor (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const label = state.labels.get(state.selected);\n                if (label) {\n                    const color = action.payload;\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    color === null\n                        ? delete newlabel.color\n                        : newlabel.color = color;\n                    state.labels = state.labels.set(state.selected, newlabel);\n                }\n            }\n        },\n        setLabelSize (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const label = state.labels.get(state.selected);\n                if (label) {\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    const size = parseInt(action.payload);\n                    isNaN(size) || size === 0\n                        ? delete newlabel.font\n                        : newlabel.font = `${size}px sans-serif`;\n                    state.labels = state.labels.set(state.selected, newlabel);\n                }\n            }\n        },\n        setRadius (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape && shape.type === 'circle') {\n                    const radius = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape) as CircleStyle;\n                    isNaN(radius) || radius === 0\n                        ? delete newshape.radius\n                        : newshape.radius = radius;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setShape (state, action: PayloadAction<'circle' | 'rectangle' | null>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                const type = action.payload;\n                if (shape === undefined) return;\n                if ((shape && shape.type !== type) || shape !== type) {\n                    const newshape = convertToShape(shape, type);\n                    state.shapes = state.shapes.set(\n                        state.selected,\n                        newshape\n                    );\n                }\n            }\n        },\n        setStroke (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape) {\n                    const color = action.payload;\n                    const newshape = cloneShapeStyle(shape)!;\n                    color === null\n                        ? delete newshape.stroke\n                        : newshape.stroke = color;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setStrokeWidth (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape) {\n                    const width = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape)!;\n                    isNaN(width) || width === -1\n                        ? delete newshape.strokeWidth\n                        : newshape.strokeWidth = width;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setWidth (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape && shape.type === 'rectangle') {\n                    const width = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape) as RectangleStyle;\n                    isNaN(width) || width === 0\n                        ? delete newshape.width\n                        : newshape.width = width;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        toggleCollapseNodeStyle (state) {\n            state.collapseNodeStyle = !state.collapseNodeStyle;\n        },\n        toggleHideDisconnected (state) {\n            const selected = state.selected;\n            if (selected) {\n                const next = !state.hideDisconnected.get(selected);\n                state.hideDisconnected = state.hideDisconnected.set(selected, next);\n            }\n        },\n        toggleHideEmptySets (state) {\n            state.hideEmptySets = !state.hideEmptySets;\n            state.nodeTree = buildTypeTree(state.univ as AlloySignature, state.hideEmptySets);\n        }\n    },\n    extraReducers: builder =>\n        builder.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance !== null) {\n\n                const signatures = instance.signatures();\n                const univ = signatures.find(sig => sig.id() === 'univ') || null;\n\n                // Build the signature tree using only IDs\n                state.univ = univ;\n                state.nodeTree = buildTypeTree(univ, state.hideEmptySets);\n\n                // For all maps, keeps existing signatures, get rid of ones that\n                // no longer exist, and add new ones\n                state.collapsed = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.collapsed.has(id)\n                        ? [id, !!state.collapsed.get(id)]\n                        : [id, false];\n                }));\n\n                state.hideDisconnected = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.hideDisconnected.has(id)\n                        ? [id, !!state.hideDisconnected.get(id)]\n                        : [id, true];\n                }));\n\n                state.labels = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.labels.has(id)\n                        ? [id, cloneLabelStyle(state.labels.get(id)!)]\n                        : [id, {}];\n                }));\n\n                state.shapes = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.shapes.has(id)\n                        ? [id, cloneShapeStyle(state.shapes.get(id)!)]\n                        : [id, {}];\n                }));\n\n                // For the Forge folks, let's apply a default color scheme to\n                // top level signatures that aren't already colored.\n                const defaultScheme = COLOR_SCHEMES[0][1]\n                    .concat(COLOR_SCHEMES[1][1])\n                    .concat(COLOR_SCHEMES[2][1]);\n                let next = 0;\n                state.shapes = state.shapes.withMutations(styles => {\n                    signatures.forEach(signature => {\n                        const id = signature.id();\n                        const shape = state.shapes.get(id);\n                        if (shape && !shape.fill) {\n                            const newshape = cloneShapeStyle(shape);\n                            newshape.fill = defaultScheme[next++ % defaultScheme.length];\n                            styles.set(id, newshape);\n                        }\n                    });\n                });\n                state.labels = state.labels.withMutations(styles => {\n                    signatures.forEach((signature, index) => {\n                        const id = signature.id();\n                        const shape = state.shapes.get(id);\n                        const label = state.labels.get(id);\n                        if (label && shape && shape.fill) {\n                            const newlabel = cloneLabelStyle(label);\n                            newlabel.color = foreground(shape.fill);\n                            styles.set(id, newlabel);\n                        }\n                    });\n                });\n\n                // If an item was selected, make sure it still exists\n                if (state.selected && !state.shapes.has(state.selected)){\n                    state.selected = null;\n                }\n\n            } else {\n\n                state.collapsed = Map();\n                state.hideDisconnected = Map();\n                state.labels = Map();\n                state.nodeTree = null;\n                state.shapes = Map();\n                state.selected = null;\n                state.univ = null;\n\n            }\n\n        })\n});\n\nexport const {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setFill,\n    setHeight,\n    setLabelColor,\n    setLabelSize,\n    setRadius,\n    setShape,\n    setStroke,\n    setStrokeWidth,\n    setWidth,\n    toggleCollapseNodeStyle,\n    toggleHideDisconnected,\n    toggleHideEmptySets\n} = nodeStylingSlice.actions;\nexport default nodeStylingSlice.reducer;\n","import {\n    AlloyElement,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem, sorting\n} from 'alloy-ts';\n\nexport enum HorizontalAlignment { Left, Center, Right}\nexport enum LayoutDirection { Row, Column}\nexport enum SortDirection { Ascending, Descending}\nexport enum SortMethod { Alphabetical, Builtin, Group, Size}\nexport enum TablesType { All, Signatures, Fields, Skolems, Select}\n\nexport type AlloyNameFn = (item: AlloyElement) => string;\nexport type AlloySortFn = (a: AlloyElement, b: AlloyElement) => number;\nexport type SigFieldSkolem = AlloySignature | AlloyField | AlloySkolem;\nexport type SortType = {\n    method: SortMethod\n    direction: SortDirection\n};\n\nexport const SKOLEM_COLORS = [\n    \"#2965CC\", \"#29A634\", \"#D99E0B\", \"#D13913\", \"#8F398F\",\n    \"#00B3A4\", \"#DB2C6F\", \"#9BBF30\", \"#96622D\", \"#7157D9\"\n];\n\nfunction buildNameFunction (removeThis: boolean): AlloyNameFn {\n    return (item: AlloyElement) => {\n        return removeThis\n            ? item.id().replace(/^this\\//, '')\n            : item.id();\n    }\n}\n\nfunction buildSortFunction (type: SortType, nameFunction: AlloyNameFn): AlloySortFn {\n    if (type.method === SortMethod.Size) {\n        return sorting.sizeSort(type.direction === SortDirection.Ascending);\n    }\n    if (type.method === SortMethod.Alphabetical) {\n        return sorting.alphabeticalSort(nameFunction, type.direction === SortDirection.Ascending);\n    }\n    if (type.method === SortMethod.Group) {\n        return sorting.groupSort();\n    }\n    return () => 0;\n}\n\nfunction getAlignClass (alignment: HorizontalAlignment): string {\n    return alignment === HorizontalAlignment.Left ? 'left' :\n        alignment === HorizontalAlignment.Center ? 'center' :\n            alignment === HorizontalAlignment.Right ? 'right' : '';\n}\n\nfunction getLayoutClass (direction: LayoutDirection): string {\n    return direction === LayoutDirection.Row ? 'row' :\n        direction === LayoutDirection.Column ? 'column' : '';\n}\n\nexport {\n    getAlignClass,\n    buildNameFunction,\n    buildSortFunction,\n    getLayoutClass\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { Graph } from '@atdyer/graph-js';\nimport { createSlice } from '@reduxjs/toolkit';\nimport dataSlice from './drawer-views/data/dataSlice';\nimport edgeStylingSlice from './drawer-views/edge-styling/edgeStylingSlice';\nimport graphSettingsSlice from './drawer-views/graph-settings/graphSettingsSlice';\nimport layoutSlice from './drawer-views/layout/layoutSlice';\nimport nodeStylingSlice from './drawer-views/node-styling/nodeStylingSlice';\n\nexport interface GraphState {\n    graph: Graph\n}\n\nconst initialState: GraphState = {\n    graph: new Graph(),\n};\n\nconst graphSlice = createSlice({\n    name: 'graph',\n    initialState: initialState,\n    reducers: {}\n});\n\nexport default combineReducers({\n    dataSlice,\n    edgeStylingSlice,\n    graphSlice: graphSlice.reducer,\n    graphSettingsSlice,\n    layoutSlice,\n    nodeStylingSlice\n});\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloySource } from 'alloy-ts';\n\nexport interface SourceState {\n    selected: AlloySource | null\n}\n\nconst initialState: SourceState = {\n    selected: null\n};\n\nconst sourceSlice = createSlice({\n    name: 'source',\n    initialState: initialState,\n    reducers: {\n        setSelected (state, action: PayloadAction<AlloySource>) {\n            state.selected = action.payload;\n        }\n    }\n});\n\nexport const {\n    setSelected\n} = sourceSlice.actions;\nexport default sourceSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance, AlloySkolem } from 'alloy-ts';\nimport { setInstance } from '../../sterling/sterlingSlice';\nimport {\n    HorizontalAlignment,\n    LayoutDirection,\n    SigFieldSkolem,\n    SKOLEM_COLORS,\n    SortDirection,\n    SortMethod,\n    SortType,\n    TablesType\n} from './tableTypes';\n\n// Table view state\nexport interface TableState {\n    alignment: HorizontalAlignment\n    collapseData: boolean\n    collapseLayout: boolean\n    collapseTables: boolean\n    data: SigFieldSkolem[]\n    dataSelected: SigFieldSkolem[]\n    highlightSkolems: boolean\n    layoutDirection: LayoutDirection\n    removeBuiltin: boolean\n    removeEmpty: boolean\n    removeThis: boolean\n    primarySort: SortType\n    secondarySort: SortType\n    skolemColors: Map<AlloySkolem, string>\n    tablesType: TablesType\n}\n\n// The initial table view state\nconst initialState: TableState = {\n    alignment: HorizontalAlignment.Left,\n    collapseData: false,\n    collapseLayout: false,\n    collapseTables: false,\n    data: [],\n    dataSelected: [],\n    highlightSkolems: true,\n    layoutDirection: LayoutDirection.Row,\n    removeBuiltin: true,\n    removeEmpty: true,\n    removeThis: true,\n    primarySort: {\n        method: SortMethod.Group,\n        direction: SortDirection.Descending\n    },\n    secondarySort: {\n        method: SortMethod.Size,\n        direction: SortDirection.Descending\n    },\n    skolemColors: new Map(),\n    tablesType: TablesType.All\n};\n\n// The table slice\nconst tableSlice = createSlice({\n    name: 'table',\n    initialState: initialState,\n    reducers: {\n        clearSelectedData (state) { state.dataSelected = [] },\n        deselectData (state, action: PayloadAction<SigFieldSkolem>) {\n            const index = state.dataSelected.indexOf(action.payload);\n            if (index !== -1) {\n                state.dataSelected.splice(index, 1);\n            }\n            state.tablesType = TablesType.Select;\n        },\n        selectData (state, action: PayloadAction<SigFieldSkolem>) {\n            if (!state.dataSelected.includes(action.payload)) {\n                state.dataSelected.push(action.payload);\n            }\n            state.tablesType = TablesType.Select;\n        },\n        setAlignment (state, action: PayloadAction<HorizontalAlignment>) { state.alignment = action.payload },\n        setLayoutDirection (state, action: PayloadAction<LayoutDirection>) { state.layoutDirection = action.payload },\n        setSort (state, action: PayloadAction<SortType>) {\n            if (state.primarySort.method !== action.payload.method) {\n                state.secondarySort = state.primarySort;\n            }\n            state.primarySort = action.payload;\n        },\n        setTableTypes (state, action: PayloadAction<TablesType>) { state.tablesType = action.payload },\n        toggleCollapseData (state) { state.collapseData = !state.collapseData },\n        toggleCollapseLayout (state) { state.collapseLayout = !state.collapseLayout },\n        toggleCollapseTables (state) { state.collapseTables = !state.collapseTables },\n        toggleHighlightSkolems (state) {\n            state.highlightSkolems = !state.highlightSkolems;\n            if (state.highlightSkolems && state.tablesType === TablesType.Skolems) {\n                state.tablesType = TablesType.All;\n            }\n        },\n        toggleRemoveBuiltin (state) { state.removeBuiltin = !state.removeBuiltin },\n        toggleRemoveEmpty (state) { state.removeEmpty = !state.removeEmpty },\n        toggleRemoveThis (state) { state.removeThis = !state.removeThis }\n    },\n    extraReducers: builder =>\n        builder.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance) {\n\n                const skolems = instance.skolems();\n\n                state.data = [\n                    ...instance.signatures(),\n                    ...instance.fields(),\n                    ...skolems\n                ];\n\n                state.skolemColors = new Map(skolems.map((skolem, i) => {\n                    return [skolem, SKOLEM_COLORS[i % skolems.length]];\n                }));\n\n                state.dataSelected = state.dataSelected.filter(item => {\n                    return state.data.find(curr => curr.id() === item.id()) !== undefined;\n                })\n\n            }\n\n        })\n});\n\nexport const {\n    clearSelectedData,\n    deselectData,\n    selectData,\n    setAlignment,\n    setLayoutDirection,\n    setSort,\n    setTableTypes,\n    toggleCollapseData,\n    toggleCollapseLayout,\n    toggleCollapseTables,\n    toggleHighlightSkolems,\n    toggleRemoveBuiltin,\n    toggleRemoveEmpty,\n    toggleRemoveThis\n} = tableSlice.actions;\n\nexport default tableSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport graphSlice from './features/graph/graphSlice';\nimport sourceSlice from './features/source/sourceSlice';\nimport sterlingSlice from './sterling/sterlingSlice';\nimport tableSlice from './features/table/tableSlice';\n\n\nexport const sterlingApp = combineReducers({\n    graphSlice,\n    sourceSlice,\n    sterlingSlice,\n    tableSlice\n});\n\nexport type RootState = ReturnType<typeof sterlingApp>;\n","import { SterlingConnection } from '../sterling/SterlingConnection';\nimport { EventDispatcher } from '../util/EventDispatcher';\n\nexport interface Expression {\n    id: number\n    expression: string\n    error: boolean\n    result: null | boolean | number | string\n}\n\nclass Evaluator extends EventDispatcher {\n\n    private _connection: SterlingConnection;\n    private _expressions: Expression[];\n    private _pending: Expression | null;\n\n    protected static _nextid: number = 0;\n\n    constructor (connection: SterlingConnection) {\n\n        super();\n\n        this._connection = connection;\n        this._expressions = [];\n        this._pending = null;\n\n        connection.addEventListener('eval', event => {\n            this._parse(event.data);\n        });\n\n    }\n\n    evaluate (expression: string): void {\n\n        this._request({\n            id: Evaluator._nextid++,\n            error: false,\n            expression: expression,\n            result: null\n        });\n\n    }\n\n    expressions (): Expression[] {\n\n        return this._expressions;\n\n    }\n\n    private _parse (response: string): void {\n\n        const expression = this._pending;\n        const tokens = response.match(/(-?\\d+):(.*)/);\n\n        if (tokens === null) return;\n\n        const id = parseInt(tokens[1]);\n\n        if (expression && expression.id === id) {\n\n            const result = tokens[2].trim();\n\n            if (result.slice(0, 4) === 'ERR:') {\n                expression.result = result.slice(4);\n                expression.error = true;\n            }\n            else {\n                expression.result = result;\n                expression.error = false;\n            }\n\n            this._expressions.push(expression);\n            this._setPending(null);\n\n        }\n\n    }\n\n    private _request (expression: Expression): void {\n\n        this._setPending(expression);\n\n        const submitted = this._connection.requestEvaluateExpression(\n            expression.id,\n            expression.expression\n        );\n\n        if (!submitted) {\n\n            this._parse(`${expression.id}:ERR:Error: Not Connected`);\n\n        }\n\n    }\n\n    private _setPending (expression: Expression | null): void {\n\n        this._pending = expression;\n\n        if (expression !== null) {\n\n            this.dispatchEvent({\n                type: 'pending'\n            });\n\n        } else {\n            \n            this.dispatchEvent({\n                type: 'ready'\n            });\n            \n        }\n\n    }\n\n}\n\nexport {\n    Evaluator\n}\n","import { Callout, Icon, Intent } from '@blueprintjs/core';\nimport React from 'react';\nimport { Evaluator, Expression } from './Evaluator';\n\nexport interface IEvaluatorProps {\n    evaluator: Evaluator\n}\n\ninterface IEvaluatorState {\n    count: number\n    expressions: Expression[]\n    history: number\n}\n\nclass EvaluatorView extends React.Component<IEvaluatorProps, IEvaluatorState> {\n\n    private readonly _botRef: React.RefObject<HTMLDivElement>;\n    private readonly _textRef: React.RefObject<HTMLTextAreaElement>;\n\n    constructor (props: IEvaluatorProps) {\n\n        super(props);\n\n        const evaluator = props.evaluator;\n        evaluator.addEventListener('pending', this._onPending);\n        evaluator.addEventListener('ready', this._onReady);\n\n        this._botRef = React.createRef();\n        this._textRef = React.createRef();\n\n        const expressions = props.evaluator.expressions();\n        this.state = {\n            count: expressions.length,\n            expressions: expressions,\n            history: expressions.length\n        }\n\n    }\n\n    componentDidMount(): void {\n\n        this._scrollDown();\n\n    }\n\n    componentDidUpdate(prevProps: Readonly<IEvaluatorProps>, prevState: Readonly<IEvaluatorState>): void {\n\n        if (prevState.count !== this.state.count) {\n\n            this._scrollDown();\n\n        }\n\n    }\n\n    componentWillUnmount(): void {\n\n        const evaluator = this.props.evaluator;\n        evaluator.removeEventListener('pending', this._onPending);\n        evaluator.removeEventListener('ready', this._onReady);\n\n    }\n\n    render (): React.ReactNode {\n\n        const state = this.state;\n        const SuccessIcon = <Icon icon={'circle'} iconSize={12}/>;\n        const ErrorIcon = <Icon icon={'cross'} iconSize={12}/>;\n\n        state.history < state.count\n            ? this._setText(state.expressions[state.history].expression)\n            : this._setText('');\n\n        return (\n            <div className={'evaluator'}>\n                <div className={'evaluator-output'}>\n                    {\n                        this.state.expressions.map(expression => (\n                            <Callout\n                                key={expression.id}\n                                icon={expression.error ? ErrorIcon : SuccessIcon}\n                                title={expression.expression}\n                                intent={expression.error ? Intent.DANGER : Intent.NONE}\n                            >\n                                {expression.result}\n                            </Callout>\n                        ))\n                    }\n                    <div ref={this._botRef}/>\n                </div>\n                <div className={'evaluator-input'}>\n                    <textarea\n                        autoComplete={'off'}\n                        placeholder={'Enter an expression...'}\n                        spellCheck={'false'}\n                        onKeyDown={this._onKeyDown}\n                        ref={this._textRef}\n                    />\n                </div>\n            </div>\n        );\n\n    }\n\n    private _onDown = (): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            const pos = textarea.selectionStart;\n            const len = textarea.value.length;\n\n            if (pos === len) {\n\n                const history = this.state.history < this.state.count\n                    ? this.state.history + 1\n                    : this.state.count;\n\n                this.setState({\n                    history: history\n                });\n\n            }\n        }\n\n    };\n\n    private _onEnter = (): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            const value = textarea.value;\n            textarea.value = '';\n\n            if (value.length)\n                this.props.evaluator.evaluate(value);\n\n        }\n\n    };\n\n    private _onKeyDown = (event: React.KeyboardEvent): void => {\n        const key = event.key;\n        switch (key) {\n            case 'Enter':\n                event.preventDefault();\n                this._onEnter();\n                break;\n            case 'ArrowUp':\n                this._onUp();\n                break;\n            case 'ArrowDown':\n                this._onDown();\n                break;\n            default:\n                break;\n        }\n    };\n\n    private _onPending = (): void => {\n\n        this._setActive(false);\n\n    };\n\n    private _onReady = (): void => {\n\n        this._setActive(true);\n        const expressions = this.props.evaluator.expressions();\n        this.setState({\n            count: expressions.length,\n            expressions: expressions,\n            history: expressions.length\n        });\n\n    };\n\n    private _onUp = (): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            if (textarea.selectionStart === 0) {\n\n                const history = this.state.history > 0\n                    ? this.state.history - 1\n                    : 0;\n\n                this.setState({\n                    history: history\n                });\n\n            }\n\n        }\n\n    };\n\n    private _scrollDown = (): void => {\n\n        const bottom = this._botRef.current;\n\n        if (bottom) {\n\n            bottom.scrollIntoView();\n\n        }\n\n    };\n\n    private _setActive = (active: boolean): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            textarea.readOnly = !active;\n\n        }\n\n    };\n\n    private _setText = (text: string): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            textarea.value = text;\n\n        }\n\n    };\n\n}\n\nexport default EvaluatorView;\n","import { Button, Collapse } from '@blueprintjs/core';\nimport React, { CSSProperties } from 'react';\n\ninterface ISectionProps {\n    collapsed?: boolean\n    onToggle?: () => void\n    style?: CSSProperties\n    title?: string\n}\n\nconst Section: React.FunctionComponent<ISectionProps> = props => {\n\n    const collapseIcon = props.collapsed ? 'expand-all' : 'collapse-all';\n\n    return (\n        <div\n            className={`section ${props.collapsed ? 'collapsed' : ''}`}\n            style={props.style}>\n            {\n                !!props.title &&\n                <div className='header'>\n                    <div className='title'>\n                        {props.title.toUpperCase()}\n                    </div>\n                    {\n                        props.onToggle && <Button\n                            icon={collapseIcon}\n                            minimal={true}\n                            onClick={props.onToggle}/>\n                    }\n                </div>\n            }\n            <Collapse\n                isOpen={!props.collapsed}\n                keepChildrenMounted={true}>\n                <div className='body'>\n                    {props.children}\n                </div>\n            </Collapse>\n        </div>\n    );\n};\n\nclass SterlingDrawer extends React.Component {\n\n    static Section = Section;\n\n    render (): React.ReactNode {\n\n        return (\n            <div className={'drawer'}>\n                { this.props.children }\n            </div>\n        );\n\n    }\n\n}\n\nexport default SterlingDrawer;\n","import { Button, ButtonGroup, Tooltip } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport { backgroundGradient, COLOR_SCHEMES } from '../../util';\nimport { setColorScheme, toggleCollapseScheme } from './edgeStylingSlice';\n\nconst mapState = (state: RootState) => ({\n    collapse: state.graphSlice.edgeStylingSlice.collapseScheme,\n    labelStyles: state.graphSlice.edgeStylingSlice.labelStyles,\n    linkStyles: state.graphSlice.edgeStylingSlice.linkStyles\n});\n\nconst mapDispatch = {\n    setColorScheme,\n    toggleCollapseScheme\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype QuickEdgeStylingProps = ConnectedProps<typeof connector>;\n\nconst QuickEdgeStyling: React.FunctionComponent<QuickEdgeStylingProps> = props => {\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapse}\n            onToggle={props.toggleCollapseScheme}\n            title={'Quick Color Scheme'}>\n            <ButtonGroup minimal={true} style={{\n                flexWrap: 'wrap',\n                maxHeight: '15px',\n                overflow: 'hidden'\n            }}>\n                {\n                    COLOR_SCHEMES.map(([name, scheme]) => (\n                        <Tooltip content={name} key={name}>\n                            <Button minimal={true} style={{\n                                background: backgroundGradient(scheme.slice(0, 6)),\n                                margin: '0 5px',\n                                minWidth: '40px',\n                                minHeight: '15px'\n                            }} onClick={() => props.setColorScheme(scheme)}/>\n                        </Tooltip>\n                    ))\n                }\n            </ButtonGroup>\n        </SterlingDrawer.Section>\n    );\n};\n\nexport default connector(QuickEdgeStyling);\n","import { LabelPlacement } from '@atdyer/graph-js';\nimport { FormGroup, HTMLSelect, NumericInput } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport {\n    setBundleFactor,\n    setLabelPlacement,\n    toggleCollapseEdgeSettings\n} from './graphSettingsSlice';\n\nconst LABEL_PLACEMENT_OPTIONS = [\n    { value: 'center', label: 'Center' },\n    { value: 'join', label: 'Join' },\n    { value: 'spread', label: 'Spread' }\n];\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.graphSettingsSlice\n});\n\nconst mapDispatch = {\n    setBundleFactor,\n    setLabelPlacement,\n    toggleCollapseEdgeSettings\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype EdgeSettingsProps = ConnectedProps<typeof connector>;\n\nconst EdgeSettings: React.FunctionComponent<EdgeSettingsProps> = props => (\n    <SterlingDrawer.Section\n        collapsed={props.collapseEdgeSettings}\n        onToggle={props.toggleCollapseEdgeSettings}\n        title={'Edge Settings'}>\n        <FormGroup inline={true} label={'Bundle Factor'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                fill={false}\n                value={props.bundleFactor}\n                min={0}\n                minorStepSize={0.001}\n                stepSize={0.01}\n                majorStepSize={0.1}\n                onValueChange={value => props.setBundleFactor(value)}/>\n        </FormGroup>\n        <FormGroup inline={true} label={'Label Placement'}>\n            <HTMLSelect\n                minimal={true}\n                options={LABEL_PLACEMENT_OPTIONS}\n                value={props.edgeLabelPlacement}\n                onChange={event => {\n                    props.setLabelPlacement(event.target.value as LabelPlacement)\n                }}/>\n        </FormGroup>\n    </SterlingDrawer.Section>\n);\n\nexport default connector(EdgeSettings);\n","import { DagreLayout } from '@atdyer/graph-js';\nimport { Button, FormGroup, HTMLSelect, NumericInput } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport {\n    Alignment, Direction, Ranker,\n    setAlign,\n    setNodeSep,\n    setRankDir,\n    setRanker,\n    setRankSep\n} from './layoutSlice';\n\nconst ALIGN_OPTIONS = [\n    { value: 'undefined', label: '---' },\n    { value: 'UL', label: 'Bottom Left'},\n    { value: 'UR', label: 'Bottom Right'},\n    { value: 'DL', label: 'Top Left' },\n    { value: 'DR', label: 'Top Right' }\n];\n\nconst DIRECTION_OPTIONS = [\n    { value: 'TB', label: 'Bottom to Top' },\n    { value: 'BT', label: 'Top to Bottom' },\n    { value: 'LR', label: 'Left to Right' },\n    { value: 'RL', label: 'Right to Left' }\n];\n\nconst RANKER_OPTIONS = [\n    { value: 'network-simplex', label: 'Network Simplex' },\n    { value: 'tight-tree', label: 'Tight Tree' },\n    { value: 'longest-path', label: 'Longest Path' }\n];\n\nconst mapState = (state: RootState) => ({\n    graph: state.graphSlice.graphSlice.graph,\n    options: state.graphSlice.layoutSlice\n});\n\nconst mapDispatch = {\n    setAlign,\n    setNodeSep,\n    setRankDir,\n    setRanker,\n    setRankSep\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype LayoutProps = ConnectedProps<typeof connector>;\n\nconst Layout: React.FunctionComponent<LayoutProps> = props => {\n\n    const options = Object.assign({}, props.options);\n\n    return (\n        <SterlingDrawer.Section\n            title={'Layout'}>\n            <FormGroup inline={true} label={'Align'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={ALIGN_OPTIONS}\n                    value={options.align === undefined ? 'undefined' : options.align}\n                    onChange={event => {\n                        const value = event.target.value === 'undefined' ? undefined : event.target.value;\n                        props.setAlign(value as Alignment)\n                    }}/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Node Separation'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    value={options.nodesep}\n                    onValueChange={value => props.setNodeSep(value)}/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Ranking Method'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={RANKER_OPTIONS}\n                    value={options.ranker}\n                    onChange={event =>\n                        props.setRanker(event.target.value as Ranker)\n                    }/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Rank Direction'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={DIRECTION_OPTIONS}\n                    value={options.rankdir}\n                    onChange={event =>\n                        props.setRankDir(event.target.value as Direction)\n                    }/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Rank Separation'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    value={options.ranksep}\n                    onValueChange={value => props.setRankSep(value)}/>\n            </FormGroup>\n            <Button\n                minimal={true}\n                text={'Apply Layout'}\n                onClick={() => {\n                    if (props.graph) {\n                        const dagre = new DagreLayout();\n                        dagre.apply(props.graph, options);\n                        props.graph.update();\n                    }\n                }}/>\n        </SterlingDrawer.Section>\n    );\n\n};\n\nexport default connector(Layout);\n","import {\n    Button,\n    ControlGroup,\n    HTMLSelect,\n    Popover,\n    Position,\n    Text\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport { POPPER_MODIFIERS } from '../../util';\nimport {\n    addProjection,\n    nextAtom,\n    previousAtom,\n    removeProjection,\n    setProjection,\n    toggleCollapseProjections\n} from '../data/dataSlice';\n\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.dataSlice\n});\n\nconst mapDispatch = {\n    addProjection,\n    nextAtom,\n    previousAtom,\n    removeProjection,\n    setProjection,\n    toggleCollapseProjections\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype ProjectionsProps = ConnectedProps<typeof connector>;\n\nconst Projections: React.FunctionComponent<ProjectionsProps> = props => {\n\n    const projections = props.projections.toArray();\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapseProjections}\n            onToggle={props.toggleCollapseProjections}\n            title={'Projections'}>\n            <div className={'projections'}>\n                {\n                    projections.map(projection => {\n                        const sig = projection[0];\n                        const atom = projection[1];\n                        const atoms = props.atoms.get(sig) || [];\n                        return <React.Fragment key={sig}>\n                            <Text ellipsize={true}>{ sig }</Text>\n                            <HTMLSelect\n                                minimal={true}\n                                onChange={event => {\n                                    props.setProjection({\n                                        sig: sig,\n                                        atom: event.target.value\n                                    })\n                                }}\n                                options={atoms}\n                                value={atom}/>\n                            <div className={'buttons'}>\n                                <Button\n                                    icon={'chevron-left'}\n                                    minimal={true}\n                                    onClick={() => props.previousAtom(sig)}/>\n                                <Button\n                                    icon={'cross'}\n                                    minimal={true}\n                                    onClick={() => props.removeProjection(sig)}/>\n                                <Button\n                                    icon={'chevron-right'}\n                                    minimal={true}\n                                    onClick={() => props.nextAtom(sig)}/>\n                            </div>\n                        </React.Fragment>\n                    })\n                }\n            </div>\n            {\n                props.unprojected.size > 0 && (\n                    <Popover\n                        className={'centered'}\n                        hasBackdrop={true}\n                        modifiers={POPPER_MODIFIERS}\n                        position={Position.BOTTOM}\n                        usePortal={true}\n                        wrapperTagName={'div'}>\n                        <Button\n                            icon={'add'}\n                            minimal={true}\n                            text={'Add Projection'}/>\n                        <ControlGroup vertical={true}>\n                            {\n                                props.unprojected.map(sig => (\n                                    <Button\n                                        key={sig}\n                                        minimal={true}\n                                        onClick={() => props.addProjection(sig)}\n                                        text={sig}/>\n                                ))\n                            }\n                        </ControlGroup>\n                    </Popover>\n                )\n            }\n        </SterlingDrawer.Section>\n    );\n\n};\n\nexport default connector(Projections);\n","import {\n    Button,\n    FormGroup,\n    NumericInput,\n    Popover,\n    Position\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {\n    background,\n    POPPER_MODIFIERS,\n    DEFAULT_COLORS,\n    foreground\n} from '../util';\n\ninterface ILabelStyle {\n    color?: string\n    size?: number\n    onChangeColor: (color: string | null) => void\n    onChangeSize: (size: string) => void\n}\n\nconst LabelStyler: React.FunctionComponent<ILabelStyle> = props => {\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Label Size (px)'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    min={0}\n                    minorStepSize={null}\n                    onValueChange={(_, strVal) => props.onChangeSize(strVal)}\n                    placeholder={'Inheret'}\n                    value={props.size}/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Label Color'}>\n                {\n                    props.color &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeColor(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(props.color),\n                            color: foreground(props.color)\n                        }}\n                        text={props.color || 'Inheret'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(props.color)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeColor(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n        </>\n    );\n\n};\n\nexport default LabelStyler;\n","import { IconName, ITreeNode, MaybeElement } from '@blueprintjs/core';\nimport { Map } from 'immutable';\n\nexport type Tree = {\n    id: string\n    icon?: IconName | MaybeElement\n    label?: string | JSX.Element\n    children: Tree[]\n}\n\nfunction mapTreeToNodes (tree: Tree | null, collapsed: Map<string, boolean>, selected: string | null): ITreeNode {\n\n    if (tree === null) return {\n        id: 'error',\n        label: 'No Instance',\n        icon: 'error'\n    };\n\n    const populate = (t: Tree): ITreeNode => {\n        const childNodes = t.children.map(populate);\n        return {\n            id: t.id,\n            label: t.label ? t.label : t.id,\n            icon: t.icon,\n            isExpanded: !collapsed.get(t.id),\n            isSelected: t.id === selected,\n            hasCaret: !!childNodes.length,\n            childNodes\n        }\n    };\n\n    return populate(tree);\n\n}\n\nexport {\n    mapTreeToNodes\n}\n","import { Button, FormGroup, NumericInput, Popover } from '@blueprintjs/core';\nimport { Position } from '@blueprintjs/core/lib/esm/common/position';\nimport React from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {\n    background,\n    DEFAULT_COLORS,\n    foreground,\n    POPPER_MODIFIERS\n} from '../../../util';\n\ninterface ILinkStyle {\n    stroke?: string\n    strokeWidth?: number\n    onChangeStroke: (color: string | null) => void\n    onChangeStrokeWidth: (width: string) => void\n}\n\nconst LinkStyler: React.FunctionComponent<ILinkStyle> = props => {\n\n    const stroke = props.stroke;\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Stroke'}>\n                {\n                    props.stroke &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeStroke(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(stroke),\n                            color: foreground(stroke)\n                        }}\n                        text={stroke || 'Inheret'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(stroke)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeStroke(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n            <FormGroup inline={true} label={'Stroke Width'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    min={0}\n                    onValueChange={(_, strVal) => props.onChangeStrokeWidth(strVal)}\n                    placeholder={'Inheret'}\n                    value={props.strokeWidth}/>\n            </FormGroup>\n        </>\n    );\n\n};\n\nexport default LinkStyler;\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    Divider, FormGroup,\n    NonIdealState, Switch,\n    Tooltip,\n    Tree\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport LabelStyler from '../../drawer-components/LabelStyler';\nimport { mapTreeToNodes } from '../../graphTypes';\nimport LinkStyler from './components/LinkStyler';\nimport {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setLabelColor,\n    setLabelSize,\n    setStroke,\n    setStrokeWidth,\n    toggleCollapseEdgeStyle,\n    toggleHideEmptyFields\n} from './edgeStylingSlice';\nimport { toggleAsAttribute } from '../data/dataSlice';\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.edgeStylingSlice,\n    asAttribute: state.graphSlice.dataSlice.asAttribute\n});\n\nconst mapDispatch = {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setLabelColor,\n    setLabelSize,\n    setStroke,\n    setStrokeWidth,\n    toggleAsAttribute,\n    toggleCollapseEdgeStyle,\n    toggleHideEmptyFields\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype EdgeStylingProps = ConnectedProps<typeof connector>;\n\nconst EdgeStyling: React.FunctionComponent<EdgeStylingProps> = props => {\n\n    const selected = props.selected;\n\n    // Link properties\n    const link = selected ? props.linkStyles.get(selected) || {} : {};\n    const attr = selected ? props.asAttribute.get(selected) : false;\n    const stroke = link ? link.stroke : undefined;\n    const strokeWidth = link ? link.strokeWidth : undefined;\n\n    // Label properties\n    const label = selected ? props.labelStyles.get(selected) || {} : {};\n    const labelColor = label ? label.color : undefined;\n    const font = label ? label.font : undefined;\n    const match = font ? font.match(/(\\d*)px/) : [];\n    const labelSize = match\n        ? match.length > 1\n            ? parseInt(match[1])\n            : undefined\n        : undefined;\n\n    // Tree properties\n    const fieldTree = mapTreeToNodes(props.treeField, props.collapsed, selected);\n    const skolemTree = mapTreeToNodes(props.treeSkolem, props.collapsed, selected);\n    const isempty = fieldTree.id === 'error' && skolemTree.id === 'error';\n    const hasskolem = skolemTree.childNodes && skolemTree.childNodes.length;\n    const trees = (isempty || !hasskolem) ? [fieldTree] : [fieldTree, skolemTree];\n    const hideFld = props.hideEmptyFields;\n    fieldTree.secondaryLabel = (\n        <Tooltip\n            content={hideFld ? 'Show Empty Fields' : 'Hide Empty Fields'}>\n            <Button\n                icon={hideFld ? 'eye-off' : 'eye-open'}\n                minimal={true}\n                onClick={props.toggleHideEmptyFields}/>\n        </Tooltip>\n    );\n\n\n    return (\n        <>\n            <SterlingDrawer.Section\n                collapsed={props.collapseEdgeStyle}\n                onToggle={props.toggleCollapseEdgeStyle}\n                title={'Edge Styling'}>\n                <Tree\n                    contents={trees}\n                    onNodeClick={node => props.selectTreeNode(node.id.toString())}\n                    onNodeCollapse={node => props.collapseTreeNode(node.id.toString())}\n                    onNodeExpand={node => props.expandTreeNode(node.id.toString())}/>\n                <Divider/>\n                {\n                    selected\n                        ? (\n                            <>\n                                <FormGroup>\n                                    <Switch\n                                        alignIndicator={Alignment.RIGHT}\n                                        checked={attr}\n                                        label={'Show as Attribute'}\n                                        onChange={() => props.toggleAsAttribute(selected)}/>\n                                </FormGroup>\n                                <LinkStyler\n                                    stroke={stroke}\n                                    strokeWidth={strokeWidth}\n                                    onChangeStroke={props.setStroke}\n                                    onChangeStrokeWidth={props.setStrokeWidth}/>\n                                <LabelStyler\n                                    color={labelColor}\n                                    size={labelSize}\n                                    onChangeColor={props.setLabelColor}\n                                    onChangeSize={props.setLabelSize}/>\n                                <ButtonGroup\n                                    fill={true}\n                                    minimal={true}>\n                                    <Button\n                                        icon={'clean'}\n                                        onClick={props.clearCurrent}\n                                        text={'Clear Selected'}/>\n                                    <Button\n                                        icon={'clean'}\n                                        onClick={props.clearAll}\n                                        text={'Clear All'}/>\n                                </ButtonGroup>\n                            </>\n                        )\n                        : (\n                            <NonIdealState\n                                title={'Edge Styling'}\n                                description={'Select a field or skolem from the tree'}\n                                icon={'style'}/>\n\n                        )\n                }\n            </SterlingDrawer.Section>\n        </>\n    )\n};\n\nexport default connector(EdgeStyling);\n","import { Alignment, Switch } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport {\n    toggleAxesVisible,\n    toggleCollapseGraphSettings,\n    toggleGridVisible\n} from './graphSettingsSlice';\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.graphSettingsSlice\n});\n\nconst mapDispatch = {\n    toggleAxesVisible,\n    toggleCollapseGraphSettings,\n    toggleGridVisible\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype GraphSettingsProps = ConnectedProps<typeof connector>;\n\nconst GraphSettings: React.FunctionComponent<GraphSettingsProps> = props => (\n    <SterlingDrawer.Section\n        collapsed={props.collapseGraphSettings}\n        onToggle={props.toggleCollapseGraphSettings}\n        title={'Graph Settings'}>\n        <Switch\n            alignIndicator={Alignment.RIGHT}\n            checked={props.axesVisible}\n            label={'Display Axes'}\n            onChange={props.toggleAxesVisible}/>\n        <Switch\n            alignIndicator={Alignment.RIGHT}\n            checked={props.gridVisible}\n            label={'Display Grid'}\n            onChange={props.toggleGridVisible}/>\n    </SterlingDrawer.Section>\n);\n\nexport default connector(GraphSettings);\n","import {\n    CircleLayout,\n    DagreLayout,\n    GridLayout,\n    RowLayout\n} from '@atdyer/graph-js';\nimport { Button, ButtonGroup, Tooltip } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\n\n// Map redux state to layout settings props\nconst mapState = (state: RootState) => ({\n    graph: state.graphSlice.graphSlice.graph,\n    instance: state.sterlingSlice.instance\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype LayoutProps = ConnectedProps<typeof connector>;\n\n// The layout and projections component\nconst QuickLayout: React.FunctionComponent<LayoutProps> = props => {\n    return (\n        <SterlingDrawer.Section title={'Quick Layout'}>\n            <ButtonGroup minimal={true}>\n                <Tooltip content={'Circle Layout'}>\n                    <Button icon={'layout-circle'} onClick={() => {\n                        if (props.graph) {\n                            const circle = new CircleLayout();\n                            circle.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n                <Tooltip content={'Grid Layout'}>\n                    <Button icon={'layout-grid'} onClick={() => {\n                        if (props.graph) {\n                            const grid = new GridLayout();\n                            grid.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n                <Tooltip content={'Grouped Row Layout'}>\n                    <Button icon={'layout-linear'} onClick={() => {\n                        if (props.graph && props.instance) {\n                            const row = new RowLayout();\n                            const univ = props.instance.signatures().find(sig => sig.id() === 'univ');\n                            if (univ) {\n                                row.groups(univ.subTypes().map(sig => sig.atoms(true).map(atom => atom.name())))\n                            }\n                            row.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n                <Tooltip content={'Layered Layout'}>\n                    <Button icon={'layout-hierarchy'} onClick={() => {\n                        if (props.graph) {\n                            const dagre = new DagreLayout();\n                            dagre.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n            </ButtonGroup>\n        </SterlingDrawer.Section>\n    );\n};\n\nexport default connector(QuickLayout);\n","import { CircleStyle, RectangleStyle, ShapeStyle } from '@atdyer/graph-js';\nimport { FormGroup, HTMLSelect, NumericInput } from '@blueprintjs/core';\nimport React from 'react';\n\ninterface IShapeSelector {\n    shape: ShapeStyle\n    onSetHeight: (height: string) => void\n    onSetRadius: (radius: string) => void\n    onSetShape: (shape: 'circle' | 'rectangle' | null) => void\n    onSetWidth: (width: string) => void\n}\n\nconst ShapeSelector: React.FunctionComponent<IShapeSelector> = props => {\n\n    const shape = props.shape;\n    const type = shape ? shape.type || 'inheret' : 'inheret';\n\n    const options = [\n        { value: 'inheret', label: 'Inheret' },\n        { value: 'circle', label: 'Circle' },\n        { value: 'rectangle', label: 'Rectangle' }\n    ];\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Shape'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={options}\n                    value={type}\n                    onChange={event => {\n                        let value = event.target.value;\n                        props.onSetShape(valueToShape(value));\n                    }}\n                />\n            </FormGroup>\n            {\n                type === 'circle' ?\n                    <CircleProps\n                        style={shape as CircleStyle}\n                        onSetRadius={props.onSetRadius}/> :\n                type === 'rectangle' ?\n                    <RectangleProps\n                        style={shape as RectangleStyle}\n                        onSetWidth={props.onSetWidth}\n                        onSetHeight={props.onSetHeight}/> :\n                null\n            }\n        </>\n    )\n};\n\ninterface ICircleProps {\n    style: CircleStyle\n    onSetRadius: (radius: string) => void\n}\nconst CircleProps: React.FunctionComponent<ICircleProps> = props => {\n    const radius = props.style.radius;\n    return (\n        <FormGroup inline={true} label={'Radius'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                fill={false}\n                min={0}\n                onValueChange={(_, strVal) => props.onSetRadius(strVal)}\n                placeholder={'Inheret'}\n                value={radius || undefined}/>\n        </FormGroup>\n    )\n};\n\ninterface IRectangleProps {\n    style: RectangleStyle,\n    onSetHeight: (height: string) => void\n    onSetWidth: (width: string) => void\n}\nconst RectangleProps: React.FunctionComponent<IRectangleProps> = props => {\n    const width = props.style.width;\n    const height = props.style.height;\n    return <>\n        <FormGroup inline={true} label={'Width'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                fill={false}\n                min={0}\n                onValueChange={(_, strVal) => props.onSetWidth(strVal)}\n                placeholder={'Inheret'}\n                value={width || undefined}\n                />\n        </FormGroup>\n        <FormGroup inline={true} label={'Height'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                min={0}\n                onValueChange={(_, strVal) => props.onSetHeight(strVal)}\n                placeholder={'Inheret'}\n                value={height || undefined}\n            />\n        </FormGroup>\n    </>;\n};\n\nfunction valueToShape (value: string): (null | 'circle' | 'rectangle') {\n    if (value === 'circle' || value === 'rectangle') return value;\n    return null;\n}\n\nexport default ShapeSelector;\n","import {\n    Button,\n    FormGroup,\n    NumericInput,\n    Popover,\n    Position\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {\n    background,\n    foreground,\n    POPPER_MODIFIERS,\n    DEFAULT_COLORS\n} from '../../../util';\n\ninterface IShapeStyle {\n    fill?: string\n    stroke?: string\n    strokeWidth?: number\n    onChangeFill: (color: string|null) => void\n    onChangeStroke: (color: string|null) => void\n    onChangeStrokeWidth: (width: string) => void\n}\n\nconst ShapeStyler: React.FunctionComponent<IShapeStyle> = props => {\n\n    const fill = props.fill;\n    const stroke = props.stroke;\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Fill'}>\n                {\n                    fill &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeFill(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(fill),\n                            color: foreground(fill)\n                        }}\n                        text={fill || 'Inheret'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(fill)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeFill(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n            <FormGroup inline={true} label={'Stroke'}>\n                {\n                    stroke &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeStroke(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(stroke),\n                            color: foreground(stroke)\n                        }}\n                        text={stroke || 'Inheret'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(stroke)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeStroke(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n            <FormGroup inline={true} label={'Stroke Width'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    min={-1}\n                    onValueChange={(_, strVal) => props.onChangeStrokeWidth(strVal)}\n                    placeholder={'Inheret'}\n                    value={props.strokeWidth}/>\n            </FormGroup>\n        </>\n    );\n};\n\nexport default ShapeStyler;\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    Divider, FormGroup,\n    NonIdealState, Switch,\n    Tooltip,\n    Tree\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport LabelStyler from '../../drawer-components/LabelStyler';\nimport { mapTreeToNodes } from '../../graphTypes';\nimport ShapeSelector from './components/ShapeSelector';\nimport ShapeStyler from './components/ShapeStyler';\nimport {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setFill,\n    setHeight,\n    setLabelColor,\n    setLabelSize,\n    setRadius,\n    setShape,\n    setStroke,\n    setStrokeWidth,\n    setWidth,\n    toggleCollapseNodeStyle,\n    toggleHideDisconnected,\n    toggleHideEmptySets\n} from './nodeStylingSlice';\n\n// Map redux state to node styling props\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.nodeStylingSlice\n});\n\n// Actions\nconst mapDispatch = {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setFill,\n    setHeight,\n    setLabelColor,\n    setLabelSize,\n    setRadius,\n    setShape,\n    setStroke,\n    setStrokeWidth,\n    setWidth,\n    toggleCollapseNodeStyle,\n    toggleHideDisconnected,\n    toggleHideEmptySets\n};\n\n// Create connector\nconst connector = connect(mapState, mapDispatch);\n\n// Create props for things from redux\ntype NodeStylingProps = ConnectedProps<typeof connector>;\n\nconst NodeStyling: React.FunctionComponent<NodeStylingProps> = props => {\n\n    const selected = props.selected;\n\n    // Hide disconnected\n    const hideDisconnected = props.selected\n        ? props.hideDisconnected.get(props.selected)\n        : false;\n\n    // Shape properties\n    const shape = selected ? props.shapes.get(selected) || {} : {};\n    const fill = shape ? shape.fill : undefined;\n    const stroke = shape ? shape.stroke : undefined;\n    const strokeWidth = shape ? shape.strokeWidth : undefined;\n\n    // Label properties\n    const label = selected ? props.labels.get(selected) || {} : {};\n    const labelColor = label ? label.color : undefined;\n    const font = label ? label.font : undefined;\n    const match = font ? font.match(/(\\d*)px/) : [];\n    const labelSize = match\n        ? match.length > 1\n            ? parseInt(match[1])\n            : undefined\n        : undefined;\n\n    // Tree properties\n    const tree = mapTreeToNodes(props.nodeTree, props.collapsed, selected);\n    const hide = props.hideEmptySets;\n    tree.secondaryLabel = (\n        <Tooltip\n            content={hide ? 'Show Empty Sets' : 'Hide Empty Sets'}>\n            <Button\n                icon={hide ? 'eye-off' : 'eye-open'}\n                minimal={true}\n                onClick={props.toggleHideEmptySets}/>\n        </Tooltip>\n    );\n\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapseNodeStyle}\n            onToggle={props.toggleCollapseNodeStyle}\n            title={'Node Styling'}>\n            <Tree\n                contents={[tree]}\n                onNodeClick={node => props.selectTreeNode(node.id.toString())}\n                onNodeCollapse={node => props.collapseTreeNode(node.id.toString())}\n                onNodeExpand={node => props.expandTreeNode(node.id.toString())}\n            />\n            <Divider/>\n            {\n                selected\n                    ? (\n                        <>\n                            <FormGroup\n                                contentClassName={'fill'}\n                                inline={true}>\n                                <Switch\n                                    alignIndicator={Alignment.RIGHT}\n                                    checked={hideDisconnected}\n                                    onChange={props.toggleHideDisconnected}\n                                    label={'Hide Disconnected Nodes'}/>\n                            </FormGroup>\n                            <ShapeSelector\n                                shape={shape}\n                                onSetHeight={props.setHeight}\n                                onSetRadius={props.setRadius}\n                                onSetShape={props.setShape}\n                                onSetWidth={props.setWidth}\n                            />\n                            <ShapeStyler\n                                fill={fill}\n                                stroke={stroke}\n                                strokeWidth={strokeWidth}\n                                onChangeFill={props.setFill}\n                                onChangeStroke={props.setStroke}\n                                onChangeStrokeWidth={props.setStrokeWidth}\n                            />\n                            <LabelStyler\n                                color={labelColor}\n                                size={labelSize}\n                                onChangeColor={props.setLabelColor}\n                                onChangeSize={props.setLabelSize}/>\n                            <ButtonGroup\n                                fill={true}\n                                minimal={true}>\n                                <Button\n                                    icon={'clean'}\n                                    onClick={props.clearCurrent}\n                                    text={'Clear Selected'}/>\n                                <Button\n                                    icon={'clean'}\n                                    onClick={props.clearAll}\n                                    text={'Clear All'}/>\n                            </ButtonGroup>\n                        </>\n                    )\n                    : (\n                        <NonIdealState\n                            title={'Node Styling'}\n                            description={'Select a type or set from the tree'}\n                            icon={'style'}/>\n                    )\n            }\n\n        </SterlingDrawer.Section>\n    );\n};\n\nexport default connector(NodeStyling);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport QuickEdgeStyling from './drawer-views/edge-styling/QuickEdgeStyling';\nimport EdgeSettings from './drawer-views/graph-settings/EdgeSettings';\nimport Layout from './drawer-views/layout/Layout';\nimport Projections from './drawer-views/projections/Projections';\nimport EdgeStyling from './drawer-views/edge-styling/EdgeStyling';\nimport GraphSettings from './drawer-views/graph-settings/GraphSettings';\nimport QuickLayout from './drawer-views/layout/QuickLayout';\nimport NodeStyling from './drawer-views/node-styling/NodeStyling';\n\n// Map redux state to graph settings props\nconst mapState = (state: RootState) => ({\n    view: state.sterlingSlice.graphView\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype GraphStageProps = ConnectedProps<typeof connector>;\n\n// The graph settings component\nconst GraphDrawer: React.FunctionComponent<GraphStageProps> = props => {\n\n    if (props.view === 'node') return (\n        <>\n            <Projections/>\n            <NodeStyling/>\n        </>\n    );\n    if (props.view === 'edge') return (\n        <>\n            <QuickEdgeStyling/>\n            <EdgeStyling/>\n        </>\n    );\n    if (props.view === 'layout') return (\n        <>\n            <QuickLayout/>\n            <Layout/>\n        </>\n    );\n    if (props.view === 'settings') return (\n        <>\n            <GraphSettings/>\n            <EdgeSettings/>\n        </>\n    );\n\n    return null;\n};\n\nexport default connector(GraphDrawer);\n","import {\n    cloneLabelStyle,\n    cloneShapeStyle, DagreLayout,\n    EdgeStyle, Graph,\n    NodeStyle\n} from '@atdyer/graph-js';\nimport { NonIdealState } from '@blueprintjs/core';\nimport {\n    AlloyField,\n    AlloyInstance,\n    AlloySignature,\n    AlloySkolem\n} from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport { generateGraph } from './graphData';\n\nconst DEFAULT_EDGE_STYLES: EdgeStyle[] = [];\n\nconst DEFAULT_NODE_STYLES: NodeStyle[] = [{\n    nodes: [],\n    shape: { type: 'circle' }\n}];\n\n// Map redux state to graph settings props\nconst mapState = (state: RootState) => ({\n    asAttribute: state.graphSlice.dataSlice.asAttribute,\n    bundleFactor: state.graphSlice.graphSettingsSlice.bundleFactor,\n    description: state.sterlingSlice.welcomeDescription,\n    edgeLabelPlacement: state.graphSlice.graphSettingsSlice.edgeLabelPlacement,\n    edgeLabels: state.graphSlice.edgeStylingSlice.labelStyles,\n    graph: state.graphSlice.graphSlice.graph,\n    hideDisconnected: state.graphSlice.nodeStylingSlice.hideDisconnected,\n    instance: state.sterlingSlice.instance,\n    links: state.graphSlice.edgeStylingSlice.linkStyles,\n    nodeLabels: state.graphSlice.nodeStylingSlice.labels,\n    projections: state.graphSlice.dataSlice.projections,\n    shapes: state.graphSlice.nodeStylingSlice.shapes,\n    settings: state.graphSlice.graphSettingsSlice,\n    title: state.sterlingSlice.welcomeTitle\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype GraphStageProps = ConnectedProps<typeof connector>;\n\n// The graph stage component\nclass GraphStage extends React.Component<GraphStageProps> {\n\n    private _ref: React.RefObject<HTMLCanvasElement>;\n\n    constructor (props: GraphStageProps) {\n\n        super(props);\n\n        this._ref = React.createRef<HTMLCanvasElement>();\n\n    }\n\n    componentDidMount (): void {\n\n        const canvas = this._ref.current;\n        const props = this.props;\n        const graph = props.graph;\n        const instance = props.instance;\n\n        if (instance) this._update(graph, instance);\n        if (canvas) this.props.graph.canvas(canvas);\n\n        graph.update();\n\n    }\n\n    componentDidUpdate (prevProps: GraphStageProps): void {\n\n        const props = this.props;\n        const graph = props.graph;\n        const instance = props.instance;\n\n        if (instance) this._update(graph, instance);\n\n        // Always update the layout for the Forge folks\n        const didProjectionsUpdate = prevProps.projections !== props.projections;\n\n        if (!prevProps.instance || props.instance !== prevProps.instance || didProjectionsUpdate) {\n            const dagre = new DagreLayout();\n            dagre.apply(graph, {\n                nodesep: 100,\n                rankdir: 'BT',\n                ranksep: 150\n            });\n        }\n\n        // if (!prevProps.instance || (instance && !anyInCommon(prevProps.instance, instance))) {\n        //     const dagre = new DagreLayout();\n        //     dagre.apply(graph, {\n        //         nodesep: 100,\n        //         rankdir: 'BT',\n        //         ranksep: 150\n        //     });\n        // }\n\n        graph.update();\n\n    }\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        return this.props.instance\n            ? <canvas className={'graph'} ref={this._ref}/>\n            : <NonIdealState\n                title={props.title}\n                description={props.description}\n                icon={'graph'}/>;\n\n    }\n\n    private _buildEdgeStyles (): EdgeStyle[] {\n\n        const instance = this.props.instance;\n        const links = this.props.links;\n        const labels = this.props.edgeLabels;\n\n        if (!instance) return DEFAULT_EDGE_STYLES;\n\n        const fields = instance.fields();\n        const skolems = instance.skolems().filter(s => s.arity() > 1);\n\n        const toStyle = (item: AlloyField | AlloySkolem): EdgeStyle => {\n            const id = item.id();\n            return {\n                groups: [id],\n                link: links.get(id),\n                label: labels.get(id)\n            }\n        };\n\n        const fieldStyle: EdgeStyle = {\n            groups: [],\n            link: links.get('Fields'),\n            label: labels.get('Fields'),\n            children: fields.map(toStyle)\n        };\n\n        const skolemStyle: EdgeStyle = {\n            groups: [],\n            link: links.get('Skolems'),\n            label: labels.get('Skolems'),\n            children: skolems.map(toStyle)\n        };\n\n        return [fieldStyle, skolemStyle];\n\n    }\n\n    private _buildNodeStyles (): NodeStyle[] {\n\n        const instance = this.props.instance;\n        const shapes = this.props.shapes;\n        const labels = this.props.nodeLabels;\n\n        if (!instance) return DEFAULT_NODE_STYLES;\n\n        const univ = instance.signatures().find(sig => sig.id() === 'univ');\n\n        if (!univ) return DEFAULT_NODE_STYLES;\n\n        const populate = (sig: AlloySignature): NodeStyle => {\n\n            const children = sig.subTypes().map(populate);\n            const shape = shapes.get(sig.id());\n            const label = labels.get(sig.id());\n\n            return {\n                nodes: sig.atoms().map(atom => atom.name()),\n                shape: shape ? cloneShapeStyle(shape) : undefined,\n                label: label ? cloneLabelStyle(label) : undefined,\n                children\n            }\n\n        };\n\n        const styletree = populate(univ);\n        if (!styletree.shape) styletree.shape = {};\n        if (!styletree.shape.type) styletree.shape.type = 'rectangle';\n\n        return [styletree];\n\n    }\n\n    private _update (graph: Graph, instance: AlloyInstance): void {\n\n        const props = this.props;\n        const settings = props.settings;\n\n        if (instance) {\n\n            const [nodes, edges] = generateGraph(\n                instance,\n                graph.nodes(),\n                props.projections,\n                props.asAttribute,\n                props.hideDisconnected\n            );\n\n            // Set the nodes and edges\n            graph.nodes(nodes);\n            graph.edges(edges);\n            graph.bundleFactor(props.bundleFactor);\n            graph.edgeLabelPlacement(props.edgeLabelPlacement);\n\n            // Create the styles\n            graph.nodeStyles(this._buildNodeStyles());\n            graph.edgeStyles(this._buildEdgeStyles());\n\n        } else {\n\n            graph.nodes([]);\n            graph.edges([]);\n\n        }\n\n        graph.axesVisible(settings.axesVisible);\n        graph.gridVisible(settings.gridVisible);\n\n        const canvas = this._ref.current;\n        if (canvas) this.props.graph.canvas(canvas);\n\n    }\n\n}\n\n// function anyInCommon (a: AlloyInstance, b: AlloyInstance): boolean {\n//     const atoms = new Set();\n//     a.atoms().forEach(atom => {\n//         if (!atom.type().isBuiltin()) atoms.add(atom.id());\n//     });\n//     const batoms = b.atoms();\n//     for (let i=0; i<batoms.length; ++i) {\n//         const atom = batoms[i];\n//         if (!atom.type().isBuiltin() && atoms.has(atom.id())) return true;\n//     }\n//     return false;\n// }\n\nexport default connector(GraphStage);\n","import { Edge, Node } from '@atdyer/graph-js';\nimport {\n    AlloyAtom,\n    AlloyField,\n    AlloyInstance,\n    AlloySignature,\n    AlloySkolem,\n    AlloyTuple\n} from 'alloy-ts';\nimport { Map, Set } from 'immutable';\nimport { isDefined } from 'ts-is-present';\n\nfunction generateGraph (\n    instance: AlloyInstance,\n    existingNodes: Node[],\n    projections: Map<string, string>,\n    attributes: Map<string, boolean>,\n    hideDisconnected: Map<string, boolean>\n): [Node[], Edge[]] {\n\n    /**\n     * Need instance, existing nodes, projections, fields that are rendered as attributes, and\n     * whether or not to render disconnected nodes for each signature.\n     * With these five things we can build the set of nodes (updating any existing ones):\n     * {\n     *     id: atom name\n     *     x: 0\n     *     y: 0\n     *     labels: [\n     *         ...skolems,\n     *         ...fields as attributes\n     *     ]\n     * }\n     *\n     * and the set of edges:\n     * {\n     *     source: source node (after projections)\n     *     target: target node (after projections)\n     *     group: field or skolem name\n     *     label: field or skolem name [any atom names that fall betweet source and target]\n     * }\n     */\n\n    // Create a map of Signature objects to their projected Atom objects and a\n    // set of all projected atoms\n    const _projections: Map<AlloySignature, AlloyAtom|undefined> = Map(instance.signatures().map(sig => {\n        const id = sig.id();\n        return projections.has(id)\n            ? [sig, getAtom(projections.get(id)!)]\n            : [sig, undefined];\n    }));\n\n    // Project every tuple of every field, remove empty tuples and empty fields\n    const fields = Map<AlloyField, AlloyTuple[]>(instance.fields().map(field => {\n        return [\n            field,\n            field.tuples().map(project).filter(isDefined).filter(hasAtoms)\n        ];\n    })).filter(tuples => tuples.length > 0);\n\n    // Project every tuple of every skolem, remove empty tuples and empty skolems\n    const skolems = Map<AlloySkolem, AlloyTuple[]>(instance.skolems().map(skolem => {\n        return [\n            skolem,\n            skolem.tuples().map(project).filter(isDefined).filter(hasAtoms)\n        ];\n    })).filter(tuples => tuples.length > 0);\n\n    // Check for anything wonky happening during projection. Within a single\n    // field or skolem, the arity of every tuple should be identical and positive\n    // const fieldsOK = fields.every(tuplesSameArity);\n    // const skolemsOK = skolems.every(tuplesSameArity);\n    // if (!fieldsOK || !skolemsOK) {\n    //     console.error('OH GOD NO!!!!');\n    // } else {\n    //     console.log('HOORAY!');\n    // }\n\n    // Separate fields into those that will be edges and those that will be labels.\n    // Fields that will be labels must have an arity greater than 1 (otherwise the label would be empty)\n    const edgeFields = fields.filter((tuples, field) => !isAttribute(field) && tuples[0].arity() > 1);\n    const labelFields = fields.filter((tuples, field) => isAttribute(field) || tuples[0].arity() === 1);\n\n    // Separate skolems into those that will be edges and those that will be labels\n    const edgeSkolems = skolems.filter(tuples => tuples[0].arity() > 1);\n    const labelSkolems = skolems.filter(tuples => tuples[0].arity() === 1);\n\n    // Create an empty list for edges\n    const edges: Edge[] = [];\n\n    // Create all edges, building a set of connected atoms\n    const connected = Set<AlloyAtom>().withMutations(connected => {\n        edgeFields.forEach((tuples, field) => {\n            tuples.forEach(tuple => buildEdge(field, tuple));\n        });\n        edgeSkolems.forEach((tuples, skolem) => {\n            tuples.forEach(tuple => buildEdge(skolem, tuple));\n        });\n        function buildEdge (item: AlloyField | AlloySkolem, tuple: AlloyTuple) {\n            const atoms = tuple.atoms();\n            const source = atoms[0];\n            const target = atoms[atoms.length - 1];\n            const middle = atoms.slice(1, atoms.length - 1);\n            const label = item.name() + (middle.length ? ` [${middle.join(', ')}]` : '');\n            connected.add(source);\n            connected.add(target);\n            edges.push({\n                source: source.name(),\n                target: target.name(),\n                group: item.id(),\n                label: label\n            });\n        }\n    });\n\n    // Create the labels for each atom\n    const labelMap = Map<AlloyAtom, string[]>()\n        .withMutations(map => {\n\n            labelFields.forEach(addLabel);\n            labelSkolems.forEach(addLabel);\n\n            function addLabel (tuples: AlloyTuple[], item: AlloyField|AlloySkolem) {\n\n                // Create a map of atoms to labels for this particular field/skolem\n                const labels = Map<AlloyAtom, string[]>()\n                    .withMutations(labels => {\n                        tuples.forEach(tuple => {\n                            const atoms = tuple.atoms();\n                            const target = atoms[0];\n                            const label = atoms.slice(1).map(atom => atom.name()).join('->');\n                            if (!labels.has(target)) labels.set(target, []);\n                            if (label.length) labels.get(target)!.push(label);\n                        });\n                    });\n\n                // Combine all labels for this particular field/skolem and add\n                // them to the appropriate atom\n                labels.forEach((labels, atom) => {\n                    const paren = item.expressionType() === 'field' && !isAttribute(item);\n                    const joined = labels.length ? `: ${labels.join(', ')}` : '';\n                    const label = `${item.name()}${joined}`;\n                    if (!map.has(atom)) map.set(atom, []);\n                    map.get(atom)!.push(paren ? `(${label})` : label);\n                });\n\n            }\n\n        });\n\n    // Debug print\n    // labelMap.forEach((labels, atom) => console.log(atom.name(), labels));\n\n    // Create nodes\n    const nodes: Node[] = instance.atoms().map(atom => {\n\n        // First determine if the atom should be visible. It's visible if it's\n        // connected or if its type is not explicitly hidden.\n        const type = atom.type();\n        const visible = connected.has(atom) || !hideDisconnected.get(type.id());\n\n        if (visible) {\n\n            // If it's visible, look for an existing node, otherwise create a new one\n            const node = existingNodes.find(node => node.id === atom.name()) || {\n                id: atom.name(),\n                x: 0,\n                y: 0\n            };\n\n            // Get any labels associated with this atom\n            node.labels = labelMap.get(atom);\n\n            return node;\n\n        }\n\n        return undefined;\n\n    }).filter(isDefined);\n\n    return [nodes, edges];\n\n    /**\n     * Find an atom in the instance provided to the generateGraph function\n     * @param atom\n     */\n    function getAtom (atom: string): AlloyAtom | undefined {\n        return instance.atoms().find(a => a.name() === atom);\n    }\n\n    /**\n     * Returns true if a tuple has atoms\n     * @param tuple\n     */\n    function hasAtoms (tuple: AlloyTuple): boolean {\n        return tuple.arity() > 0;\n    }\n\n    /**\n     * Returns true if the item is to be displayed as an attribute\n     * @param item\n     */\n    function isAttribute (item: AlloyField | AlloySkolem): boolean {\n        return !!attributes.get(item.id());\n    }\n\n    /**\n     * Project a tuple using the projections provided to the generateGraph function.\n     * A tuple that has no types with projections will remain unchanged. A tuple\n     * that has projected types but any atoms of those types are not the projected\n     * atom will be removed completely (ie. return undefined). A tuple that has\n     * projected types will have a projection if all of the atoms are of their\n     * respective projected types.\n     * @param tuple\n     */\n    function project (tuple: AlloyTuple): AlloyTuple | undefined {\n\n        const projectedAtoms = tuple\n            .types()\n            .map(projectable)\n            .map(sig => _projections.get(sig));\n\n        if (projectedAtoms.some(isDefined)) {\n\n            const atoms = tuple.atoms();\n            const keep = atoms.every((atom, index) => projectedAtoms[index] === undefined || projectedAtoms[index] === atom);\n\n            if (keep) {\n\n                return new AlloyTuple(tuple.id(), atoms.filter((atom, index) => {\n                    return projectedAtoms[index] === undefined;\n                }));\n\n            }\n\n        } else {\n\n            return tuple;\n\n        }\n\n    }\n\n    /**\n     * Only top level signatures (those that are direct descendants of univ)\n     * can be projected. This function return the top level type of any signature\n     * in the instance.\n     * @param signature\n     */\n    function projectable (signature: AlloySignature): AlloySignature {\n        return signature.typeHierarchy()[1];\n    }\n\n    /**\n     * Returns true if there are tuples in the list and they are all the same arity\n     * @param tuples\n     */\n    // function tuplesSameArity (tuples: AlloyTuple[]): boolean {\n    //     if (!tuples.length) return false;\n    //     const arity = tuples[0].arity();\n    //     return tuples.every(tuple => tuple.arity() === arity);\n    // }\n\n}\n\nexport {\n    generateGraph\n}\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    NonIdealState\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport SterlingDrawer from '../../sterling/SterlingDrawer';\nimport { setSelected } from './sourceSlice';\n\nconst mapState = (state: RootState) => ({\n    instance: state.sterlingSlice.instance,\n    selected: state.sourceSlice.selected\n});\n\nconst mapDispatch = {\n    setSelected\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype SourceDrawerProps = ConnectedProps<typeof connector>;\n\nconst SourcePlaceholder: React.FunctionComponent<SourceDrawerProps> = props => (\n    <NonIdealState\n        title={'No Files'}\n        icon={'document'}/>\n);\n\nconst SourceDrawer: React.FunctionComponent<SourceDrawerProps> = props => {\n\n    const instance = props.instance;\n\n    return <SterlingDrawer.Section title={'Model Sources'}>\n        {\n            instance\n                ? <ButtonGroup\n                    alignText={Alignment.LEFT}\n                    minimal={true}\n                    vertical={true}> {\n                    instance.sources().map(source => (\n                        <Button\n                            active={props.selected === source}\n                            icon={'document'}\n                            key={source.filename()}\n                            onClick={() => props.setSelected(source)}\n                            text={source.filename().split(/(\\\\|\\/)/g).pop()}/>\n                    ))\n                }</ButtonGroup>\n                : <SourcePlaceholder {...props}/>\n        }\n    </SterlingDrawer.Section>\n};\n\nexport default connector(SourceDrawer);\n","import { NonIdealState } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport { Light as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { githubGist } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { COMMENT } from 'highlight.js';\n\nconst STYLE = githubGist;\n\nSyntaxHighlighter.registerLanguage('alloy', function () {\n\n    let NUMBER_RE = '\\\\b\\\\d+';\n\n    return {\n        // case_insensitive\n        case_insensitive: false,\n\n        // keywords\n        keywords: 'abstract all and as assert but check disj ' +\n            'else exactly extends fact for fun iden iff implies ' +\n            'in Int let lone module no none not one open or pred ' +\n            'run set sig some sum univ',\n\n        // contains\n        contains: [\n\n            // hljs.COMMENT\n            COMMENT('//', '$', {}),\n            COMMENT('--', '$', {}),\n            COMMENT('/\\\\*', '\\\\*/', {}),\n\n            {\n                // className\n                className: 'number',\n                // begin\n                begin: NUMBER_RE,\n                // relevance\n                relevance: 0\n            }\n        ]\n    };\n});\n\nconst mapState = (state: RootState) => ({\n    instance: state.sterlingSlice.instance,\n    selected: state.sourceSlice.selected,\n    welcome: state.sterlingSlice.welcomeTitle,\n    welcomeDescription: state.sterlingSlice.welcomeDescription\n});\n\nconst connector = connect(mapState);\n\ntype SourceStageProps = ConnectedProps<typeof connector>;\n\nconst SourceStage: React.FunctionComponent<SourceStageProps> = props => {\n\n    if (!props.instance) {\n        return (\n            <NonIdealState\n                description={props.welcomeDescription}\n                icon={'document'}\n                title={props.welcome}/>\n        );\n    }\n\n    if (!props.selected) {\n        return (\n            <NonIdealState\n                description={'Choose a File'}\n                icon={'document'}\n                title={props.welcome}/>\n        );\n    }\n\n    return (\n        <SyntaxHighlighter\n            className={'source'}\n            language={'alloy'}\n            showLineNumbers={true}\n            style={STYLE}>\n            { props.selected.source() }\n        </SyntaxHighlighter>\n    );\n\n};\n\n\nexport default connector(SourceStage);\n","import {\n    Button,\n    Icon,\n    ITagProps,\n    Menu,\n    MenuDivider,\n    MenuItem\n} from '@blueprintjs/core';\nimport {\n    IItemListRendererProps,\n    IItemRendererProps,\n    ItemPredicate,\n    MultiSelect\n} from '@blueprintjs/select';\nimport { AlloyField, AlloySignature, AlloySkolem, sorting } from 'alloy-ts';\nimport * as React from 'react';\nimport { AlloyNameFn, SigFieldSkolem } from '../tableTypes';\nimport { FieldTag, SignatureTag } from '../TableTags';\n\nconst AlloySelect = MultiSelect.ofType<SigFieldSkolem>();\n\nexport interface IAlloyMultiSelectProps {\n    items: SigFieldSkolem[],\n    itemsSelected: SigFieldSkolem[],\n    onClearSelectedItems: () => void,\n    onDeselectItem: (item: SigFieldSkolem) => void,\n    onSelectItem: (item: SigFieldSkolem) => void,\n    nameFunction: AlloyNameFn\n}\n\nclass AlloyMultiSelect extends React.Component<IAlloyMultiSelectProps> {\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const sortItems = (items: SigFieldSkolem[]): SigFieldSkolem[] => {\n\n            const sigs = items.filter(item => item.expressionType() === 'signature');\n            const flds = items.filter(item => item.expressionType() === 'field');\n            const skls = items.filter(item => item.expressionType() === 'skolem');\n            const alpha = sorting.alphabeticalSort(this.props.nameFunction);\n            (sigs as AlloySignature[]).sort(alpha).sort(sorting.builtinSort());\n            (flds as AlloyField[]).sort(alpha);\n            (skls as AlloySkolem[]).sort(alpha);\n            return [...sigs, ...flds, ...skls];\n\n        };\n\n        const clearButton = this.props.itemsSelected.length\n            ? <Button\n                icon='cross'\n                minimal={true}\n                onClick={this.props.onClearSelectedItems}/>\n            : undefined;\n\n        return (\n            <AlloySelect\n                fill={true}\n                items={sortItems(props.items)}\n                itemPredicate={this._filterItem}\n                itemRenderer={this._renderItem}\n                itemListRenderer={this._renderList}\n                onItemSelect={this._onSelectItem}\n                popoverProps={{\n                    usePortal: false\n                }}\n                placeholder='Choose Tables...'\n                resetOnSelect={true}\n                scrollToActiveItem={true}\n                selectedItems={this.props.itemsSelected}\n                tagInputProps={{\n                    onRemove: this._onRemoveTag,\n                    rightElement: clearButton,\n                    tagProps: this._tagProps\n                }}\n                tagRenderer={this._renderTag}\n                />\n        )\n\n    }\n\n    /**\n     * Predicate used to determine if a query string exists in the name of a\n     * Signature, Field, or Skolem.\n     * @param query The query string\n     * @param item The Signature, Field, or Skolem\n     * @private\n     * @return Returns true if the query string appears in the name of the item,\n     * false otherwise.\n     */\n    private _filterItem: ItemPredicate<SigFieldSkolem> = (query: string, item: SigFieldSkolem): boolean => {\n\n        const name = item.expressionType() === 'field'\n            ? this.props.nameFunction(item).split('<:')[1]\n            : this.props.nameFunction(item);\n\n        return name.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n\n    };\n\n    /**\n     * Determine if an item is currently selected\n     * @param item The item in question\n     * @private\n     * @return Returns true if the item is currently selected, false otherwise\n     */\n    private _isItemSelected = (item: SigFieldSkolem) => {\n        return this.props.itemsSelected.includes(item);\n    };\n\n    /**\n     * Event handler used when a tag is removed from the current selection\n     * @param tag The tag text\n     * @param index The index of the tag in the selected items list\n     * @private\n     */\n    private _onRemoveTag = (tag: string, index: number): void => {\n        this.props.onDeselectItem(this.props.itemsSelected[index]);\n    };\n\n    /**\n     * Event handler used when an item in the list is selected\n     * @param item The selected item\n     * @private\n     */\n    private _onSelectItem = (item: SigFieldSkolem): void => {\n\n        this._isItemSelected(item)\n            ? this.props.onDeselectItem(item)\n            : this.props.onSelectItem(item);\n\n    };\n\n    /**\n     * Custom renderer for an Alloy item in the dropdown list.\n     * @param item The Alloy item to render\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderItem = (item: SigFieldSkolem, props: IItemRendererProps): React.ReactElement | null => {\n\n        if (!props.modifiers.matchesPredicate) return null;\n        switch (item.expressionType()) {\n            case 'signature':\n                return this._renderSignature(item as AlloySignature, props);\n            case 'field':\n                return this._renderField(item as AlloyField, props);\n            case 'skolem':\n                return this._renderSkolem(item as AlloySkolem, props);\n            default:\n                return null;\n        }\n\n    };\n\n    /**\n     * Custom renderer for the contents of the dropdown list. Splits list into\n     * three categories (Signatures, Fields, Skolems) sorted alphabetically.\n     * @param props Properties describing how to render a list of items\n     * @private\n     */\n    private _renderList = (props: IItemListRendererProps<SigFieldSkolem>): React.ReactElement => {\n\n        const sigs = props.items.filter(item => item.expressionType() === 'signature');\n        const flds = props.items.filter(item => item.expressionType() === 'field');\n        const skls = props.items.filter(item => item.expressionType() === 'skolem');\n        const alpha = sorting.alphabeticalSort(this.props.nameFunction);\n        (sigs as AlloySignature[]).sort(alpha).sort(sorting.builtinSort());\n        (flds as AlloyField[]).sort(alpha);\n        (skls as AlloySkolem[]).sort(alpha);\n        const renderedSigs = sigs.map(props.renderItem).filter(item => item != null);\n        const renderedFlds = flds.map(props.renderItem).filter(item => item != null);\n        const renderedSkls = skls.map(props.renderItem).filter(item => item != null);\n        return (\n            <Menu ulRef={props.itemsParentRef}>\n                <MenuDivider title='Signatures'/>\n                {renderedSigs.length ? renderedSigs : <MenuItem disabled={true} text='None'/>}\n                <MenuDivider title='Fields'/>\n                {renderedFlds.length ? renderedFlds : <MenuItem disabled={true} text='None'/>}\n                <MenuDivider title='Skolems'/>\n                {renderedSkls.length ? renderedSkls : <MenuItem disabled={true} text='None'/>}\n            </Menu>\n        );\n\n    };\n\n    /**\n     * Custom renderer for an Alloy Signature in the dropdown list\n     * @param item The Signature\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderSignature = (item: AlloySignature, props: IItemRendererProps): React.ReactElement => {\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                key={item.id()}\n                labelElement={highlightText(this.props.nameFunction(item), props.query)}\n                icon={selected ? 'tick' : 'blank'}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for an Alloy Field in the dropdown list\n     * @param item The Field\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderField = (item: AlloyField, props: IItemRendererProps) => {\n        const name = this.props.nameFunction(item);\n        const tokens = name.split('<:');\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                key={item.id()}\n                icon={<>\n                    { selected && <Icon icon='tick'/>}\n                    <SignatureTag signature={tokens[0]}/>\n                </>}\n                labelElement={highlightText(tokens[1], props.query)}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for an Alloy Skolem in the dropdown list\n     * @param item The Skolem\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderSkolem = (item: AlloySkolem, props: IItemRendererProps) => {\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                icon={selected ? 'tick' : 'blank'}\n                key={item.id()}\n                labelElement={highlightText(item.name(), props.query)}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for tags in the select. Does not actually generate a Tag,\n     * but instead returns the node that will be used as the label of the tag.\n     * @param item The Alloy item to render\n     * @private\n     */\n    private _renderTag = (item: SigFieldSkolem): React.ReactNode => {\n\n        const name = this.props.nameFunction(item);\n        return item.expressionType() === 'field'\n            ? FieldTag.FieldTagEls(name.split('<:'))\n            : name;\n\n    };\n\n    /**\n     * Custom properties to pass to each Tag based on type of item the tag\n     * represents\n     * @param value The node\n     * @param index The index of the item in the selected items list\n     * @private\n     */\n    private _tagProps = (value: React.ReactNode, index: number): ITagProps => {\n\n        const itemType = this.props.itemsSelected[index].expressionType();\n        const tag = itemType === 'signature'\n            ? 'sig-tag' : itemType === 'field'\n                ? 'field-tag' : itemType === 'skolem'\n                    ? 'skolem-tag' : '';\n        return {\n            className: tag\n        };\n\n    }\n\n}\n\nfunction highlightText (text: string, query: string) {\n    let lastIndex = 0;\n    const words = query\n        .split(/\\s+/)\n        .filter(word => word.length > 0)\n        .map(escapeRegExpChars);\n    if (words.length === 0) {\n        return [text];\n    }\n    const regexp = new RegExp(words.join(\"|\"), \"gi\");\n    const tokens: React.ReactNode[] = [];\n    while (true) {\n        const match = regexp.exec(text);\n        if (!match) {\n            break;\n        }\n        const length = match[0].length;\n        const before = text.slice(lastIndex, regexp.lastIndex - length);\n        if (before.length > 0) {\n            tokens.push(before);\n        }\n        lastIndex = regexp.lastIndex;\n        tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\n    }\n    const rest = text.slice(lastIndex);\n    if (rest.length > 0) {\n        tokens.push(rest);\n    }\n    return tokens;\n}\n\nfunction escapeRegExpChars (text: string) {\n    return text.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\n}\n\nexport default AlloyMultiSelect;\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    FormGroup,\n    Radio,\n    RadioGroup,\n    Switch\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport SterlingDrawer from '../../sterling/SterlingDrawer';\nimport AlloyMultiSelect from './drawer-components/AlloyMultiSelect';\nimport {\n    clearSelectedData,\n    deselectData,\n    selectData,\n    setAlignment,\n    setLayoutDirection,\n    setSort,\n    setTableTypes,\n    toggleCollapseData,\n    toggleCollapseLayout,\n    toggleCollapseTables,\n    toggleHighlightSkolems,\n    toggleRemoveBuiltin,\n    toggleRemoveEmpty,\n    toggleRemoveThis\n} from './tableSlice';\nimport {\n    buildNameFunction,\n    HorizontalAlignment,\n    LayoutDirection,\n    SortDirection,\n    SortMethod,\n    TablesType\n} from './tableTypes';\n\n// Map redux state to table settings props\nconst mapState = (state: RootState) => ({\n    ...state.tableSlice\n});\n\n// Actions\nconst mapDispatch = {\n    clearSelectedData,\n    deselectData,\n    selectData,\n    setAlignment,\n    setLayoutDirection,\n    setSort,\n    setTableTypes,\n    toggleCollapseData,\n    toggleCollapseLayout,\n    toggleCollapseTables,\n    toggleHighlightSkolems,\n    toggleRemoveBuiltin,\n    toggleRemoveEmpty,\n    toggleRemoveThis\n};\n\n// Connect the two\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\n// Create props for things from redux\ntype TableDrawerProps = ConnectedProps<typeof connector>;\n\n// The table settings view\nconst TableDrawer: React.FunctionComponent<TableDrawerProps> = props => {\n\n    return (\n        <>\n            <SterlingDrawer.Section\n                collapsed={props.collapseTables}\n                onToggle={props.toggleCollapseTables}\n                style={{ zIndex: 1 }}\n                title={'Tables'}>\n                <RadioGroup\n                    onChange={event => props.setTableTypes(parseInt(event.currentTarget.value))}\n                    selectedValue={props.tablesType}>\n                    <Radio label='All Tables' value={TablesType.All}/>\n                    <Radio label='Signatures' value={TablesType.Signatures}/>\n                    <Radio label='Fields' value={TablesType.Fields}/>\n                    <Radio label='Skolems' disabled={props.highlightSkolems} value={TablesType.Skolems}/>\n                    <Radio label='Choose Tables' value={TablesType.Select}/>\n                    <AlloyMultiSelect\n                        items={props.data}\n                        itemsSelected={props.dataSelected}\n                        onClearSelectedItems={props.clearSelectedData}\n                        onDeselectItem={props.deselectData}\n                        onSelectItem={props.selectData}\n                        nameFunction={buildNameFunction(props.removeThis)}/>\n                </RadioGroup>\n            </SterlingDrawer.Section>\n            <SterlingDrawer.Section\n                collapsed={props.collapseData}\n                onToggle={props.toggleCollapseData}\n                title={'Data Options'}>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.removeBuiltin}\n                    disabled={props.tablesType === TablesType.Select}\n                    label='Hide Built-in Signatures'\n                    onChange={props.toggleRemoveBuiltin}/>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.removeEmpty}\n                    disabled={props.tablesType === TablesType.Select}\n                    label='Hide Empty Tables'\n                    onChange={props.toggleRemoveEmpty}/>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.removeThis}\n                    label='Remove \"this\" from Signature names'\n                    onChange={props.toggleRemoveThis}/>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.highlightSkolems}\n                    label='Display Skolems as highlighted rows'\n                    onChange={props.toggleHighlightSkolems}/>\n            </SterlingDrawer.Section>\n            <SterlingDrawer.Section\n                collapsed={props.collapseLayout}\n                onToggle={props.toggleCollapseLayout}\n                title={'Layout Options'}>\n                <FormGroup inline={true} label='Layout Direction'>\n                    <ButtonGroup>\n                        <Button\n                            active={props.layoutDirection === LayoutDirection.Row}\n                            icon='vertical-distribution'\n                            onClick={() => props.setLayoutDirection(LayoutDirection.Row)}/>\n                        <Button\n                            active={props.layoutDirection === LayoutDirection.Column}\n                            icon='horizontal-distribution'\n                            onClick={() => props.setLayoutDirection(LayoutDirection.Column)}/>\n                    </ButtonGroup>\n                </FormGroup>\n                <FormGroup inline={true} label='Align'>\n                    <ButtonGroup>\n                        <Button\n                            active={props.alignment === HorizontalAlignment.Left}\n                            icon='align-left'\n                            onClick={() => props.setAlignment(HorizontalAlignment.Left)}/>\n                        <Button\n                            active={props.alignment === HorizontalAlignment.Center}\n                            icon='align-center'\n                            onClick={() => props.setAlignment(HorizontalAlignment.Center)}/>\n                        <Button\n                            active={props.alignment === HorizontalAlignment.Right}\n                            icon='align-right'\n                            onClick={() => props.setAlignment(HorizontalAlignment.Right)}/>\n                    </ButtonGroup>\n                </FormGroup>\n                <FormGroup inline={true} label='Sort'>\n                    <ButtonGroup>\n                        <Button\n                            icon='group-objects'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Group,\n                                    direction: SortDirection.Ascending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-alphabetical'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Alphabetical,\n                                    direction: SortDirection.Ascending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-alphabetical-desc'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Alphabetical,\n                                    direction: SortDirection.Descending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-numerical'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Size,\n                                    direction: SortDirection.Ascending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-numerical-desc'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Size,\n                                    direction: SortDirection.Descending\n                                });\n                            }}/>\n                    </ButtonGroup>\n                </FormGroup>\n            </SterlingDrawer.Section>\n        </>\n    )\n\n};\n\nexport default connector(TableDrawer);\n","import { Portal } from '@blueprintjs/core';\nimport React from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\ninterface IPopoverRowProps {\n    content: string | React.ReactElement,\n    colors: string[]\n}\n\ninterface IPopoverRowState {\n    enabled: boolean\n}\n\nexport default class PopoverRow extends React.Component<IPopoverRowProps, IPopoverRowState> {\n\n    public state = {\n        enabled: false\n    };\n\n    render (): React.ReactNode {\n\n        const colors = this.props.colors;\n        const thickness = this.state.enabled ? 4 : 2;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <tr onMouseEnter={this._onMouseEnter}\n                            onMouseLeave={this._onMouseLeave}\n                            ref={ref}\n                            style={{\n                                boxShadow: this._buildShadowStyle(colors, thickness)\n                            }}>\n                            {this.props.children}\n                        </tr>\n                    )}\n                </Reference>\n                <Portal>\n                    <Popper\n                        modifiers={{}}\n                        placement='right'>\n                        {({ ref, style, placement }) => (\n                            this.state.enabled &&\n                            <div\n                                ref={ref}\n                                style={{\n                                    ...style,\n                                    padding: (thickness * (colors.length - 1)) + 'px'\n                                }}\n                                data-placement={placement}>\n                                <div className='table-rowpop'>\n                                    {this.props.content}\n                                </div>\n                            </div>\n                        )}\n                    </Popper>\n                </Portal>\n            </Manager>\n        );\n\n    }\n\n    private _buildShadowStyle = (colors: string[], thickness: number): string => {\n        return colors.map((color: string, i: number) => {\n            return `0 0 0 ${(i+1) * thickness}px ${color}`\n        }).join(',');\n    };\n\n    private _onMouseEnter = () => {\n        this.setState({enabled: true});\n    };\n\n    private _onMouseLeave = () => {\n        this.setState({enabled: false});\n    };\n\n}\n","import { AlloySkolem } from 'alloy-ts';\nimport React from 'react';\n\nexport default function SkolemListPopover (skolems: AlloySkolem[], colors: string[]): React.ReactElement {\n\n    return (\n        <>\n            {\n                skolems.map((skolem: AlloySkolem, i: number) => {\n                    return (\n                        <div key={skolem.id()}\n                             style={{backgroundColor: colors[i]}}>\n                            { skolem.name() }\n                        </div>\n                    )\n                })\n            }\n        </>\n    )\n\n}\n","import { Card, NonIdealState } from '@blueprintjs/core';\nimport { AlloyField, AlloySignature, AlloySkolem, filtering } from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport FieldHTMLTable from './stage-components/FieldHTMLTable';\nimport SignatureHTMLTable from './stage-components/SignatureHTMLTable';\nimport SkolemHTMLTable from './stage-components/SkolemHTMLTable';\nimport { FieldTag, SignatureTag, SkolemTag } from './TableTags';\nimport {\n    getAlignClass,\n    AlloyNameFn,\n    buildNameFunction,\n    buildSortFunction,\n    getLayoutClass,\n    SigFieldSkolem,\n    TablesType\n} from './tableTypes';\n\n// Map redux state to table settings props\nconst mapState = (state: RootState) => ({\n    ...state.tableSlice,\n    description: state.sterlingSlice.welcomeDescription,\n    instance: state.sterlingSlice.instance,\n    title: state.sterlingSlice.welcomeTitle\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype TableStageProps = ConnectedProps<typeof connector>;\n\n// The table stage component\nconst TableStage: React.FunctionComponent<TableStageProps> = props => {\n\n    if (!props.instance) return (\n        <NonIdealState\n            title={props.title}\n            description={props.description}\n            icon={'th'}/>\n    );\n\n    const alignment = getAlignClass(props.alignment);\n    const direction = getLayoutClass(props.layoutDirection);\n    const nameFunction = buildNameFunction(props.removeThis);\n    const primarySort = buildSortFunction(props.primarySort, nameFunction);\n    const secondSort = buildSortFunction(props.secondarySort, nameFunction);\n    const type = props.tablesType;\n\n    let data = type === TablesType.All ? props.data :\n        type === TablesType.Signatures ? props.data.filter(filtering.keepSignatures) :\n        type === TablesType.Fields ? props.data.filter(filtering.keepFields) :\n        type === TablesType.Skolems ? props.data.filter(filtering.keepSkolems) :\n        type === TablesType.Select ? props.dataSelected.slice() : [];\n\n    const pass = () => true;\n    data = type === TablesType.Select\n        ? data\n        : data\n            .filter(props.removeBuiltin ? filtering.removeBuiltins : pass)\n            .filter(props.removeEmpty ? filtering.removeEmptys : pass)\n            .filter(props.highlightSkolems ? filtering.removeSkolems : pass);\n\n    data = data\n        .sort(secondSort)\n        .sort(primarySort);\n\n    return (\n        <div className={`tables ${alignment} ${direction}`}>\n            {\n                data.map(item => (\n                    <Card key={item.id()}\n                          elevation={1}>\n                        { buildTableHeader(item, nameFunction) }\n                        {\n                            item.expressionType() === 'signature' ?\n                                SignatureHTMLTable({\n                                    highlightSkolems: props.highlightSkolems,\n                                    signature: item as AlloySignature,\n                                    skolemColors: props.skolemColors\n                                }) :\n                            item.expressionType() === 'field' ?\n                                FieldHTMLTable({\n                                    field: item as AlloyField,\n                                    highlightSkolems: props.highlightSkolems,\n                                    nameFunction: nameFunction,\n                                    skolemColors: props.skolemColors\n                                }) :\n                            item.expressionType() === 'skolem' ?\n                                SkolemHTMLTable({\n                                    nameFunction: nameFunction,\n                                    skolem: item as AlloySkolem\n                                }) :\n                            null\n                        }\n                    </Card>\n                ))\n            }\n        </div>\n    );\n\n};\n\n\nfunction buildTableHeader (item: SigFieldSkolem, nameFunction: AlloyNameFn): React.ReactNode {\n\n    if (item.expressionType() === 'signature') {\n        return <SignatureTag\n            fill={true}\n            signature={item as AlloySignature}\n            nameFunction={nameFunction}/>;\n    }\n\n    if (item.expressionType() === 'field') {\n        return <FieldTag\n            fill={true}\n            field={item as AlloyField}\n            nameFunction={nameFunction}/>;\n    }\n\n    if (item.expressionType() === 'skolem') {\n        return <SkolemTag\n            fill={true}\n            skolem={item as AlloySkolem}\n            nameFunction={nameFunction}/>;\n    }\n\n    return null;\n\n}\n\n\nexport default connector(TableStage);\n","import { HTMLTable } from '@blueprintjs/core';\nimport { AlloyAtom, AlloySignature, AlloySkolem } from 'alloy-ts';\nimport React from 'react';\nimport PopoverRow from './PopoverRow';\nimport SkolemListPopover from './SkolemListPopover';\n\nexport interface ISignatureHTMLTableProps {\n    highlightSkolems: boolean,\n    signature: AlloySignature,\n    skolemColors: Map<AlloySkolem, string>\n}\n\nexport default function SignatureHTMLTable (props: ISignatureHTMLTableProps) {\n\n    const signature = props.signature;\n    const atoms: AlloyAtom[] = signature.atoms();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <tbody>\n            {\n                atoms.map((atom: AlloyAtom) => {\n\n                    const skolems = atom.skolems();\n\n                    if (props.highlightSkolems && skolems.length) {\n\n                        const colors = skolems.map(s => props.skolemColors.get(s) || '');\n\n                        return (\n                            <PopoverRow\n                                key={atom.id()}\n                                content={SkolemListPopover(skolems, colors)}\n                                colors={colors}>\n                                <td>{ atom.name() }</td>\n                            </PopoverRow>\n                        );\n\n                    } else {\n\n                        return (\n                            <tr key={atom.id()}>\n                                <td>{ atom.name() }</td>\n                            </tr>\n                        );\n\n                    }\n                })\n            }\n            </tbody>\n        </HTMLTable>\n    )\n}\n","import { HTMLTable } from '@blueprintjs/core';\nimport {\n    AlloyAtom,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem,\n    AlloyTuple\n} from 'alloy-ts';\nimport React from 'react';\nimport PopoverRow from './PopoverRow';\nimport SkolemListPopover from './SkolemListPopover';\n\n\nexport interface IFieldHTMLTableProps {\n    field: AlloyField,\n    highlightSkolems: boolean,\n    nameFunction: (item: AlloySignature | AlloyField | AlloySkolem) => string,\n    skolemColors: Map<AlloySkolem, string>\n}\n\nexport default function FieldHTMLTable (props: IFieldHTMLTableProps) {\n\n    const types: AlloySignature[] = props.field.types();\n    const tuples: AlloyTuple[] = props.field.tuples();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <thead>\n            <tr>\n            {\n                types.map((sig: AlloySignature, i: number) => (\n                    <th key={sig.id() + i}>\n                        {props.nameFunction(sig)}\n                    </th>\n                ))\n            }\n            </tr>\n            </thead>\n            <tbody>\n            {\n                tuples.map((tuple: AlloyTuple) => {\n\n                    const skolems = tuple.skolems();\n\n                    if (props.highlightSkolems && skolems.length) {\n\n                        const colors = skolems.map(s => props.skolemColors.get(s) || '');\n\n                        return (\n                            <PopoverRow\n                                key={tuple.id()}\n                                content={SkolemListPopover(skolems, colors)}\n                                colors={colors}>\n                                {\n                                    tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                        <td key={tuple.id() + '[' + i + ']'}>\n                                            {atom.name()}\n                                        </td>\n                                    ))\n                                }\n                            </PopoverRow>\n                        );\n\n                    } else {\n\n                        return (\n                            <tr key={tuple.id()}>\n                                {\n                                    tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                        <td key={tuple.id() + '[' + i + ']'}>\n                                            {atom.name()}\n                                        </td>\n                                    ))\n                                }\n                            </tr>\n                        )\n\n                    }\n\n                })\n            }\n            </tbody>\n        </HTMLTable>\n    )\n\n}\n","import { HTMLTable } from '@blueprintjs/core';\nimport {\n    AlloyAtom,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem,\n    AlloyTuple\n} from 'alloy-ts';\nimport React from 'react';\n\nexport interface ISkolemHTMLTableProps {\n    nameFunction: (item: AlloySignature | AlloyField | AlloySkolem) => string,\n    skolem: AlloySkolem\n}\n\nexport default function SkolemHTMLTable (props: ISkolemHTMLTableProps) {\n\n    const types: AlloySignature[] = props.skolem.types();\n    const tuples: AlloyTuple[] = props.skolem.tuples();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <thead>\n            <tr>\n            {\n                types.map((sig: AlloySignature, i: number) => (\n                    <th key={sig.id() + i}>\n                        {props.nameFunction(sig)}\n                    </th>\n                ))\n            }\n            </tr>\n            </thead>\n            <tbody>\n            {\n                tuples.map((tuple: AlloyTuple) => (\n                    <tr key={tuple.id()}>\n                        {\n                            tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                <td key={tuple.id() + '[' + i + ']'}>\n                                    {atom.name()}\n                                </td>\n                            ))\n                        }\n                    </tr>\n                ))\n            }\n            </tbody>\n        </HTMLTable>\n    );\n\n}\n","import {\n    Button,\n    Classes,\n    Navbar,\n    NavbarDivider,\n    NavbarHeading,\n    Tag\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../rootReducer';\nimport { SterlingConnection } from './SterlingConnection';\nimport { setMainView } from './sterlingSlice';\n\n// Map redux state to navbar props\nconst mapState = (state: RootState) => ({\n    view: state.sterlingSlice.mainView\n});\n\n// Actions\nconst mapDispatch = {\n    setMainView\n};\n\n// Connect the two\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\n// Create a props type for things from redux\ntype SterlingNavbarReduxProps = ConnectedProps<typeof connector>;\n\n// Create a combined type for all props\nexport type SterlingNavbarProps = SterlingNavbarReduxProps & {\n    connection: SterlingConnection\n}\n\n// Create an interface for the state\ninterface ISterlingNavbarState {\n    command: string\n    connected: boolean\n    ready: boolean\n}\n\nclass SterlingNavbar extends React.Component<SterlingNavbarProps, ISterlingNavbarState> {\n\n    constructor (props: SterlingNavbarProps) {\n\n        super(props);\n\n        this.state = {\n            command: '',\n            connected: false,\n            ready: false\n        }\n\n    }\n\n    componentDidMount (): void {\n\n        const connection = this.props.connection;\n\n        connection\n            .addEventListener('connect', () => {\n                this.setState({ connected: true });\n            })\n            .addEventListener('disconnect', () => {\n                this.setState({ connected: false, ready: false });\n            })\n            .addEventListener('instance', event => {\n                this.setState({\n                    command: event.instance.command(),\n                    ready: this.state.connected\n                });\n            });\n\n    }\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n        const state = this.state;\n\n        return (\n            <Navbar fixedToTop className={'nav bp3-dark'}>\n                <Navbar.Group>\n                    <NavbarHeading className={'nav-heading'}>\n                        Sterling\n                    </NavbarHeading>\n                    <NavbarDivider/>\n                    <Button\n                        active={props.view === 'graph'}\n                        className={Classes.MINIMAL}\n                        icon={'graph'}\n                        large={true}\n                        text={'Graph'}\n                        onClick={() => props.setMainView('graph')}\n                    />\n                    <Button\n                        active={props.view === 'table'}\n                        className={Classes.MINIMAL}\n                        icon={'th'}\n                        large={true}\n                        text={'Table'}\n                        onClick={() => props.setMainView('table')}\n                    />\n                    <Button\n                        active={props.view === 'source'}\n                        className={Classes.MINIMAL}\n                        icon={'document'}\n                        large={true}\n                        text={'Source'}\n                        onClick={() => props.setMainView('source')}\n                        />\n                    <NavbarDivider/>\n                </Navbar.Group>\n                <Navbar.Group className={'collapsing'}>\n                    {\n                        state.command.length > 0 &&\n                        <>\n                            <Tag minimal={true}>\n                                {state.command}\n                            </Tag>\n                        </>\n                    }\n                    <NavbarDivider/>\n                    <Button disabled={!state.ready}\n                            intent={state.connected ? 'success' : 'danger'}\n                            large={true}\n                            onClick={this._requestNext}\n                            rightIcon={'circle-arrow-right'}\n                            text={'Next'}\n                    />\n                </Navbar.Group>\n            </Navbar>\n        )\n\n    }\n\n    private _requestNext = () => {\n\n        this.props.connection.requestNextInstance();\n\n    }\n\n}\n\nexport default connector(SterlingNavbar);\n","import {\n    Button,\n    IconName,\n    Intent,\n    MaybeElement,\n    Position,\n    Tooltip\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../rootReducer';\nimport {\n    setGraphView,\n    setMainView,\n    setSourceView,\n    setTableView\n} from './sterlingSlice';\n\n// Map redux state to sidebar props\nconst mapState = (state: RootState) => ({\n    ...state.sterlingSlice,\n});\n\n// Actions\nconst mapDispatch = {\n    setGraphView,\n    setMainView,\n    setSourceView,\n    setTableView\n};\n\n// Connect the two\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\n// Create props\nexport type SterlingSidebarProps = ConnectedProps<typeof connector>;\n\n// Sidebar button component props\ninterface SidebarButtonProps {\n    active: boolean\n    click: () => void\n    icon: IconName | MaybeElement\n    text: string\n}\n\n// A sidebar button\nconst SidebarButton: React.FunctionComponent<SidebarButtonProps> = props => (\n    <Tooltip\n        content={<span>{props.text}</span>}\n        hoverOpenDelay={500}\n        intent={Intent.PRIMARY}\n        position={Position.RIGHT}>\n        <Button\n            icon={props.icon}\n            minimal={true}\n            large={true}\n            active={props.active}\n            onClick={props.click}/>\n    </Tooltip>\n);\n\n// The sidebar view\nconst SterlingSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n\n    const mainview = props.mainView;\n    const evalActive =\n        (mainview === 'graph' && props.graphView === 'evaluator') ||\n        (mainview === 'table' && props.tableView === 'evaluator') ||\n        (mainview === 'source' && props.sourceView === 'evaluator');\n\n    return (\n        <div className={'sidebar nav bp3-dark'}>\n            {\n                mainview === 'graph' ? <GraphSidebar {...props}/> :\n                mainview === 'table' ? <TableSidebar {...props}/> :\n                mainview === 'source' ? <SourceSidebar {...props}/> :\n                null\n            }\n            <div className={'divider'}/>\n            <SidebarButton\n                active={evalActive}\n                click={() => {\n                    if (mainview === 'graph') props.setGraphView('evaluator');\n                    if (mainview === 'table') props.setTableView('evaluator');\n                    if (mainview === 'source') props.setSourceView('evaluator');\n                }}\n                icon={'console'}\n                text={'Evaluator'}/>\n        </div>\n    );\n\n};\n\n// The graph sidebar section\nconst GraphSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n\n    const view = props.graphView;\n\n    return (\n        <>\n            <SidebarButton\n                active={view === 'node'}\n                click={() => props.setGraphView('node')}\n                icon={'group-objects'}\n                text={'Projections and Node Styling'}/>\n            <SidebarButton\n                active={view === 'edge'}\n                click={() => props.setGraphView('edge')}\n                icon={'flows'}\n                text={'Edge Styling'}/>\n            <SidebarButton\n                active={view === 'layout'}\n                click={() => props.setGraphView('layout')}\n                icon={'layout-auto'}\n                text={'Layout'}/>\n            <SidebarButton\n                active={view === 'settings'}\n                click={() => props.setGraphView('settings')}\n                icon={'settings'}\n                text={'Graph Settings'}/>\n        </>\n    );\n\n};\n\nconst TableSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n    return (\n        <SidebarButton\n            active={props.tableView === 'settings'}\n            click={() => props.setTableView('settings')}\n            icon={'settings'}\n            text={'Table Settings'}/>\n    );\n};\n\nconst SourceSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n    return (\n        <SidebarButton\n            active={props.sourceView === 'files'}\n            click={() => props.setSourceView('files')}\n            icon={'document'}\n            text={'Model Sources'}/>\n    )\n};\n\nexport default connector(SterlingSidebar);\n","import React from 'react';\n\nclass SterlingStage extends React.Component {\n\n    render (): React.ReactNode {\n\n        return (\n            <div className={'stage'}>\n                { this.props.children }\n            </div>\n        );\n\n    }\n\n}\n\nexport default SterlingStage;\n","import { FocusStyleManager, ResizeSensor } from '@blueprintjs/core';\nimport { AlloyInstance } from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport SplitPane from 'react-split-pane';\nimport { Evaluator } from '../evaluator/Evaluator';\nimport EvaluatorView, { IEvaluatorProps } from '../evaluator/EvaluatorView';\nimport GraphDrawer from '../features/graph/GraphDrawer';\nimport GraphStage from '../features/graph/GraphStage';\nimport SourceDrawer from '../features/source/SourceDrawer';\nimport SourceStage from '../features/source/SourceStage';\nimport TableDrawer from '../features/table/TableDrawer';\nimport TableStage from '../features/table/TableStage';\nimport { RootState } from '../rootReducer';\nimport { SterlingConnection } from './SterlingConnection';\nimport SterlingDrawer from './SterlingDrawer';\nimport SterlingNavbar from './SterlingNavbar';\nimport SterlingSidebar from './SterlingSidebar';\nimport { setInstance } from './sterlingSlice';\nimport SterlingStage from './SterlingStage';\n\n\nFocusStyleManager.onlyShowFocusOnTabs();\n\n// Map redux state to sterling props\nconst mapState = (state: RootState) => ({\n    graph: state.graphSlice.graphSlice.graph,\n    ...state.sterlingSlice\n});\n\n// Actions\nconst mapDispatch = {\n    setInstance\n};\n\n// Connector\nconst connector = connect(mapState, mapDispatch);\n\n// Create props type for things from redux\ntype SterlingReduxProps = ConnectedProps<typeof connector>;\n\n// Create combined type for all props\nexport type SterlingProps = SterlingReduxProps & {\n    connection: SterlingConnection\n}\n\ninterface ISterlingState {\n    instance: AlloyInstance | null\n}\n\nclass Sterling extends React.Component<SterlingProps, ISterlingState> {\n\n    private readonly _evaluator: Evaluator;\n    private readonly _evaluatorView: React.ComponentType<IEvaluatorProps>;\n\n    constructor (props: SterlingProps) {\n\n        super(props);\n\n        this._evaluator = new Evaluator(props.connection);\n        this._evaluatorView = EvaluatorView;\n\n        this.state = {\n            instance: null\n        };\n\n    }\n\n    componentDidMount (): void {\n\n        this._initializeConnection();\n\n    }\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n        const drawerOpen =\n            (props.mainView === 'graph' && props.graphView !== null) ||\n            (props.mainView === 'table' && props.tableView !== null) ||\n            (props.mainView === 'source' && props.sourceView !== null);\n\n        return (\n            <ResizeSensor onResize={this._resize}>\n                <div className={'sterling'}>\n                    <SterlingNavbar connection={props.connection}/>\n                    <SterlingSidebar/>\n                    {\n                        !drawerOpen\n                            ? this._getStage()\n                            : (\n                                <SplitPane\n                                    split={'vertical'}\n                                    defaultSize={350}\n                                    minSize={150}\n                                    maxSize={-150}\n                                    onChange={this._resize}\n                                >\n                                    { this._getDrawer() }\n                                    { this._getStage() }\n                                </SplitPane>\n                            )\n                    }\n                </div>\n            </ResizeSensor>\n        )\n\n    }\n\n    private _getDrawer = (): React.ReactNode => {\n\n        const props = this.props;\n        const Evaluator = this._evaluatorView;\n        const evalActive =\n            (props.mainView === 'graph' && props.graphView === 'evaluator') ||\n            (props.mainView === 'table' && props.tableView === 'evaluator') ||\n            (props.mainView === 'source' && props.sourceView === 'evaluator');\n\n        return <SterlingDrawer>\n            {\n                evalActive\n                    ?\n                        <Evaluator evaluator={this._evaluator}/>\n                    :\n                        props.mainView === 'graph' ? <GraphDrawer/> :\n                        props.mainView === 'table' ? <TableDrawer/> :\n                        props.mainView === 'source' ? <SourceDrawer/> :\n                        null\n\n            }\n        </SterlingDrawer>;\n\n    };\n\n    private _getStage = (): React.ReactNode => {\n\n        const view = this.props.mainView;\n\n        return (\n            <SterlingStage>\n                {\n                    view === 'table' ? <TableStage/> :\n                    view === 'graph' ? <GraphStage/> :\n                    view === 'source' ? <SourceStage/> : null\n                }\n            </SterlingStage>\n        )\n\n    };\n\n    private _initializeConnection = (): void => {\n\n        const connection = this.props.connection;\n\n        connection.addEventListener('connect', () => {\n            connection.requestCurrentInstance();\n        });\n\n        connection.addEventListener('instance', event => {\n            this.props.setInstance(event.instance);\n        });\n\n        // connection\n        //     .on('connect', () => {\n        //         connection.request('current');\n        //     })\n        //     .on('instance', (instance: AlloyInstance) => {\n        //         this.props.setInstance(instance);\n        //     });\n\n        connection.connect();\n\n    };\n\n    private _resize = (): void => {\n\n        this.props.graph.resize();\n\n    }\n\n}\n\nexport default connector(Sterling);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from '@reduxjs/toolkit';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { AlloyConnection } from './connections/AlloyConnection';\nimport { ForgeConnection } from './connections/ForgeConnection';\nimport { sterlingApp } from './rootReducer';\nimport Sterling from './sterling/Sterling';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.scss';\n\nconst connection = process.env.REACT_APP_FORGE_BUILD\n    ? new ForgeConnection()\n    : new AlloyConnection();\nconst store = createStore(sterlingApp);\n\nReactDOM.render(\n    <Provider store={store}>\n        <Sterling connection={connection}/>\n    </Provider>,\n    document.getElementById('root'))\n;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}