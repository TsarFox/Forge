#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 62 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 110 172 255 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 110 172 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 12 255 198 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 12 255 198 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 159 255 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 159 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 222 157 0 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 222 157 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 3262 0 31 3 16 #"#lang forge/core"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 34 #"; Desugaring functions for Amalgam"
0 0 27 29 1 #"\n"
0 0 18 3 59
#"; (full AST) -> (restricted AST without stuff like implies)"
0 0 27 29 1 #"\n"
0 0 18 3 53 #";    Note: These functions maintain an environment of"
0 0 27 29 1 #"\n"
0 0 18 3 54 #";    quantified variables to aid general functionality"
0 0 27 29 1 #"\n"
0 0 18 3 50 #"; We are bringing the input into our core language"
0 0 27 29 1 #"\n"
0 0 18 3 34 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 40 #"; Warning: ast.rkt exports (e.g.) \"and\"."
0 0 27 29 1 #"\n"
0 0 18 3 51 #"; This is the macro that produces an \"and\" formula!"
0 0 27 29 1 #"\n"
0 0 18 3 34 #"; To use real Racket and, use @and"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 20 3 32 #"\"../lift-bounds/lift-bounds.rkt\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 20 3 21 #"\"desugar_helpers.rkt\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 20 3 32 #"\"../substitutor/substitutor.rkt\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"provide"
0 0 27 3 1 #" "
0 0 14 3 14 #"desugarFormula"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 14 3 10 #"debug/repl"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 2 #" ("
0 0 14 3 9 #"prefix-in"
0 0 27 3 1 #" "
0 0 14 3 1 #"@"
0 0 27 3 1 #" "
0 0 14 3 6 #"racket"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 2 #" ("
0 0 14 3 9 #"prefix-in"
0 0 27 3 1 #" "
0 0 14 3 1 #"@"
0 0 27 3 2 #" ("
0 0 14 3 7 #"only-in"
0 0 27 3 1 #" "
0 0 14 3 6 #"racket"
0 0 27 3 1 #" "
0 0 14 3 2 #"->"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 18 3 25 #";;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 53 #"; This costs a great deal, but forces a noisy failure"
0 0 27 29 1 #"\n"
0 0 18 3 27 #";  Disable for \"production\""
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"SANITYCHECK"
0 0 27 3 1 #" "
0 0 24 3 2 #"#t"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 5 #"DEBUG"
0 0 27 3 1 #" "
0 0 24 3 2 #"#t"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 71
(4
 #"; input: formula - the current formula being desugared into simpler "
 #"AST"
) 0 0 27 29 1 #"\n"
0 0 18 3 41 #";        quantVars - quantified variables"
0 0 27 29 1 #"\n"
0 0 18 3 52 #";        runContext - the context of the current run"
0 0 27 29 1 #"\n"
0 0 18 3 62
#";        currSign - the currentSign used for desugaring of NOT"
0 0 27 29 1 #"\n"
0 0 18 3 1 #";"
0 0 27 29 1 #"\n"
0 0 18 3 69
(5
 #"; output: recursively creates restricted AST of the formula passed i"
 #"n"
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 15 #"define/contract"
0 0 27 3 2 #" ("
0 0 14 3 14 #"desugarFormula"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"@->"
0 0 27 3 1 #" "
0 0 14 3 13 #"node/formula?"
0 0 27 3 1 #" "
0 0 14 3 5 #"list?"
0 0 27 3 1 #" "
0 0 14 3 10 #"forge:Run?"
0 0 27 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 27 3 2 #" ("
0 0 14 3 4 #"or/c"
0 0 27 3 1 #" "
0 0 14 3 13 #"node/formula?"
0 0 27 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"when"
0 0 27 3 1 #" "
0 0 14 3 5 #"DEBUG"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 51 #"\"~n---- desugarFormula called (sign=~a) with: ~a~n\""
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 38 #"; Constant formulas: already at bottom"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 21 #"node/formula/constant"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 4 #"type"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 26 #"node/formula/constant-type"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 14 3 4 #"true"
0 0 27 3 2 #") "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 4 #"true"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 15 #"constantFormula"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 26 #"node/formula/constant-type"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 14 3 5 #"false"
0 0 27 3 2 #") "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 5 #"false"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 15 #"constantFormula"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 26 #"node/formula/constant-type"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 14 3 4 #"true"
0 0 27 3 3 #") ("
0 0 14 3 3 #"not"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 5 #"false"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 15 #"constantFormula"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 26 #"node/formula/constant-type"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 14 3 5 #"false"
0 0 27 3 3 #") ("
0 0 14 3 3 #"not"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 4 #"true"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 15 #"constantFormula"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 15 #"constantFormula"
0 0 27 3 4 #")])]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 42 #"; operator formula (and, or, implies, ...)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 15 #"node/formula/op"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 16 #"desugarFormulaOp"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 39 #"; multiplicity formula (some, one, ...)"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 86
(6
 #"; desugar some e to quantified fmla some x_fresh : union(upperbound("
 #"e)) | x_fresh in e"
) 0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 25 #"node/formula/multiplicity"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 4 #"mult"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 5 #"arity"
0 0 27 3 2 #" ("
0 0 14 3 15 #"node/expr-arity"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"newDecls"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 10 #"build-list"
0 0 27 3 1 #" "
0 0 14 3 5 #"arity"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 28 #"                           ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"currColExpr"
0 0 27 3 2 #" ("
0 0 14 3 14 #"getGivenColumn"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 1 #" "
0 0 14 3 5 #"arity"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 28 #"                           ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"uppers"
0 0 27 3 2 #" ("
0 0 14 3 14 #"liftBoundsExpr"
0 0 27 3 1 #" "
0 0 14 3 11 #"currColExpr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 28 #"                           ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 15 #"union-of-bounds"
0 0 27 29 1 #"\n"
0 0 27 3 30 #"                             ("
0 0 14 3 6 #"+/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 3 #"tup"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 50 #"                                                 ("
0 0 14 3 8 #"tup2Expr"
0 0 27 3 1 #" "
0 0 14 3 3 #"tup"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 3 #")) "
0 0 14 3 6 #"uppers"
0 0 27 3 4 #"))) "
0 0 27 29 1 #"\n"
0 0 27 3 28 #"                           ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 24 #"node/expr/quantifier-var"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 2 #" ("
0 0 14 3 6 #"gensym"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"m2q\""
0 0 27 3 3 #")) "
0 0 14 3 15 #"union-of-bounds"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 18 #"productOfFreshVars"
0 0 27 3 2 #" ("
0 0 14 3 7 #"->/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 1 #" "
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 8 #"newDecls"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 10 #"newFormula"
0 0 27 3 2 #" ("
0 0 14 3 7 #"in/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 18 #"productOfFreshVars"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 23 #"node/formula/quantified"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 4 #"mult"
0 0 27 3 1 #" "
0 0 14 3 8 #"newDecls"
0 0 27 3 1 #" "
0 0 14 3 10 #"newFormula"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 14 3 19 #"multiplicityFormula"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 50 #"; quantified formula (some x : ... or all x : ...)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 23 #"node/formula/quantified"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 10 #"quantifier"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 1 #" "
0 0 14 3 7 #"subForm"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 71
(7
 #"; In the case where the quantifier is not a 'some or 'all, desugar i"
 #"nto"
) 0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 12 #"; somes/alls"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 2 #"or"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 10 #"quantifier"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"some"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 22 #"                     ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 10 #"quantifier"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"all"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"              "
0 0 18 3 54 #"; no x: A | r.x in q ------> all x: A | not (r.x in q)"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"              [("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 10 #"quantifier"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 2 #"no"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"               ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 14 #"negatedFormula"
0 0 27 3 2 #" ("
0 0 14 3 6 #"!/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 7 #"subForm"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 23 #"node/formula/quantified"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"all"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 1 #" "
0 0 14 3 14 #"negatedFormula"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 24 3 1 #"'"
0 0 14 3 19 #"noQuantifierFormula"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"              "
0 0 18 3 29 #"; one x: A | r.x in q ------>"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"              "
0 0 18 3 61
#";    (some x: A | r.x in q and (all y: A-x | not (r.x in q)))"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"              [("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 10 #"quantifier"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"one"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"               ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 14 #"negatedFormula"
0 0 27 3 2 #" ("
0 0 14 3 6 #"!/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 7 #"subForm"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"               ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 15 #"subtractedDecls"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                 ("
0 0 14 3 6 #"-/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"               ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 16 #"quantifiedVarOne"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                 ("
0 0 14 3 24 #"node/expr/quantifier-var"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 15 #"node/expr-arity"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 5 #"))) ("
0 0 14 3 6 #"gensym"
0 0 27 3 1 #" "
0 0 20 3 11 #"\"quantiOne\""
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"               ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"newDecls"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 16 #"quantifiedVarOne"
0 0 27 3 1 #" "
0 0 14 3 15 #"subtractedDecls"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"               ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 15 #"newQuantFormRHS"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                 ("
0 0 14 3 23 #"node/formula/quantified"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"all"
0 0 27 3 1 #" "
0 0 14 3 8 #"newDecls"
0 0 27 3 1 #" "
0 0 14 3 14 #"negatedFormula"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"               "
0 0 27 29 1 #"\n"
0 0 27 3 15 #"               "
0 0 18 3 27 #"; Put LHS and RHS together "
0 0 27 29 1 #"\n"
0 0 27 3 16 #"               ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 12 #"desugaredAnd"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                 ("
0 0 14 3 7 #"&&/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 7 #"subForm"
0 0 27 3 1 #" "
0 0 14 3 15 #"newQuantFormRHS"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 23 #"node/formula/quantified"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"some"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 1 #" "
0 0 14 3 12 #"desugaredAnd"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 24 3 1 #"'"
0 0 14 3 20 #"oneQuantifierFormula"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"              "
0 0 18 3 30 #"; lone x: A | r.x in q ------>"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"              "
0 0 18 3 49 #";   (no x: A | r.x in q) or (one x: A | r.x in q)"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"              [("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 10 #"quantifier"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"lone"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"               ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 15 #"newQuantFormLHS"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                 ("
0 0 14 3 23 #"node/formula/quantified"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 2 #"no"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 1 #" "
0 0 14 3 7 #"subForm"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"               ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 15 #"newQuantFormRHS"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                 ("
0 0 14 3 23 #"node/formula/quantified"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"one"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 1 #" "
0 0 14 3 7 #"subForm"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 7 #"||/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 15 #"newQuantFormLHS"
0 0 27 3 1 #" "
0 0 14 3 15 #"newQuantFormRHS"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 24 3 1 #"'"
0 0 14 3 21 #"loneQuantifierFormula"
0 0 27 3 4 #")])]"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"           "
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ["
0 0 14 3 4 #"else"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 14 #"createNewQuant"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 7 #"subForm"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 10 #"quantifier"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 14 3 17 #"quantifiedFormula"
0 0 27 3 6 #")])]))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 27 29 1 #"\n"
0 0 18 3 84
(8
 #"; Debug mode will evaluate the formula in the latest instance produc"
 #"ed by runContext"
) 0 0 27 29 1 #"\n"
0 0 18 3 47 #";   expecting the same result (modulo currSign)"
0 0 27 29 1 #"\n"
0 0 18 3 64
#"; NOTE WELL: this is always with respect to the latest instance."
0 0 27 29 1 #"\n"
0 0 18 3 114
(9
 #";  If we fix the evaluator to work with arbitrary instances, we'll n"
 #"eed to adapt this to take an instance or #f.  "
) 0 0 27 29 1 #"\n"
0 0 18 3 20 #";  (when SANITYCHECK"
0 0 27 29 1 #"\n"
0 0 18 3 33 #";    (unless (equal? (if currSign"
0 0 27 29 1 #"\n"
0 0 18 3 62
#";                        (evaluate runContext 'unused formula)"
0 0 27 29 1 #"\n"
0 0 18 3 69
(10
 #";                        (not (evaluate runContext 'unused formula))"
 #")"
) 0 0 27 29 1 #"\n"
0 0 18 3 65
#";                    (evaluate runContext 'unused resultFormula))"
0 0 27 29 1 #"\n"
0 0 18 3 159
(11
 #";      (error (format \"desugarFormula would have produced a formula"
 #" (sign=~a) with a different meaning in the latest instance.~nCalled "
 #"with:~a~nProduced: ~a~n\""
) 0 0 27 29 1 #"\n"
0 0 18 3 56 #";                     currSign formula resultFormula))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 71 4 0 0 27 29 1 #"\n"
0 0 18 3 41 #";        quantVars - quantified variables"
0 0 27 29 1 #"\n"
0 0 18 3 52 #";        runContext - the context of the current run"
0 0 27 29 1 #"\n"
0 0 18 3 62
#";        currSign - the currentSign used for desugaring of NOT"
0 0 27 29 1 #"\n"
0 0 18 3 62
#";        args - a list of the arguments of the current formula"
0 0 27 29 1 #"\n"
0 0 18 3 79
(12
 #";        currTupIfAtomic - the tuple containing the implicit LHS of "
 #"the current"
) 0 0 27 29 1 #"\n"
0 0 18 3 31 #";                          \"in\""
0 0 27 29 1 #"\n"
0 0 18 3 45 #";        info - the info of the original node"
0 0 27 29 1 #"\n"
0 0 18 3 1 #";"
0 0 27 29 1 #"\n"
0 0 18 3 77
(13
 #"; output: This function is recursively calling every element in args"
 #" and pass"
) 0 0 27 29 1 #"\n"
0 0 18 3 41 #"; it to the original recursive function. "
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 15 #"define/contract"
0 0 27 3 2 #" ("
0 0 14 3 16 #"desugarFormulaOp"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 29 1 #"\n"
0 0 27 3 35 #"                                   "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"@->"
0 0 27 3 1 #" "
0 0 14 3 13 #"node/formula?"
0 0 27 3 1 #" "
0 0 14 3 5 #"list?"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 4 #"or/c"
0 0 27 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 27 3 1 #" "
0 0 14 3 13 #"node/formula?"
0 0 27 3 3 #") ("
0 0 14 3 6 #"listof"
0 0 27 3 1 #" "
0 0 14 3 10 #"node/expr?"
0 0 27 3 3 #") ("
0 0 14 3 6 #"listof"
0 0 27 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"       "
0 0 14 3 10 #"forge:Run?"
0 0 27 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 27 3 7 #"       "
0 0 27 29 1 #"\n"
0 0 27 3 7 #"       "
0 0 14 3 9 #"nodeinfo?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 27 3 2 #" ("
0 0 14 3 4 #"or/c"
0 0 27 3 1 #" "
0 0 14 3 13 #"node/formula?"
0 0 27 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 9 #"; IMPLIES"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 19 #"node/formula/op/=>?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 57 #"; The desugared version of IMPLIES is: (not LHS) OR (RHS)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"ante"
0 0 27 3 2 #" ("
0 0 14 3 6 #"!/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"conseq"
0 0 27 3 2 #" ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 7 #"||/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 4 #"ante"
0 0 27 3 1 #" "
0 0 14 3 6 #"conseq"
0 0 27 3 3 #")) "
0 0 24 3 1 #"'"
0 0 14 3 14 #"impliesFormula"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 18 #"; IN (atomic fmla)"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 74
(14
 #"; This function has two cases, the ground case and the case where we"
 #" build"
) 0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 25 #"; an and-of-implications."
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 35 #"; Some examples can be seen below: "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 73
(15
 #";     Node0->Node1 in ^ edges   <--- this is a ground case of IN! we"
 #" know"
) 0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 75
(16
 #";     the current tuplen Node0->Node1 + Node1->Node2 in ^edges <--- "
 #"need to"
) 0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 75
(17
 #";     turn into an and-of-implications edges in ~edges <--- same dea"
 #"l, need"
) 0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 37 #";     to build an and-of-implications"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 19 #"node/formula/op/in?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 5 #"leftE"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"rightE"
0 0 27 3 2 #" ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 72
(18
 #"; We don't yet know which relation's bounds will be needed, so just "
 #"pass"
) 0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 13 #"; them all in"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 17 #"liftedUpperBounds"
0 0 27 3 2 #" ("
0 0 14 3 14 #"liftBoundsExpr"
0 0 27 3 2 #"  "
0 0 14 3 5 #"leftE"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 10 #"runContext"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 15 #"isGroundProduct"
0 0 27 3 1 #" "
0 0 14 3 5 #"leftE"
0 0 27 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 17 #"liftedUpperBounds"
0 0 27 3 2 #") "
0 0 24 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 18 3 70
(19
 #"; ground case. we have a currentTuple now, and want to desugar the R"
 #"HS"
) 0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 11 #"desugarExpr"
0 0 27 3 1 #" "
0 0 14 3 6 #"rightE"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 29 1 #"\n"
0 0 27 3 22 #"                     ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 17 #"liftedUpperBounds"
0 0 27 3 2 #") "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 18 3 63
#"; build a big \"and\" of: for every tuple T in liftedUpperBounds:"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 18 3 36 #"; (T in leftE) implies (T in rightE)"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 12 #"desugaredAnd"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 7 #"&&/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 32 #"                               ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 7 #"tupExpr"
0 0 27 29 1 #"\n"
0 0 27 3 34 #"                                 ("
0 0 14 3 8 #"tup2Expr"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 32 #"                               ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"LHS"
0 0 27 29 1 #"\n"
0 0 27 3 34 #"                                 ("
0 0 14 3 7 #"in/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 7 #"tupExpr"
0 0 27 3 1 #" "
0 0 14 3 5 #"leftE"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 32 #"                               ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"RHS"
0 0 27 29 1 #"\n"
0 0 27 3 34 #"                                 ("
0 0 14 3 7 #"in/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 7 #"tupExpr"
0 0 27 3 1 #" "
0 0 14 3 6 #"rightE"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 32 #"                               ("
0 0 14 3 7 #"=>/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 3 #"LHS"
0 0 27 3 1 #" "
0 0 14 3 3 #"RHS"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 29 #"                             "
0 0 14 3 17 #"liftedUpperBounds"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 12 #"desugaredAnd"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 17 #"ungroundINFormula"
0 0 27 3 4 #")])]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 9 #"; EQUALS "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 18 #"node/formula/op/=?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 67
#"; The desugared version of EQUALS is: (LHS in RHS) AND (RHS in LHS)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"LHS"
0 0 27 3 2 #" ("
0 0 14 3 7 #"in/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #") ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"RHS"
0 0 27 3 2 #" ("
0 0 14 3 7 #"in/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #") ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 7 #"&&/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 3 #"LHS"
0 0 27 3 1 #" "
0 0 14 3 3 #"RHS"
0 0 27 3 3 #")) "
0 0 24 3 1 #"'"
0 0 14 3 13 #"equalsFormula"
0 0 27 3 3 #")] "
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 11 #"; INTEGER >"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 21 #"node/formula/op/int>?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 33 #"\"amalgam: int > not supported ~n\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 11 #"; INTEGER <"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 21 #"node/formula/op/int<?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 33 #"\"amalgam: int < not supported ~n\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 11 #"; INTEGER ="
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 21 #"node/formula/op/int=?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 33 #"\"amalgam: int = not supported ~n\""
0 0 27 3 4 #")]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 71
(20
 #"; input: expr - the current expression being desugared into simpler "
 #"AST"
) 0 0 27 29 1 #"\n"
0 0 18 3 41 #";        quantVars - quantified variables"
0 0 27 29 1 #"\n"
0 0 18 3 52 #";        runContext - the context of the current run"
0 0 27 29 1 #"\n"
0 0 18 3 62
#";        currSign - the currentSign used for desugaring of NOT"
0 0 27 29 1 #"\n"
0 0 18 3 65
#";        args - a list of the arguments of the current expression"
0 0 27 29 1 #"\n"
0 0 18 3 79 12 0 0 27 29 1 #"\n"
0 0 18 3 31 #";                          \"in\""
0 0 27 29 1 #"\n"
0 0 18 3 1 #";"
0 0 27 29 1 #"\n"
0 0 18 3 77
(21
 #"; output: This function is desugaring the current expression (return"
 #"s simpler"
) 0 0 27 29 1 #"\n"
0 0 18 3 41 #";         result of desugared expression)"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 15 #"define/contract"
0 0 27 3 2 #" ("
0 0 14 3 11 #"desugarExpr"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 18 3 63
#"; Error message to check that we are only taking in expressions"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"@->"
0 0 27 3 1 #" "
0 0 14 3 10 #"node/expr?"
0 0 27 3 1 #" "
0 0 14 3 5 #"list?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 27 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 27 3 2 #") "
0 0 14 3 10 #"forge:Run?"
0 0 27 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 27 3 2 #" ("
0 0 14 3 4 #"or/c"
0 0 27 3 1 #" "
0 0 14 3 13 #"node/formula?"
0 0 27 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"when"
0 0 27 3 1 #" "
0 0 14 3 5 #"DEBUG"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 58
#"\"~n---- desugarExpr called (sign=~a; tuple=~a) with: ~a~n\""
0 0 27 29 1 #"\n"
0 0 27 3 12 #"            "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 18 3 51 #"; Should always have a currTupIfAtomic when calling"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 20 #"mustHaveTupleContext"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"when"
0 0 27 3 2 #" ("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 3 #") ("
0 0 14 3 15 #"node/expr-arity"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 5 #"error"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 58
#"\"desugarExpr: current tuple had different arity: ~a vs ~a\""
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 27 #"; relation name (base case)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 18 #"node/expr/relation"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 5 #"arity"
0 0 27 3 1 #" "
0 0 14 3 4 #"name"
0 0 27 3 1 #" "
0 0 14 3 8 #"typelist"
0 0 27 3 1 #" "
0 0 14 3 6 #"parent"
0 0 27 3 1 #" "
0 0 14 3 5 #"isVar"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 7 #"in/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 8 #"tup2Expr"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #") "
0 0 14 3 4 #"expr"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 24 3 1 #"'"
0 0 14 3 16 #"relationNameExpr"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 18 #"; atom (base case)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 14 #"node/expr/atom"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 5 #"arity"
0 0 27 3 1 #" "
0 0 14 3 4 #"name"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 7 #"in/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 8 #"tup2Expr"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #") "
0 0 14 3 4 #"expr"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 24 3 1 #"'"
0 0 14 3 8 #"atomExpr"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 18 #"; The Int constant"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 18 #"node/expr/constant"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 7 #"in/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 8 #"tup2Expr"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #") "
0 0 14 3 4 #"expr"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 24 3 1 #"'"
0 0 14 3 15 #"intConstantExpr"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 28 #"; other expression constants"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 18 #"node/expr/constant"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 5 #"arity"
0 0 27 3 1 #" "
0 0 14 3 4 #"type"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 7 #"in/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 8 #"tup2Expr"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #") "
0 0 14 3 4 #"expr"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 24 3 1 #"'"
0 0 14 3 21 #"otherExprConstantExpr"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 41 #"; quantified variable (depends on scope!)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 24 #"node/expr/quantifier-var"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 5 #"arity"
0 0 27 3 1 #" "
0 0 14 3 3 #"sym"
0 0 27 3 6 #")     "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 20 3 64
#"\"amalgam: A quantified variable was passed into desugarExpr. ~n\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 14 #"; ^ base cases"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 54 #"; expression w/ operator (union, intersect, ~, etc...)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 12 #"node/expr/op"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 5 #"arity"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 13 #"desugarExprOp"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 50 #"; set comprehension e.g. {n : Node | some n.edges}"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 43 #"; t in {x0: A0, x1: A1, ... | fmla } means:"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 58
#";   t0 in A0 and t0 in A1 and ... fmla[t0/x0, t1/x1, ...] "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 23 #"node/expr/comprehension"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 3 #"len"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 1 #" "
0 0 14 3 4 #"form"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 32 #"; account for multiple variables"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"vars"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 1 #" "
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (["
0 0 14 3 9 #"quantVars"
0 0 27 3 2 #" ("
0 0 14 3 6 #"append"
0 0 27 3 1 #" "
0 0 14 3 4 #"vars"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 3 #")])"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"       "
0 0 18 3 15 #";  t0 in A0 ..."
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 13 #"LHSSubformula"
0 0 27 3 2 #" ("
0 0 14 3 25 #"setComprehensionAndHelper"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 29 1 #"\n"
0 0 27 3 56 #"                                                        "
0 0 14 3 5 #"decls"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"       "
0 0 18 3 25 #"; fmla[t0/x0, t1/x1, ...]"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 13 #"RHSSubformula"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 25 #"setComprehensionSubHelper"
0 0 27 3 1 #" "
0 0 14 3 4 #"form"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 29 1 #"\n"
0 0 27 3 36 #"                                    "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"       "
0 0 18 3 28 #"; Put both formulas together"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 4 #"list"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 7 #"&&/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 6 #"append"
0 0 27 3 1 #" "
0 0 14 3 13 #"LHSSubformula"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 13 #"RHSSubformula"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 24 3 1 #"'"
0 0 14 3 20 #"setComprehensionExpr"
0 0 27 3 5 #"))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 71 20 0 0 27 29 1 #"\n"
0 0 18 3 41 #";        quantVars - quantified variables"
0 0 27 29 1 #"\n"
0 0 18 3 52 #";        runContext - the context of the current run"
0 0 27 29 1 #"\n"
0 0 18 3 62
#";        currSign - the currentSign used for desugaring of NOT"
0 0 27 29 1 #"\n"
0 0 18 3 65
#";        args - a list of the arguments of the current expression"
0 0 27 29 1 #"\n"
0 0 18 3 79 12 0 0 27 29 1 #"\n"
0 0 18 3 31 #";                          \"in\""
0 0 27 29 1 #"\n"
0 0 18 3 45 #";        info - the info of the original node"
0 0 27 29 1 #"\n"
0 0 18 3 1 #";"
0 0 27 29 1 #"\n"
0 0 18 3 77 21 0 0 27 29 1 #"\n"
0 0 18 3 41 #";         result of desugared expression)"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 15 #"define/contract"
0 0 27 3 2 #" ("
0 0 14 3 13 #"desugarExprOp"
0 0 27 3 2 #"  "
0 0 14 3 4 #"expr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 29 1 #"\n"
0 0 27 3 33 #"                                 "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"@->"
0 0 27 3 1 #" "
0 0 14 3 10 #"node/expr?"
0 0 27 3 1 #" "
0 0 14 3 5 #"list?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 27 3 1 #" "
0 0 14 3 10 #"node/expr?"
0 0 27 3 3 #") ("
0 0 14 3 6 #"listof"
0 0 27 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"       "
0 0 14 3 10 #"forge:Run?"
0 0 27 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 27 3 1 #" "
0 0 14 3 9 #"nodeinfo?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 27 3 2 #" ("
0 0 14 3 4 #"or/c"
0 0 27 3 1 #" "
0 0 14 3 13 #"node/formula?"
0 0 27 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 20 #"mustHaveTupleContext"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 7 #"; UNION"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 64
#"; The desugared version of UNION is: (currTupIfAtomic in LHS) OR"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 26 #"; (currTupIfAtomic in RHS)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 15 #"node/expr/op/+?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 17 #"desugaredChildren"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 3 #"map"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 5 #"child"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 11 #"desugarExpr"
0 0 27 3 1 #" "
0 0 14 3 5 #"child"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 14 3 4 #"args"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 7 #"||/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 17 #"desugaredChildren"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 14 3 9 #"unionExpr"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 11 #"; SETMINUS "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 15 #"node/expr/op/-?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #") "
0 0 24 3 1 #"2"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 27 3 1 #"("
0 0 20 3 57
#"\"Setminus should not be given more than two arguments ~n\""
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 18 3 68
#"; The desugared version of SETMINUS is: (currTupIfAtomic in LHS) and"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 18 3 32 #";  (not(currTupIfAtomic in RHS))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 19 #"currTupIfAtomicExpr"
0 0 27 3 2 #" ("
0 0 14 3 8 #"tup2Expr"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"LHS"
0 0 27 3 2 #" ("
0 0 14 3 7 #"in/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 19 #"currTupIfAtomicExpr"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"RHS"
0 0 27 3 2 #" ("
0 0 14 3 6 #"!/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 7 #"in/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 29 1 #"\n"
0 0 27 3 49 #"                                                ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 19 #"currTupIfAtomicExpr"
0 0 27 29 1 #"\n"
0 0 27 3 55 #"                                                      ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 6 #"))))))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 18 3 71
(22
 #"; Create the final desugared version of SETMINUS by joining LHS and "
 #"RHS"
) 0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 18 3 14 #"; with an AND "
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 7 #"&&/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 3 #"LHS"
0 0 27 3 1 #" "
0 0 14 3 3 #"RHS"
0 0 27 3 3 #")) "
0 0 24 3 1 #"'"
0 0 14 3 12 #"setMinusExpr"
0 0 27 3 4 #")])]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 14 #"; INTERSECTION"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 15 #"node/expr/op/&?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 39 #"; map over all children of intersection"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 17 #"desugaredChildren"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 3 #"map"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 5 #"child"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 11 #"desugarExpr"
0 0 27 3 1 #" "
0 0 14 3 5 #"child"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 14 3 4 #"args"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 70
(23
 #"; The desugared version of INTERSECTION is: (currTupIfAtomic in CHIL"
 #"D)"
) 0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 32 #"; AND (currTupIfAtomic in CHILD)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 7 #"&&/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 17 #"desugaredChildren"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 14 3 16 #"intersectionExpr"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 9 #"; PRODUCT"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 16 #"node/expr/op/->?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 2 #"@>"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #") "
0 0 24 3 1 #"2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"newLHS"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"newRHS"
0 0 27 3 2 #" ("
0 0 14 3 7 #"->/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 10 #"newProduct"
0 0 27 3 2 #" ("
0 0 14 3 7 #"->/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 6 #"newLHS"
0 0 27 3 1 #" "
0 0 14 3 6 #"newRHS"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 11 #"desugarExpr"
0 0 27 3 1 #" "
0 0 14 3 10 #"newProduct"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"       "
0 0 18 3 27 #"; we are in the binary case"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 2 #"@="
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #") "
0 0 24 3 1 #"2"
0 0 27 3 13 #")            "
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 7 #"&&/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 13 #"productHelper"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #") ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 37 #"                                     "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"         "
0 0 24 3 1 #"'"
0 0 14 3 17 #"binaryProductExpr"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"       "
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 15 #"node/expr-arity"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 2 #") "
0 0 24 3 1 #"1"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 18 3 57 #"; if arity is 1, only call desugarExpr on the first thing"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 11 #"desugarExpr"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 21 #"                     "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 5 #"error"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 48 #"\"Expression ~a in product had arity less than 1\""
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 5 #"))])]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 6 #"; JOIN"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 18 #"node/expr/op/join?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 2 #"@>"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #") "
0 0 24 3 1 #"2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"len"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"newLHS"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"arityRHS"
0 0 27 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 27 3 1 #" "
0 0 14 3 10 #"join-arity"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 15 #"node/expr-arity"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 49 #"                                                ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"newRHS"
0 0 27 3 2 #" ("
0 0 14 3 9 #"join/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 7 #"newJoin"
0 0 27 3 2 #" ("
0 0 14 3 9 #"join/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 6 #"newLHS"
0 0 27 3 1 #" "
0 0 14 3 6 #"newRHS"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 11 #"desugarExpr"
0 0 27 3 1 #" "
0 0 14 3 7 #"newJoin"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #") "
0 0 24 3 1 #"2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"unless"
0 0 27 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 3 #") ("
0 0 14 3 15 #"node/expr-arity"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 64
#"\"The arity of the LHS doesn't match the size of currTupIfAtomic\""
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"UBA"
0 0 27 3 2 #" ("
0 0 14 3 14 #"liftBoundsExpr"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #") "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"UBB"
0 0 27 3 2 #" ("
0 0 14 3 14 #"liftBoundsExpr"
0 0 27 3 2 #" ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #") "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"allPairs"
0 0 27 3 2 #" ("
0 0 14 3 17 #"cartesian-product"
0 0 27 3 1 #" "
0 0 14 3 3 #"UBA"
0 0 27 3 1 #" "
0 0 14 3 3 #"UBB"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 7 #"newArgs"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 10 #"filter-map"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 5 #"lstpr"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 16 3 13 #"define-values"
0 0 27 3 2 #" ("
0 0 14 3 2 #"ta"
0 0 27 3 1 #" "
0 0 14 3 2 #"tb"
0 0 27 3 3 #") ("
0 0 14 3 6 #"values"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 5 #"lstpr"
0 0 27 3 3 #") ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 5 #"lstpr"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"             "
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"taExpr"
0 0 27 3 2 #" ("
0 0 14 3 8 #"tup2Expr"
0 0 27 3 1 #" "
0 0 14 3 2 #"ta"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"tbExpr"
0 0 27 3 2 #" ("
0 0 14 3 8 #"tup2Expr"
0 0 27 3 1 #" "
0 0 14 3 2 #"tb"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"               [("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 16 #"joinTupleDesugar"
0 0 27 3 1 #" "
0 0 14 3 2 #"ta"
0 0 27 3 1 #" "
0 0 14 3 2 #"tb"
0 0 27 3 2 #") "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 7 #"&&/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 29 1 #"\n"
0 0 27 3 32 #"                               ("
0 0 14 3 7 #"in/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 6 #"taExpr"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 32 #"                               ("
0 0 14 3 7 #"in/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 6 #"tbExpr"
0 0 27 3 2 #" ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 6 #")))))]"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 27 3 1 #" "
0 0 24 3 2 #"#f"
0 0 27 3 3 #"]))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"           "
0 0 14 3 8 #"allPairs"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 7 #"||/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 7 #"newArgs"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 14 3 8 #"joinExpr"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 45 #"\"Expression ~a in join had arity less than 1\""
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 5 #"))])]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 20 #"; TRANSITIVE CLOSURE"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 15 #"node/expr/op/^?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 32 #"; Write transitive closure case "
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 43 #";^e = e + e.e + e.e.e ... up to firstCol(e)"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 44 #"; #dots = #(UB(leftCol)+UB(rightCol)) - 1  ?"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 64
#"; #times-e-is-used-in-biggest-join = #(UB(leftCol)+UB(rightCol))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #" "
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 50 #"; get the upper bound to be called in extendResult"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"uppers"
0 0 27 3 2 #" ("
0 0 14 3 14 #"liftBoundsExpr"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 48 #"; build paths starting from LHS of current tuple"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 12 #"extendResult"
0 0 27 3 2 #" ("
0 0 14 3 19 #"extendPossiblePaths"
0 0 27 3 1 #" "
0 0 14 3 6 #"uppers"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 29 1 #"\n"
0 0 27 3 56 #"                                                       ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 55 #"; Check the endpoint and remove items that do not match"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"endPoint"
0 0 27 3 2 #" ("
0 0 14 3 4 #"last"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 78
(24
 #"; A list containing *paths* from (first currentTuple) to (second cur"
 #"rentTuple)"
) 0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 20 #"filteredExtendResult"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 6 #"filter"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 6 #"result"
0 0 27 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 4 #"last"
0 0 27 3 1 #" "
0 0 14 3 6 #"result"
0 0 27 3 2 #") "
0 0 14 3 8 #"endPoint"
0 0 27 3 3 #")) "
0 0 14 3 12 #"extendResult"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 65
#"; Go through everything in filteredExtendResult to create big AND"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 19 #"; by calling helper"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 20 #"filteredExtendResult"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 7 #"||/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 24 3 2 #"#f"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 14 3 21 #"transitiveClosureExpr"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 27 3 1 #" "
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 12 #"resultingAnd"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 4 #"path"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                 ("
0 0 14 3 20 #"transitiveClosureAnd"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                  "
0 0 14 3 4 #"path"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #") "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 5 #"())) "
0 0 14 3 20 #"filteredExtendResult"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 7 #"||/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 12 #"resultingAnd"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 14 3 21 #"transitiveClosureExpr"
0 0 27 3 4 #")])]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 30 #"; REFLEXIVE-TRANSITIVE CLOSURE"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 15 #"node/expr/op/*?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 17 #"transitiveClosure"
0 0 27 3 2 #" ("
0 0 14 3 6 #"^/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 17 #"desugaredRClosure"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 6 #"+/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 4 #"iden"
0 0 27 3 1 #" "
0 0 14 3 17 #"transitiveClosure"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 9 #"inFormula"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 7 #"in/info"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 8 #"tup2Expr"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 27 #"                           "
0 0 14 3 17 #"desugaredRClosure"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 9 #"inFormula"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 15 #"reflexiveTCExpr"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 11 #"; TRANSPOSE"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 15 #"node/expr/op/~?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 25 #"transposedCurrTupIfAtomic"
0 0 27 3 2 #" ("
0 0 14 3 12 #"transposeTup"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 11 #"desugarExpr"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #") "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 25 #"transposedCurrTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 68
#"; SINGLETON (typecast number to 1x1 relation with that number in it)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 18 #"node/expr/op/sing?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 40 #"\"amalgam: singleton is not supported ~n\""
0 0 27 3 4 #")]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 71 20 0 0 27 29 1 #"\n"
0 0 18 3 41 #";        quantVars - quantified variables"
0 0 27 29 1 #"\n"
0 0 18 3 52 #";        runContext - the context of the current run"
0 0 27 29 1 #"\n"
0 0 18 3 1 #";"
0 0 27 29 1 #"\n"
0 0 18 3 62
#"; output: amalgam does not support integer operations, so this"
0 0 27 29 1 #"\n"
0 0 18 3 26 #";         returns an error"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 10 #"desugarInt"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 14 #"; CONSTANT INT"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 17 #"node/int/constant"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 5 #"value"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 40 #"\"amalgam: constant int not supported ~n\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 47 #"; apply an operator to some integer expressions"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 11 #"node/int/op"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 12 #"desugarIntOp"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 18 #"; sum \"quantifier\""
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 29 #"; e.g. sum p : Person | p.age"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 18 #"node/int/sum-quant"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 1 #" "
0 0 14 3 7 #"intExpr"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 42 #"\"amalgam: sum quantifier not supported ~n\""
0 0 27 3 4 #")]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 71 20 0 0 27 29 1 #"\n"
0 0 18 3 41 #";        quantVars - quantified variables"
0 0 27 29 1 #"\n"
0 0 18 3 52 #";        runContext - the context of the current run"
0 0 27 29 1 #"\n"
0 0 18 3 62
#";        args - a list of the arguments of the current formula"
0 0 27 29 1 #"\n"
0 0 18 3 1 #";"
0 0 27 29 1 #"\n"
0 0 18 3 79
(25
 #"; output: amalgam does not support integer operations, so this retur"
 #"ns an error"
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"desugarIntOp"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantVars"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 14 #"; int addition"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 16 #"node/int/op/add?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 32 #"\"amalgam: int + not supported~n\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 17 #"; int subtraction"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 21 #"node/int/op/subtract?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 32 #"\"amalgam: int - not supported~n\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 20 #"; int multiplication"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 21 #"node/int/op/multiply?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 32 #"\"amalgam: int * not supported~n\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 14 #"; int division"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 19 #"node/int/op/divide?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 33 #"\"amalgam: int / not supported ~n\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 57 #"; int sum (also used as typecasting from relation to int)"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 32 #"; e.g. {1} --> 1 or {1, 2} --> 3"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 16 #"node/int/op/sum?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 31 #"\"amalgam: sum not supported ~n\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 27 #"; cardinality (e.g., #Node)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 17 #"node/int/op/card?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 39 #"\"amalgam: cardinality not supported ~n\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 18 #"; remainder/modulo"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 22 #"node/int/op/remainder?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 41 #"\"amalgam: int % (modulo) not supported~n\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 16 #"; absolute value"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 16 #"node/int/op/abs?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 34 #"\"amalgam: int abs not supported~n\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 9 #"; signOf "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 17 #"node/int/op/sign?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 37 #"\"amalgam: int signOf not supported~n\""
0 0 27 3 4 #")]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0           0
