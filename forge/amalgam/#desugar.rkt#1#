#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 61 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 110 172 255 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 110 172 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 12 255 198 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 12 255 198 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 159 255 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 159 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 222 157 0 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 222 157 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 2235 0 31 3 16 #"#lang forge/core"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 34 #"; Desugaring functions for Amalgam"
0 0 27 29 1 #"\n"
0 0 18 3 59
#"; (full AST) -> (restricted AST without stuff like implies)"
0 0 27 29 1 #"\n"
0 0 18 3 53 #";    Note: These functions maintain an environment of"
0 0 27 29 1 #"\n"
0 0 18 3 54 #";    quantified variables to aid general functionality"
0 0 27 29 1 #"\n"
0 0 18 3 50 #"; We are bringing the input into our core language"
0 0 27 29 1 #"\n"
0 0 18 3 34 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 40 #"; Warning: ast.rkt exports (e.g.) \"and\"."
0 0 27 29 1 #"\n"
0 0 18 3 51 #"; This is the macro that produces an \"and\" formula!"
0 0 27 29 1 #"\n"
0 0 18 3 35 #"; To use real Racket and, use @and."
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 20 3 17 #"\"lift-bounds.rkt\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 20 3 21 #"\"desugar_helpers.rkt\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"provide"
0 0 27 3 1 #" "
0 0 14 3 15 #"desugar-formula"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 25 #";;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 15 #"desugar-formula"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 38 #"; Constant formulas: already at bottom"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 21 #"node/formula/constant"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 4 #"type"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 14 3 7 #"formula"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 42 #"; operator formula (and, or, implies, ...)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 15 #"node/formula/op"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 60
#"; We want to pass in the currTupIfAtomic as the implicit LHS"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 18 #"desugar-formula-op"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #") "
0 0 14 3 4 #"info"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 40 #"; multiplicity formula (some, one, ...) "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 25 #"node/formula/multiplicity"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 4 #"mult"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 50 #"; create a new multiplicity formula with fields..."
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 25 #"node/formula/multiplicity"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 4 #"mult"
0 0 27 3 2 #" ("
0 0 14 3 12 #"desugar-expr"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 50 #"; quantified formula (some x : ... or all x : ...)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 23 #"node/formula/quantified"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 10 #"quantifier"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 1 #" "
0 0 14 3 4 #"form"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"var"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (["
0 0 14 3 9 #"quantvars"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 3 #"var"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 3 #")])"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 12 #"desugar-expr"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 3 #")) "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 6 #")     "
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 15 #"desugar-formula"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 4 #"form"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 12 #"\"quant ~a~n\""
0 0 27 3 1 #" "
0 0 14 3 10 #"quantifier"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 19 #"; truth and falsity"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ["
0 0 24 3 2 #"#t"
0 0 27 3 2 #" ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"true~n\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ["
0 0 24 3 2 #"#f"
0 0 27 3 2 #" ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 9 #"\"false~n\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    ))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 79
(4
 #"; This function is recursively calling every element in args and pas"
 #"s it to the"
) 0 0 27 29 1 #"\n"
0 0 18 3 31 #"; original recursive function. "
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 18 #"desugar-formula-op"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 6 #"; AND "
0 0 27 29 1 #"\n"
0 0 27 3 7 #"     [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 19 #"node/formula/op/&&?"
0 0 27 3 2 #") "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 7 #"\"and~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 13 #"desugaredArgs"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 15 #"desugar-formula"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 3 #")) "
0 0 14 3 4 #"args"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 8 #"currSign"
0 0 27 3 3 #") ("
0 0 14 3 18 #"node/formula/op/&&"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 13 #"desugaredArgs"
0 0 27 3 2 #") "
0 0 14 3 13 #"desugaredArgs"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 18 #"node/formula/op/||"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 13 #"desugaredArgs"
0 0 27 3 2 #") "
0 0 14 3 13 #"desugaredArgs"
0 0 27 3 3 #")])"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 4 #"; OR"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"     [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 19 #"node/formula/op/||?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 6 #"\"or~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 13 #"desugaredArgs"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 15 #"desugar-formula"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 3 #")) "
0 0 14 3 4 #"args"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 8 #"currSign"
0 0 27 3 3 #") ("
0 0 14 3 18 #"node/formula/op/||"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 13 #"desugaredArgs"
0 0 27 3 2 #") "
0 0 14 3 13 #"desugaredArgs"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 18 #"node/formula/op/&&"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 13 #"desugaredArgs"
0 0 27 3 2 #") "
0 0 14 3 13 #"desugaredArgs"
0 0 27 3 3 #")])"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 9 #"; IMPLIES"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 19 #"node/formula/op/=>?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 11 #"\"implies~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 57 #"; The desugared version of IMPLIES is: (not LHS) OR (RHS)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"ante"
0 0 27 3 2 #" ("
0 0 14 3 17 #"node/formula/op/!"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"conseq"
0 0 27 3 2 #" ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 16 #"desugaredImplies"
0 0 27 3 2 #" ("
0 0 14 3 18 #"node/formula/op/||"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 4 #"ante"
0 0 27 3 1 #" "
0 0 14 3 6 #"conseq"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 15 #"desugar-formula"
0 0 27 3 1 #" "
0 0 14 3 16 #"desugaredImplies"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 18 #"; IN (atomic fmla)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 19 #"node/formula/op/in?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 6 #"\"in~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 107
(5
 #"; In this function there are two cases, the ground case and the case"
 #" where we build an and-of-implications."
) 0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 35 #"; Some examples can be seen below: "
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 90
(6
 #";     Node0->Node1 in ^edges   <--- this is a ground case of IN! we "
 #"know the current tuple"
) 0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 89
(7
 #";     Node0->Node1 + Node1->Node2 in ^edges <--- need to turn into a"
 #"n and-of-implications"
) 0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 74
(8
 #";     edges in ~edges <--- same deal, need to build an and-of-implic"
 #"ations"
) 0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 5 #"leftE"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"rightE"
0 0 27 3 2 #" ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 84
(9
 #"; we already have the upper bounds Node0 -> Node1 upper bound is jus"
 #"t Node0 -> Node1"
) 0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 84
(10
 #"; We don't yet know which relation's bounds will be needed, so just "
 #"pass them all in"
) 0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 92
(11
 #";   The bounds-lifter helpers will know what they need and can acces"
 #"s the upper bounds then."
) 0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 19 #"lifted-upper-bounds"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 5 #"leftE"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 10 #"runContext"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 15 #"isGroundProduct"
0 0 27 3 1 #" "
0 0 14 3 5 #"leftE"
0 0 27 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 19 #"lifted-upper-bounds"
0 0 27 3 2 #") "
0 0 24 3 1 #"1"
0 0 27 3 3 #")) "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 18 3 100
(12
 #"; build a big \"and\" of: for every tuple T in lifted-upper-bounds: "
 #"(T in leftE) implies (T in rightE)"
) 0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 12 #"desugaredAnd"
0 0 27 3 2 #" ("
0 0 14 3 18 #"node/formula/op/&&"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 29 1 #"\n"
0 0 27 3 50 #"                                                 ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 57 #"                                                        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 7 #"tupExpr"
0 0 27 3 2 #" ("
0 0 14 3 8 #"tup2Expr"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 57 #"                                                        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"LHS"
0 0 27 3 4 #"   ("
0 0 14 3 18 #"node/formula/op/in"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 7 #"tupExpr"
0 0 27 3 1 #" "
0 0 14 3 5 #"leftE"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 57 #"                                                        ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"RHS"
0 0 27 3 2 #" ("
0 0 14 3 18 #"node/formula/op/in"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 7 #"tupExpr"
0 0 27 3 1 #" "
0 0 14 3 6 #"rightE"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 57 #"                                                        ("
0 0 14 3 18 #"node/formula/op/=>"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 3 #"LHS"
0 0 27 3 1 #" "
0 0 14 3 3 #"RHS"
0 0 27 3 4 #"))) "
0 0 14 3 19 #"lifted-upper-bounds"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 20 #"\"desugaredAnd: ~a~n\""
0 0 27 3 1 #" "
0 0 14 3 12 #"desugaredAnd"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 15 #"desugar-formula"
0 0 27 3 1 #" "
0 0 14 3 12 #"desugaredAnd"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 4 #")])]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 9 #"; EQUALS "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 18 #"node/formula/op/=?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"=~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 67
#"; The desugared version of EQUALS is: (LHS in RHS) AND (RHS in LHS)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"LHS"
0 0 27 3 2 #" ("
0 0 14 3 18 #"node/formula/op/in"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #") ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"RHS"
0 0 27 3 2 #" ("
0 0 14 3 18 #"node/formula/op/in"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #") ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 15 #"desugaredEquals"
0 0 27 3 2 #" ("
0 0 14 3 18 #"node/formula/op/&&"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 3 #"LHS"
0 0 27 3 1 #" "
0 0 14 3 3 #"RHS"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 15 #"desugar-formula"
0 0 27 3 1 #" "
0 0 14 3 15 #"desugaredEquals"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 10 #"; NEGATION"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 18 #"node/formula/op/!?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 7 #"\"not~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 64
#"; The desugared version of NEGATION is to flip the currSign type"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 15 #"desugar-formula"
0 0 27 3 1 #" "
0 0 14 3 7 #"formula"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 2 #" ("
0 0 14 3 3 #"not"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 6 #"))]   "
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 11 #"; INTEGER >"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 21 #"node/formula/op/int>?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"int>~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 33 #"\"amalgam: int > not supported ~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 11 #"; INTEGER <"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 21 #"node/formula/op/int<?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"int<~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 33 #"\"amalgam: int < not supported ~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 11 #"; INTEGER ="
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 21 #"node/formula/op/int=?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"int=~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 33 #"\"amalgam: int = not supported ~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"     ]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 51 #"; Should always have a currTupIfAtomic when calling"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"desugar-expr"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 18 3 63
#"; Error message to check that we are only taking in expressions"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"unless"
0 0 27 3 2 #" ("
0 0 14 3 10 #"node/expr?"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 3 #") ("
0 0 14 3 5 #"error"
0 0 27 3 2 #" ("
0 0 14 3 6 #"format"
0 0 27 3 1 #" "
0 0 20 3 37 #"\"desugar-expr called on non-expr: ~a\""
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 27 #"; relation name (base case)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 18 #"node/expr/relation"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 5 #"arity"
0 0 27 3 1 #" "
0 0 14 3 4 #"name"
0 0 27 3 1 #" "
0 0 14 3 8 #"typelist"
0 0 27 3 1 #" "
0 0 14 3 6 #"parent"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 18 #"node/formula/op/in"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 18 #"; The Int constant"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 18 #"node/expr/constant"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 18 #"node/formula/op/in"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 28 #"; other expression constants"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 18 #"node/expr/constant"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 5 #"arity"
0 0 27 3 1 #" "
0 0 14 3 4 #"type"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 18 #"node/formula/op/in"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 54 #"; expression w/ operator (union, intersect, ~, etc...)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 12 #"node/expr/op"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 5 #"arity"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 15 #"desugar-expr-op"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 1 #" "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 75
(13
 #"; quantified variable (depends on scope! which quantifier is this va"
 #"r for?)"
) 0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 24 #"node/expr/quantifier-var"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 5 #"arity"
0 0 27 3 1 #" "
0 0 14 3 3 #"sym"
0 0 27 3 6 #")     "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"  ~a~n\""
0 0 27 3 1 #" "
0 0 14 3 3 #"sym"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 81
(14
 #"\"amalgam: Something wasn't substituted correctly or the formula was"
 #" malformed ~n\""
) 0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 50 #"; set comprehension e.g. {n : Node | some n.edges}"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 23 #"node/expr/comprehension"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 3 #"len"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 1 #" "
0 0 14 3 4 #"form"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 18 3 34 #"; account for multiple variables  "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"vars"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 1 #" "
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (["
0 0 14 3 9 #"quantvars"
0 0 27 3 2 #" ("
0 0 14 3 6 #"append"
0 0 27 3 1 #" "
0 0 14 3 4 #"vars"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 10 #")])       "
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 25 #"\"comprehension over ~a~n\""
0 0 27 3 1 #" "
0 0 14 3 4 #"vars"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 18 3 29 #"; go through each declaration"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 8 #"for-each"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"d"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 19 #"                   "
0 0 18 3 71
(15
 #";(print-cmd-cont (format \"[~a : \" (v (get-var-idx (car d) quantvar"
 #"s))))"
) 0 0 27 29 1 #"\n"
0 0 27 3 20 #"                   ("
0 0 14 3 12 #"desugar-expr"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 1 #"d"
0 0 27 3 2 #") "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 20 #"                   ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 16 #"\"    decl: ~a~n\""
0 0 27 3 1 #" "
0 0 14 3 1 #"d"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                 "
0 0 14 3 5 #"decls"
0 0 27 3 6 #")     "
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 15 #"desugar-formula"
0 0 27 3 1 #" "
0 0 14 3 4 #"form"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 5 #"))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 15 #"desugar-expr-op"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 7 #"; UNION"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 15 #"node/expr/op/+?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"+~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 45 #"; Check that the currTupIfAtomic isn't empty "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 20 #"mustHaveTupleContext"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 89
(16
 #"; The desugared version of UNION is: (currTupIfAtomic in LHS) OR (cu"
 #"rrTupIfAtomic in RHS)"
) 0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 39 #"; map over all children of intersection"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 17 #"desugaredChildren"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 3 #"map"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 5 #"child"
0 0 27 3 3 #") ("
0 0 14 3 12 #"desugar-expr"
0 0 27 3 1 #" "
0 0 14 3 5 #"child"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 3 #")) "
0 0 14 3 4 #"args"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 79
(17
 #"; Create the final desugared version of UNION by calling with desgua"
 #"redChildren"
) 0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 14 #"desugaredUnion"
0 0 27 3 2 #" ("
0 0 14 3 18 #"node/formula/op/||"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 17 #"desugaredChildren"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 14 #"desugaredUnion"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 11 #"; SETMINUS "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 15 #"node/expr/op/-?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"-~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 18 3 45 #"; Check that the currTupIfAtomic isn't empty "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 20 #"mustHaveTupleContext"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 18 3 98
(18
 #"; The desugared version of SETMINUS is: (currTupIfAtomic in LHS) iff"
 #" (not(currTupIfAtomic in RHS))"
) 0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 19 #"currTupIfAtomicExpr"
0 0 27 3 2 #" ("
0 0 14 3 8 #"tup2Expr"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"LHS"
0 0 27 3 2 #" ("
0 0 14 3 18 #"node/formula/op/in"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 19 #"currTupIfAtomicExpr"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"RHS"
0 0 27 3 2 #" ("
0 0 14 3 17 #"node/formula/op/!"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 18 #"node/formula/op/in"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 19 #"currTupIfAtomicExpr"
0 0 27 3 2 #" ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 71
(19
 #"; Recur on the LHS and RHS to see if they need to be desugared furth"
 #"er "
) 0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 12 #"desugaredLHS"
0 0 27 3 2 #" ("
0 0 14 3 12 #"desugar-expr"
0 0 27 3 1 #" "
0 0 14 3 3 #"LHS"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 12 #"desugaredRHS"
0 0 27 3 2 #" ("
0 0 14 3 12 #"desugar-expr"
0 0 27 3 1 #" "
0 0 14 3 3 #"RHS"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 84
(20
 #"; Create the final desugared version of SETMINUS by joining LHS and "
 #"RHS with an AND "
) 0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 17 #"desugaredSetMinus"
0 0 27 3 2 #" ("
0 0 14 3 18 #"node/formula/op/&&"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 12 #"desugaredLHS"
0 0 27 3 1 #" "
0 0 14 3 12 #"desugaredRHS"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 14 3 17 #"desugaredSetMinus"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 14 #"; INTERSECTION"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 15 #"node/expr/op/&?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"& ~a~n\""
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 45 #"; Check that the currTupIfAtomic isn't empty "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 20 #"mustHaveTupleContext"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 101
(21
 #"; The desugared version of INTERSECTION is: (currTupIfAtomic in CHIL"
 #"D) AND (currTupIfAtomic in CHILD)"
) 0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 39 #"; map over all children of intersection"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 17 #"desugaredChildren"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 3 #"map"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 5 #"child"
0 0 27 3 3 #") ("
0 0 14 3 12 #"desugar-expr"
0 0 27 3 1 #" "
0 0 14 3 5 #"child"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 3 #")) "
0 0 14 3 4 #"args"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 86
(22
 #"; Create the final desugared version of INTERSECTION by calling with"
 #" desguaredChildren"
) 0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 21 #"desugaredIntersection"
0 0 27 3 2 #" ("
0 0 14 3 18 #"node/formula/op/&&"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 17 #"desugaredChildren"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 14 3 21 #"desugaredIntersection"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 9 #"; PRODUCT"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 16 #"node/expr/op/->?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 6 #"\"->~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 20 #"mustHaveTupleContext"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"lef"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 6 #"; JOIN"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 18 #"node/expr/op/join?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 5 #"\".~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 12 #"desugar-expr"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 3 #")) "
0 0 14 3 4 #"args"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 20 #"; TRANSITIVE CLOSURE"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 15 #"node/expr/op/^?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"^~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 12 #"desugar-expr"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 3 #")) "
0 0 14 3 4 #"args"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 30 #"; REFLEXIVE-TRANSITIVE CLOSURE"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 15 #"node/expr/op/*?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"*~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 45 #"; Check that the currTupIfAtomic isn't empty "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 20 #"mustHaveTupleContext"
0 0 27 3 1 #" "
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 93
(23
 #"; The desugared version of REFLEXIVE-TRANSITIVE CLOSURE is ((iden) &"
 #" (univ->univ)) + (^expr) "
) 0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 13 #"productOfUniv"
0 0 27 3 2 #" ("
0 0 14 3 15 #"node/expr/op/->"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 4 #"univ"
0 0 27 3 1 #" "
0 0 14 3 4 #"univ"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 14 #"restrictedIden"
0 0 27 3 2 #" ("
0 0 14 3 14 #"node/expr/op/&"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 4 #"iden"
0 0 27 3 1 #" "
0 0 14 3 13 #"productOfUniv"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 17 #"transitiveClosure"
0 0 27 3 2 #" ("
0 0 14 3 14 #"node/expr/op/^"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 42 #"; Q: Do we want to call this recursively ?"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 17 #"desugaredRClosure"
0 0 27 3 2 #" ("
0 0 14 3 14 #"node/expr/op/+"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 14 #"restrictedIden"
0 0 27 3 1 #" "
0 0 14 3 17 #"transitiveClosure"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 17 #"desugaredRClosure"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 11 #"; TRANSPOSE"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 15 #"node/expr/op/~?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 6 #"\"~~~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 25 #"transposedCurrTupIfAtomic"
0 0 27 3 2 #" ("
0 0 14 3 12 #"transposeTup"
0 0 27 3 1 #"("
0 0 14 3 15 #"currTupIfAtomic"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 33 #"; for ~edges, args contains edges"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 12 #"desugar-expr"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #") "
0 0 14 3 25 #"transposedCurrTupIfAtomic"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 8 #"currSign"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 68
#"; SINGLETON (typecast number to 1x1 relation with that number in it)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 18 #"node/expr/op/sing?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"sing~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 11 #"desugar-int"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 3 #")) "
0 0 14 3 4 #"args"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"     ]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 11 #"desugar-int"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 14 #"; CONSTANT INT"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 17 #"node/int/constant"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 5 #"value"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 6 #"\"~a~n\""
0 0 27 3 1 #" "
0 0 14 3 5 #"value"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 47 #"; apply an operator to some integer expressions"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 11 #"node/int/op"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 4 #")   "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 14 #"desugar-int-op"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 18 #"; sum \"quantifier\""
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 31 #"; e.g. sum p : Person | p.age  "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 18 #"node/int/sum-quant"
0 0 27 3 1 #" "
0 0 14 3 4 #"info"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 1 #" "
0 0 14 3 8 #"int-expr"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"sumQ~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"var"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (["
0 0 14 3 9 #"quantvars"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 3 #"var"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 3 #")])"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"       "
0 0 18 3 44 #";( print-cmd-cont (format \"(sum ([~a : ~a \" "
0 0 27 29 1 #"\n"
0 0 27 3 7 #"       "
0 0 18 3 57 #";                         (v (get-var-idx var quantvars))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"       "
0 0 18 3 73
(24
 #";                         (if (@>"
 #" (node/expr-arity var) 1) \"set\" \"one\")))"
) 0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 12 #"desugar-expr"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 5 #"decls"
0 0 27 3 3 #")) "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 5 #"false"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"       "
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 11 #"desugar-int"
0 0 27 3 1 #" "
0 0 14 3 8 #"int-expr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"       )]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 14 #"desugar-int-op"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 1 #" "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 27 3 1 #" "
0 0 14 3 4 #"expr"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 14 #"; int addition"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 16 #"node/int/op/add?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"int+~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 32 #"\"amalgam: int + not supported~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 17 #"; int subtraction"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 21 #"node/int/op/subtract?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"int-~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 32 #"\"amalgam: int - not supported~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 20 #"; int multiplication"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 21 #"node/int/op/multiply?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"int*~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 32 #"\"amalgam: int * not supported~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 14 #"; int division"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 19 #"node/int/op/divide?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"int/~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 33 #"\"amalgam: int / not supported ~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 57 #"; int sum (also used as typecasting from relation to int)"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 32 #"; e.g. {1} --> 1 or {1, 2} --> 3"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 16 #"node/int/op/sum?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 10 #"\"intsum~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 31 #"\"amalgam: sum not supported ~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 27 #"; cardinality (e.g., #Node)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 17 #"node/int/op/card?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 15 #"\"cardinality~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 12 #"desugar-expr"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"args"
0 0 27 3 2 #") "
0 0 14 3 10 #"runContext"
0 0 27 3 1 #" "
0 0 14 3 5 #"false"
0 0 27 3 3 #")) "
0 0 14 3 4 #"args"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 18 #"; remainder/modulo"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 22 #"node/int/op/remainder?"
0 0 27 3 6 #")     "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 41 #"\"amalgam: int % (modulo) not supported~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 16 #"; absolute value"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 16 #"node/int/op/abs?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 7 #"\"abs~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 34 #"\"amalgam: int abs not supported~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 10 #"; sign-of "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 27 3 1 #" "
0 0 14 3 17 #"node/int/op/sign?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"sign~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 38 #"\"amalgam: int sign-of not supported~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ]"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    ))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 29 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0           0
