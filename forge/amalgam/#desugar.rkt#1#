#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 61 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1
          0 1960 0 29 3 12 #"#lang racket"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 34 #"; Desugaring functions for Amalgam"
0 0 25 29 1 #"\n"
0 0 17 3 59
#"; (full AST) -> (restricted AST without stuff like implies)"
0 0 25 29 1 #"\n"
0 0 17 3 53 #";    Note: These functions maintain an environment of"
0 0 25 29 1 #"\n"
0 0 17 3 54 #";    quantified variables to aid general functionality"
0 0 25 29 1 #"\n"
0 0 17 3 50 #"; We are bringing the input into our core language"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 40 #"; Warning: ast.rkt exports (e.g.) \"and\"."
0 0 25 29 1 #"\n"
0 0 17 3 51 #"; This is the macro that produces an \"and\" formula!"
0 0 25 29 1 #"\n"
0 0 17 3 35 #"; To use real Racket and, use @and."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"../lang/ast.rkt\""
0 0 25 3 2 #" ("
0 0 14 3 9 #"prefix-in"
0 0 25 3 1 #" "
0 0 14 3 1 #"@"
0 0 25 3 1 #" "
0 0 14 3 6 #"racket"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #";;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"desugar-formula"
0 0 25 3 1 #" "
0 0 14 3 7 #"formula"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 7 #"formula"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 38 #"; Constant formulas: already at bottom"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 21 #"node/formula/constant"
0 0 25 3 1 #" "
0 0 14 3 4 #"type"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 14 3 7 #"formula"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 42 #"; operator formula (and, or, implies, ...)"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 15 #"node/formula/op"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 18 #"desugar-formula-op"
0 0 25 3 1 #" "
0 0 14 3 7 #"formula"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 40 #"; multiplicity formula (some, one, ...) "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 25 #"node/formula/multiplicity"
0 0 25 3 1 #" "
0 0 14 3 4 #"mult"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 50 #"; create a new multiplicity formula with fields..."
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 25 #"node/formula/multiplicity"
0 0 25 3 1 #" "
0 0 14 3 4 #"mult"
0 0 25 3 2 #" ("
0 0 14 3 12 #"desugar-expr"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 50 #"; quantified formula (some x : ... or all x : ...)"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 23 #"node/formula/quantified"
0 0 25 3 1 #" "
0 0 14 3 10 #"quantifier"
0 0 25 3 1 #" "
0 0 14 3 5 #"decls"
0 0 25 3 1 #" "
0 0 14 3 4 #"form"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 43 #"; car returns the first element of the pair"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"decls"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 44 #"; cons is appending var into quantvars list "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 9 #"quantvars"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 17 3 58
#"; cdr returns everything but the first entry in the list  "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 12 #"desugar-expr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"decls"
0 0 25 3 3 #")) "
0 0 14 3 9 #"quantvars"
0 0 25 3 6 #")     "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 15 #"desugar-formula"
0 0 25 3 1 #" "
0 0 14 3 4 #"form"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 12 #"\"quant ~a~n\""
0 0 25 3 1 #" "
0 0 14 3 10 #"quantifier"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 19 #"; truth and falsity"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 11 #"; TODO: wat"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 22 3 2 #"#t"
0 0 25 3 2 #" ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"true~n\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 22 3 2 #"#f"
0 0 25 3 2 #" ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"false~n\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    ))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 79
(4
 #"; This function is recursively calling every element in args and pas"
 #"s it to the"
) 0 0 25 29 1 #"\n"
0 0 17 3 31 #"; original recursive function. "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 18 #"desugar-formula-op"
0 0 25 3 1 #" "
0 0 14 3 7 #"formula"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 7 #"formula"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 56 #"; ? <test> matches on forms that <test> returns true for"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 5 #"; AND"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 19 #"node/formula/op/&&?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"and~n\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 60
#"; applying desugar-formula x quantvars to everything in args"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 15 #"desugar-formula"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 4 #"; OR"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 19 #"node/formula/op/||?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"or~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 60
#"; applying desugar-formula x quantvars to everything in args"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 15 #"desugar-formula"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 20 #"; Q: What about IFF?"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 9 #"; IMPLIES"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 19 #"node/formula/op/=>?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"implies~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 52 #"; Implies should be desugared as (not LHS) OR (RHS) "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 16 #"desugaredImplies"
0 0 25 3 2 #" ("
0 0 14 3 18 #"node/formula/op/||"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 17 #"node/formula/op/!"
0 0 25 3 1 #"("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 5 #")))])"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 17 3 92
(5
 #"; Call desugar-formula recursively on the desugared expression creat"
 #"ed on the previous step "
) 0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 15 #"desugar-formula"
0 0 25 3 1 #" "
0 0 14 3 16 #"desugaredImplies"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 18 #"; IN (atomic fmla)"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 47 #"; Q: Can we please go over this case together? "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 19 #"node/formula/op/in?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"in~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 12 #"desugar-expr"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 17 #"; = (atomic fmla)"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 97
(6
 #"; Q: How do we know that this is an expression? I changed it to call"
 #" desugar-formula recursively "
) 0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 18 #"node/formula/op/=?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"=~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 70
(7
 #"; The desugared version of equals should be LHS in RHS AND RHS in LH"
 #"S "
) 0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 15 #"desugaredEquals"
0 0 25 3 2 #" ("
0 0 14 3 18 #"node/formula/op/&&"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 29 1 #"\n"
0 0 25 3 51 #"                                                  ("
0 0 14 3 18 #"node/formula/op/in"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 3 #") ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 51 #"                                                  ("
0 0 14 3 18 #"node/formula/op/in"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 3 #") ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 7 #")))))])"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 17 3 92 5 0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 15 #"desugar-formula"
0 0 25 3 1 #" "
0 0 14 3 15 #"desugaredEquals"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 17 3 2 #";("
0 0 17 3 5 #"map ("
0 0 17 3 6 #"lambda"
0 0 17 3 2 #" ("
0 0 17 3 1 #"x"
0 0 17 3 16 #") (desugar-expr "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 29 #"quantvars)) desugaredEquals))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 10 #"; NEGATION"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 18 #"node/formula/op/!?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"not~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 64
#"; Q: Is this an OK way to re-write negation? Operand implies f? "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 17 #"desugaredNegation"
0 0 25 3 2 #" ("
0 0 14 3 18 #"node/formula/op/=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 15 #"desugar-formula"
0 0 25 3 1 #" "
0 0 14 3 17 #"desugaredNegation"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 4 #"))] "
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 3 #"; ("
0 0 17 3 3 #"map"
0 0 17 3 2 #" ("
0 0 17 3 6 #"lambda"
0 0 17 3 2 #" ("
0 0 17 3 1 #"x"
0 0 17 3 3 #") ("
0 0 17 3 15 #"desugar-formula"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 9 #"quantvars"
0 0 17 3 3 #")) "
0 0 17 3 5 #"args)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 98
(8
 #"; Q: Are we going to be working with arithmetic, if not, should the "
 #"following 3 cases be removed? "
) 0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 11 #"; INTEGER >"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 21 #"node/formula/op/int>?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"int>~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 11 #"desugar-int"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 11 #"; INTEGER <"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 21 #"node/formula/op/int<?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"int<~n\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 11 #"desugar-int"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 11 #"; INTEGER ="
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 21 #"node/formula/op/int=?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"int=~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 11 #"desugar-int"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"     ]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"desugar-expr"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")  "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 27 #"; relation name (base case)"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 18 #"node/expr/relation"
0 0 25 3 1 #" "
0 0 14 3 5 #"arity"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 8 #"typelist"
0 0 25 3 1 #" "
0 0 14 3 6 #"parent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 14 3 4 #"expr"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 18 #"; The Int constant"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 18 #"node/expr/constant"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 14 3 4 #"expr"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 28 #"; other expression constants"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 18 #"node/expr/constant"
0 0 25 3 1 #" "
0 0 14 3 5 #"arity"
0 0 25 3 1 #" "
0 0 14 3 4 #"type"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 14 3 4 #"expr"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 54 #"; expression w/ operator (union, intersect, ~, etc...)"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 12 #"node/expr/op"
0 0 25 3 1 #" "
0 0 14 3 5 #"arity"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 59
#"; Q: I am changing this to include the currentTupleIfAtomic"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 109
(9
 #"; CurrentTuppleIfAtomic should be the implicit LHS of the expression"
 #", so therefore the first element in args "
) 0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 15 #"desugar-expr-op"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 48 #"; Q: I am a little bit confused about this case "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 75
(10
 #"; quantified variable (depends on scope! which quantifier is this va"
 #"r for?)"
) 0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 24 #"node/expr/quantifier-var"
0 0 25 3 1 #" "
0 0 14 3 5 #"arity"
0 0 25 3 1 #" "
0 0 14 3 3 #"sym"
0 0 25 3 6 #")     "
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 68
#";;(print-cmd-cont (symbol->string (v (get-var-idx expr quantvars))))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"  ~a~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 3 #"sym"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 36 #"; set comprehension e.g. {n : Node |"
0 0 17 3 1 #" "
0 0 17 3 13 #"some n.edges}"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 23 #"node/expr/comprehension"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 1 #" "
0 0 14 3 5 #"decls"
0 0 25 3 1 #" "
0 0 14 3 4 #"form"
0 0 25 3 6 #")     "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"decls"
0 0 25 3 3 #")) "
0 0 17 3 34 #"; account for multiple variables  "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 9 #"quantvars"
0 0 25 3 2 #" ("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 10 #")])       "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 13 #"comprehension"
0 0 19 3 1 #" "
0 0 19 3 4 #"over"
0 0 19 3 5 #" ~a~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 4 #"vars"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 8 #"for-each"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"d"
0 0 25 3 2 #") "
0 0 17 3 18 #"; each declaration"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                   "
0 0 17 3 26 #";(print-cmd-cont (format \""
0 0 17 3 1 #"["
0 0 17 3 2 #"~a"
0 0 17 3 1 #" "
0 0 17 3 1 #":"
0 0 17 3 40 #" \" (v (get-var-idx (car d) quantvars))))"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                   "
0 0 17 3 36 #"; car = first thing; cdr = remainder"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 12 #"desugar-expr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 1 #"d"
0 0 25 3 2 #") "
0 0 14 3 9 #"quantvars"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"    "
0 0 19 3 5 #"decl:"
0 0 19 3 5 #" ~a~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 1 #"d"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                 "
0 0 14 3 5 #"decls"
0 0 25 3 6 #")     "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 15 #"desugar-formula"
0 0 25 3 1 #" "
0 0 14 3 4 #"form"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 5 #"))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"desugar-expr-op"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 1 #" "
0 0 14 3 20 #"currentTupleIfAtomic"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 7 #"; union"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 15 #"node/expr/op/+?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"+~n\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 86
(11
 #"; Q: Should I be accounting for multiple unions? like in the interse"
 #"ction case below? "
) 0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 102
(12
 #"; The desugared version of Union should be currentTupleIfAtomic in L"
 #"HS OR currentTupleIfAtomic in RHS "
) 0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 10 #"desugared1"
0 0 25 3 2 #" ("
0 0 14 3 18 #"node/formula/op/in"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 20 #"currentTupleIfAtomic"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 5 #")))])"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 10 #"desugared2"
0 0 25 3 2 #" ("
0 0 14 3 18 #"node/formula/op/in"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 20 #"currentTupleIfAtomic"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 5 #")))])"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 14 #"desugaredUnion"
0 0 25 3 2 #" ("
0 0 14 3 16 #"node/formula/op/"
0 0 14 3 2 #"||"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 10 #"desugared1"
0 0 25 3 1 #" "
0 0 14 3 10 #"desugared2"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 15 #"desugar-formula"
0 0 25 3 1 #" "
0 0 14 3 14 #"desugaredUnion"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 2 #";("
0 0 17 3 3 #"map"
0 0 17 3 10 #" (lambda ("
0 0 17 3 1 #"x"
0 0 17 3 3 #") ("
0 0 17 3 12 #"desugar-expr"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 9 #"quantvars"
0 0 17 3 3 #")) "
0 0 17 3 5 #"args)"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 10 #"; setminus"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 15 #"node/expr/op/-?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"-~n\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 17 3 111
(13
 #"; The desugared version of SetMinus should be currentTupleIfAtomic i"
 #"n LHS AND not(currentTupleIfAtomic in RHS) "
) 0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 10 #"desugared1"
0 0 25 3 2 #" ("
0 0 14 3 18 #"node/formula/op/in"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 20 #"currentTupleIfAtomic"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 5 #")))])"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 10 #"desugared2"
0 0 25 3 2 #" ("
0 0 14 3 17 #"node/formula/op/!"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 18 #"node/formula/op/in"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 20 #"currentTupleIfAtomic"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 6 #"))))])"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 17 #"desugaredSetMinus"
0 0 25 3 2 #" ("
0 0 14 3 18 #"node/formula/op/&&"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 10 #"desugared1"
0 0 25 3 1 #" "
0 0 14 3 10 #"desugared2"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 15 #"desugar-formula"
0 0 25 3 1 #" "
0 0 14 3 17 #"desugaredSetMinus"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 2 #";("
0 0 17 3 3 #"map"
0 0 17 3 2 #" ("
0 0 17 3 6 #"lambda"
0 0 17 3 2 #" ("
0 0 17 3 1 #"x"
0 0 17 3 3 #") ("
0 0 17 3 12 #"desugar-expr"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 1 #" "
0 0 17 3 9 #"quantvars"
0 0 17 3 8 #")) args)"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 14 #"; intersection"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 15 #"node/expr/op/&?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 10 #";(printf \""
0 0 17 3 13 #"& ~a~n\" expr)"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"children"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 12 #"desugar-expr"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 74
(14
 #"; first argument of & struct is the arity, second is the child expre"
 #"ssions"
) 0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 17 3 50 #"; Q: Why are we creating a new intersection here? "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 14 #"node/expr/op/&"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 8 #"children"
0 0 25 3 2 #") "
0 0 14 3 8 #"children"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 9 #"; product"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 16 #"node/expr/op/->?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"->~n\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 12 #"desugar-expr"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 6 #"; join"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 18 #"node/expr/op/join?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 5 #"\".~n\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 12 #"desugar-expr"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 20 #"; transitive closure"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 15 #"node/expr/op/^?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"^~n\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 12 #"desugar-expr"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 30 #"; reflexive-transitive closure"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 15 #"node/expr/op/*?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"*~n\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 12 #"desugar-expr"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 11 #"; transpose"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 15 #"node/expr/op/~?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"~~~n\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 12 #"desugar-expr"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 68
#"; singleton (typecast number to 1x1 relation with that number in it)"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 18 #"node/expr/op/sing?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"sing~n\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 11 #"desugar-int"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"     ]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"desugar-int"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 14 #"; constant int"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 17 #"node/int/constant"
0 0 25 3 1 #" "
0 0 14 3 5 #"value"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"~a~n\""
0 0 25 3 1 #" "
0 0 14 3 5 #"value"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 47 #"; apply an operator to some integer expressions"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 11 #"node/int/op"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 4 #")   "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 14 #"desugar-int-op"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 18 #"; sum \"quantifier\""
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 23 #"; e.g. sum p : Person |"
0 0 17 3 1 #" "
0 0 17 3 7 #"p.age  "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 18 #"node/int/sum-quant"
0 0 25 3 1 #" "
0 0 14 3 5 #"decls"
0 0 25 3 1 #" "
0 0 14 3 8 #"int-expr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"sumQ~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"decls"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 9 #"quantvars"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 17 3 27 #";( print-cmd-cont (format \""
0 0 17 3 1 #"("
0 0 17 3 3 #"sum"
0 0 17 3 3 #" (["
0 0 17 3 2 #"~a"
0 0 17 3 1 #" "
0 0 17 3 1 #":"
0 0 17 3 1 #" "
0 0 17 3 2 #"~a"
0 0 17 3 3 #" \" "
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 17 3 57 #";                         (v (get-var-idx var quantvars))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 17 3 60
#";                         (if (@> (node/expr-arity var) 1) \""
0 0 17 3 3 #"set"
0 0 17 3 3 #"\" \""
0 0 17 3 7 #"one\")))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 12 #"desugar-expr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 5 #"decls"
0 0 25 3 3 #")) "
0 0 14 3 9 #"quantvars"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 11 #"desugar-int"
0 0 25 3 1 #" "
0 0 14 3 8 #"int-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"       )]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 78
(15
 #"; Q: Are we going to be doing any arithmetic? If not, should this be"
 #" removed? "
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"desugar-int-op"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 14 #"; int addition"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 16 #"node/int/op/add?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"int+~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 11 #"desugar-int"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 17 #"; int subtraction"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 21 #"node/int/op/subtract?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"int-~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 11 #"desugar-int"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 20 #"; int multiplication"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 21 #"node/int/op/multiply?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"int*~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 11 #"desugar-int"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 14 #"; int division"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 19 #"node/int/op/divide?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"int/~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 11 #"desugar-int"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 4 #" )) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 57 #"; int sum (also used as typecasting from relation to int)"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 32 #"; e.g. {1} --> 1 or {1, 2} --> 3"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 16 #"node/int/op/sum?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"intsum~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 12 #"desugar-expr"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 4 #" )) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 27 #"; cardinality (e.g., #Node)"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 17 #"node/int/op/card?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"cardinality~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 12 #"desugar-expr"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 18 #"; remainder/modulo"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 22 #"node/int/op/remainder?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 12 #"\"remainder~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 11 #"desugar-int"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 16 #"; absolute value"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 16 #"node/int/op/abs?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"abs~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 11 #"desugar-int"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 10 #"; sign-of "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 17 #"node/int/op/sign?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 6 #"printf"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"sign~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 11 #"desugar-int"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 9 #"quantvars"
0 0 25 3 3 #")) "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    ))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 29 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"Node"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"declare-relation"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 4 #"univ"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 4 #"univ"
0 0 25 3 1 #" "
0 0 19 3 5 #"\"Node"
0 0 19 3 1 #"\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"edges"
0 0 25 3 2 #" ("
0 0 14 3 16 #"declare-relation"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 4 #"Node"
0 0 25 3 1 #" "
0 0 14 3 4 #"Node"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 4 #"Node"
0 0 25 3 1 #" "
0 0 19 3 6 #"\"edges"
0 0 19 3 1 #"\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"f-symmetric"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 5 #"edges"
0 0 25 3 2 #" ("
0 0 14 3 1 #"~"
0 0 25 3 1 #" "
0 0 14 3 5 #"edges"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"f-irreflexive"
0 0 25 3 2 #" ("
0 0 14 3 2 #"no"
0 0 25 3 2 #" ("
0 0 14 3 1 #"&"
0 0 25 3 1 #" "
0 0 14 3 5 #"edges"
0 0 25 3 1 #" "
0 0 14 3 4 #"iden"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 18 #"f-some-reaches-all"
0 0 25 3 2 #" ("
0 0 14 3 4 #"some"
0 0 25 3 3 #" (["
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 4 #"Node"
0 0 25 3 4 #"]) ("
0 0 14 3 3 #"all"
0 0 25 3 3 #" (["
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 4 #"Node"
0 0 25 3 4 #"]) ("
0 0 14 3 2 #"in"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #" ("
0 0 14 3 4 #"join"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 2 #" ("
0 0 14 3 1 #"^"
0 0 25 3 1 #" "
0 0 14 3 5 #"edges"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 19 3 9 #"Symmetric"
0 0 19 3 3 #" ~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 15 #"desugar-formula"
0 0 25 3 1 #" "
0 0 14 3 11 #"f-symmetric"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 19 3 11 #"Irreflexive"
0 0 19 3 3 #" ~n"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 15 #"desugar-formula"
0 0 25 3 1 #" "
0 0 14 3 13 #"f-irreflexive"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 19 3 16 #"some-reaches-all"
0 0 19 3 1 #" "
0 0 19 3 3 #"~n\""
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 15 #"desugar-formula"
0 0 25 3 1 #" "
0 0 14 3 18 #"f-some-reaches-all"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0           0
