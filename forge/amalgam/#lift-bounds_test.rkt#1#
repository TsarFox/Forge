#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 62 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 110 172 255 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 110 172 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 12 255 198 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 12 255 198 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 159 255 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 159 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 222 157 0 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 222 157 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1521 0 31 3 16 #"#lang forge/core"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 20 3 32 #"\"lift-bounds/../lift-bounds.rkt\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 20 3 25 #"\"lift-bounds_helpers.rkt\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 20 3 18 #"\"test_helpers.rkt\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 20 3 14 #"\"forge_ex.rkt\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 2 #" ("
0 0 14 3 9 #"prefix-in"
0 0 27 3 1 #" "
0 0 14 3 1 #"@"
0 0 27 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 14 3 10 #"debug/repl"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 3 #"run"
0 0 27 3 1 #" "
0 0 14 3 3 #"udt"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 26 3 7 #"#:preds"
0 0 27 3 2 #" ["
0 0 14 3 16 #"isUndirectedTree"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 26 3 7 #"#:scope"
0 0 27 3 3 #" [("
0 0 14 3 4 #"Node"
0 0 27 3 1 #" "
0 0 24 3 1 #"7"
0 0 27 3 3 #")])"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 10 #"node-bound"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Node0"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Node1"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Node2"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Node3"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Node4"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Node5"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"Node6"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"varx"
0 0 27 3 2 #" ("
0 0 14 3 24 #"node/expr/quantifier-var"
0 0 27 3 1 #" "
0 0 14 3 14 #"empty-nodeinfo"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"x"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 17 #"var-expr-constant"
0 0 27 3 2 #" ("
0 0 14 3 18 #"node/expr/constant"
0 0 27 3 1 #" "
0 0 14 3 14 #"empty-nodeinfo"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 15 #"var-int-const-x"
0 0 27 3 2 #" ("
0 0 14 3 17 #"node/int/constant"
0 0 27 3 1 #" "
0 0 14 3 14 #"empty-nodeinfo"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 15 #"var-int-const-y"
0 0 27 3 2 #" ("
0 0 14 3 17 #"node/int/constant"
0 0 27 3 1 #" "
0 0 14 3 14 #"empty-nodeinfo"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 10 #"int-bounds"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 2 #"-8"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 2 #"-7"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 2 #"-6"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 2 #"-5"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 2 #"-4"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 2 #"-3"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 2 #"-2"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 2 #"-1"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 1 #"3"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 1 #"4"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 1 #"5"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 1 #"6"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 24 3 1 #"7"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 31 #"; Checking atom case base case "
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"TEST 1 ~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 10 #"sampleAtom"
0 0 27 3 2 #" ("
0 0 14 3 14 #"node/expr/atom"
0 0 27 3 1 #" "
0 0 14 3 14 #"empty-nodeinfo"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 10 #"sampleAtom"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 19 #"node/expr/atom-name"
0 0 27 3 1 #" "
0 0 14 3 10 #"sampleAtom"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 40 #"; Checking relation name case base case "
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"TEST 2 ~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 1 #" "
0 0 14 3 10 #"node-bound"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 38 #"; Checking Int constant case base case"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"TEST 3 ~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 17 #"var-expr-constant"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 1 #" "
0 0 14 3 10 #"int-bounds"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 48 #"; Checking other esxpression constants base case"
0 0 27 29 1 #"\n"
0 0 18 3 6 #"; UNIV"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"TEST 4 ~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 22 #"expressionConstantUNIV"
0 0 27 3 2 #" ("
0 0 14 3 18 #"node/expr/constant"
0 0 27 3 1 #" "
0 0 14 3 14 #"empty-nodeinfo"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"univ"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 22 #"expressionConstantUNIV"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 4 #")) ("
0 0 14 3 15 #"forge:Run-atoms"
0 0 27 3 1 #" "
0 0 14 3 3 #"udt"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 6 #"; IDEN"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"TEST 5 ~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 22 #"expressionConstantIDEN"
0 0 27 3 2 #" ("
0 0 14 3 18 #"node/expr/constant"
0 0 27 3 1 #" "
0 0 14 3 14 #"empty-nodeinfo"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"iden"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 22 #"expressionConstantIDEN"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 4 #")) ("
0 0 14 3 15 #"forge:Run-atoms"
0 0 27 3 1 #" "
0 0 14 3 3 #"udt"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 30 #"; Checking Quantified variable"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"TEST 6 ~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 18 #"f-some-reaches-all"
0 0 27 3 2 #" ("
0 0 14 3 4 #"some"
0 0 27 3 3 #" (["
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 4 #"]) ("
0 0 14 3 3 #"all"
0 0 27 3 3 #" (["
0 0 14 3 1 #"y"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 4 #"]) ("
0 0 14 3 2 #"in"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 2 #" ("
0 0 14 3 4 #"join"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #" ("
0 0 14 3 1 #"^"
0 0 27 3 1 #" "
0 0 14 3 5 #"edges"
0 0 27 3 6 #"))))))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 10 #"@check-exn"
0 0 27 29 1 #"\n"
0 0 27 3 1 #" "
0 0 14 3 9 #"exn:fail?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 4 #" () "
0 0 27 29 1 #"\n"
0 0 27 3 4 #"   ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 18 #"f-some-reaches-all"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 42 #"; Checking Set Comprehension constant case"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"TEST 7 ~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"qvx"
0 0 27 3 2 #" ("
0 0 14 3 24 #"node/expr/quantifier-var"
0 0 27 3 1 #" "
0 0 14 3 14 #"empty-nodeinfo"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"x"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 19 #"f-set-comprehension"
0 0 27 3 2 #" ("
0 0 14 3 23 #"node/expr/comprehension"
0 0 27 3 1 #" "
0 0 14 3 14 #"empty-nodeinfo"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 29 1 #"\n"
0 0 27 3 35 #"                                  ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 3 #"qvx"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 35 #"                                  ("
0 0 14 3 2 #"in"
0 0 27 3 1 #" "
0 0 14 3 3 #"qvx"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 24 #"uppers-set-comprehension"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 1 #"("
0 0 14 3 3 #"qvx"
0 0 27 3 2 #") "
0 0 14 3 3 #"udt"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 19 #"f-set-comprehension"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 2 #"ub"
0 0 27 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 27 3 1 #" "
0 0 14 3 6 #"append"
0 0 27 3 1 #" "
0 0 14 3 2 #"ub"
0 0 27 3 4 #")) ("
0 0 14 3 5 #"apply"
0 0 27 3 1 #" "
0 0 14 3 17 #"cartesian-product"
0 0 27 3 1 #" "
0 0 14 3 24 #"uppers-set-comprehension"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 25 #"; Checking Set union case"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"TEST 8 ~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 12 #"uppers-union"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 10 #"node-bound"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 4 #")) ("
0 0 14 3 15 #"forge:Run-atoms"
0 0 27 3 1 #" "
0 0 14 3 3 #"udt"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 2 #" ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 1 #" "
0 0 14 3 4 #"univ"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 17 #"remove-duplicates"
0 0 27 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 27 3 1 #" "
0 0 14 3 6 #"append"
0 0 27 3 1 #" "
0 0 14 3 12 #"uppers-union"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 25 #"; Checking Set minus case"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"TEST 9 ~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 2 #" ("
0 0 14 3 1 #"-"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 1 #" "
0 0 14 3 4 #"univ"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 1 #" "
0 0 14 3 10 #"node-bound"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 32 #"; Checking Set intersection case"
0 0 27 29 1 #"\n"
0 0 18 3 72
(4
 #"; TODO: In set minus, why are we just looking at the bounds of the L"
 #"HS? "
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 14 #"\"TEST 10 ~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 2 #" ("
0 0 14 3 1 #"&"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 2 #" ("
0 0 14 3 1 #"-"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 2 #" ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 1 #" "
0 0 14 3 4 #"univ"
0 0 27 3 4 #"))) "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 1 #" "
0 0 14 3 10 #"node-bound"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 27 #"; Checking Set Product case"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 14 #"\"TEST 11 ~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 17 #"LHSProduct-bounds"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 17 #"RHSProduct-bounds"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 2 #" ("
0 0 14 3 2 #"->"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 1 #" "
0 0 14 3 4 #"univ"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 19 #"list-product-bounds"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 17 #"LHSProduct-bounds"
0 0 27 3 1 #" "
0 0 14 3 17 #"RHSProduct-bounds"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"product-map"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 2 #"ub"
0 0 27 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 27 3 1 #" "
0 0 14 3 6 #"append"
0 0 27 3 1 #" "
0 0 14 3 2 #"ub"
0 0 27 3 4 #")) ("
0 0 14 3 5 #"apply"
0 0 27 3 1 #" "
0 0 14 3 17 #"cartesian-product"
0 0 27 3 1 #" "
0 0 14 3 19 #"list-product-bounds"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 2 #" ("
0 0 14 3 2 #"->"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 2 #" ("
0 0 14 3 2 #"->"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 1 #" "
0 0 14 3 4 #"univ"
0 0 27 3 3 #")) "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 1 #" "
0 0 14 3 11 #"product-map"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 24 #"; Checking Set Join case"
0 0 27 29 1 #"\n"
0 0 18 3 22 #"; Error case arity < 1"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 14 #"\"TEST 12 ~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 10 #"@check-exn"
0 0 27 29 1 #"\n"
0 0 27 3 1 #" "
0 0 14 3 9 #"exn:fail?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 4 #" () "
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 2 #" ("
0 0 14 3 4 #"join"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 1 #" "
0 0 14 3 4 #"Node"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 47 #"; testing normal join case with two arguments  "
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 14 #"\"TEST 13 ~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"join-LHS"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 5 #"edges"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"join-RHS"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 4 #"iden"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 9 #"list-join"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 8 #"join-LHS"
0 0 27 3 1 #" "
0 0 14 3 8 #"join-RHS"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 9 #"newTuples"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 7 #"left-ub"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 26 #"                         ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 8 #"right-ub"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 7 #"left-ub"
0 0 27 3 1 #" "
0 0 14 3 8 #"right-ub"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 31 #"                              ("
0 0 14 3 6 #"second"
0 0 27 3 1 #" "
0 0 14 3 9 #"list-join"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 24 #"                       ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 9 #"list-join"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 2 #" ("
0 0 14 3 4 #"join"
0 0 27 3 1 #" "
0 0 14 3 5 #"edges"
0 0 27 3 1 #" "
0 0 14 3 4 #"iden"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 1 #" "
0 0 14 3 9 #"newTuples"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 45 #"; Checking join with more than two arguments "
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 14 #"\"TEST 14 ~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 13 #"join-LHS-more"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 5 #"edges"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 13 #"join-RHS-more"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 4 #"iden"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 14 #"list-join-more"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 8 #"join-LHS"
0 0 27 3 1 #" "
0 0 14 3 8 #"join-RHS"
0 0 27 3 1 #" "
0 0 14 3 8 #"join-RHS"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 14 #"newTuples-more"
0 0 27 3 2 #" ("
0 0 14 3 9 #"joinTuple"
0 0 27 3 1 #" "
0 0 14 3 14 #"list-join-more"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 17 #"newTuples-further"
0 0 27 3 2 #" ("
0 0 14 3 5 #"foldl"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 4 #"curr"
0 0 27 3 1 #" "
0 0 14 3 3 #"acc"
0 0 27 3 3 #") ("
0 0 14 3 9 #"joinTuple"
0 0 27 3 1 #" "
0 0 14 3 4 #"curr"
0 0 27 3 3 #")) "
0 0 14 3 9 #"newTuples"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 14 #"list-join-more"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 2 #" ("
0 0 14 3 4 #"join"
0 0 27 3 1 #" "
0 0 14 3 5 #"edges"
0 0 27 3 1 #" "
0 0 14 3 4 #"iden"
0 0 27 3 1 #" "
0 0 14 3 4 #"iden"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 1 #" "
0 0 14 3 17 #"newTuples-further"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 38 #"; Checking Set transitive closure case"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"TEST 15~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 25 #"transitive-closure-bounds"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 5 #"edges"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 2 #" ("
0 0 14 3 1 #"^"
0 0 27 3 1 #" "
0 0 14 3 5 #"edges"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 22 #"buildClosureOfTupleSet"
0 0 27 3 1 #" "
0 0 14 3 25 #"transitive-closure-bounds"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 48 #"; Checking Set reflexive transitive closure case"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"TEST 16~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 35 #"reflexive-transitive-closure-bounds"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 5 #"edges"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 18 #"closureOfTupleSets"
0 0 27 3 2 #" ("
0 0 14 3 22 #"buildClosureOfTupleSet"
0 0 27 3 1 #" "
0 0 14 3 35 #"reflexive-transitive-closure-bounds"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 14 #"appendedTuples"
0 0 27 3 2 #" ("
0 0 14 3 6 #"append"
0 0 27 3 1 #" "
0 0 14 3 18 #"closureOfTupleSets"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 4 #")) ("
0 0 14 3 15 #"forge:Run-atoms"
0 0 27 3 1 #" "
0 0 14 3 3 #"udt"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 5 #"edges"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 1 #" "
0 0 14 3 14 #"appendedTuples"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 29 #"; Checking Set transpose case"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 14 #"\"TEST 17 ~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 16 #"transpose-bounds"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 1 #" "
0 0 14 3 5 #"edges"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 2 #" ("
0 0 14 3 1 #"~"
0 0 27 3 1 #" "
0 0 14 3 5 #"edges"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 12 #"transposeTup"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 16 #"transpose-bounds"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 29 #"; Checking Set singleton case"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 14 #"\"TEST 18 ~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 16 #"lift-bounds-expr"
0 0 27 3 2 #" ("
0 0 14 3 4 #"sing"
0 0 27 3 1 #" "
0 0 14 3 15 #"var-int-const-x"
0 0 27 3 2 #") "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 1 #" "
0 0 14 3 10 #"int-bounds"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 25 #"; Checking const int case"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"TEST 19~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 13 #"@check-equal?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 2 #" ("
0 0 14 3 15 #"lift-bounds-int"
0 0 27 3 1 #" "
0 0 14 3 15 #"var-int-const-x"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 27 3 1 #" "
0 0 14 3 10 #"int-bounds"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 43 #"; Checking int with operator (should error)"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"TEST 20~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 10 #"f-int-less"
0 0 27 3 2 #" ("
0 0 14 3 1 #"<"
0 0 27 3 1 #" "
0 0 14 3 15 #"var-int-const-x"
0 0 27 3 1 #" "
0 0 14 3 15 #"var-int-const-y"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 10 #"@check-exn"
0 0 27 29 1 #"\n"
0 0 27 3 1 #" "
0 0 14 3 9 #"exn:fail?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 4 #" () "
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 15 #"lift-bounds-int"
0 0 27 3 1 #" "
0 0 14 3 10 #"f-int-less"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 6 #"printf"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"TEST 21~n~n\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 13 #"f-int-greater"
0 0 27 3 2 #" ("
0 0 14 3 1 #">"
0 0 27 3 1 #" "
0 0 14 3 15 #"var-int-const-x"
0 0 27 3 1 #" "
0 0 14 3 15 #"var-int-const-y"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 10 #"@check-exn"
0 0 27 29 1 #"\n"
0 0 27 3 1 #" "
0 0 14 3 9 #"exn:fail?"
0 0 27 29 1 #"\n"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 4 #" () "
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 15 #"lift-bounds-int"
0 0 27 3 1 #" "
0 0 14 3 13 #"f-int-greater"
0 0 27 3 1 #" "
0 0 24 3 1 #"'"
0 0 27 3 3 #"() "
0 0 14 3 3 #"udt"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 38 #"; TODO: Checking sum \"quantifier\" case"
0 0 27 29 1 #"\n"
0 0 18 3 24 #";(printf \"TEST 22 ~n~n\")"
0 0 27 29 1 #"\n"
0 0 18 3 58
#";(define x (node/expr/quantifier-var empty-nodeinfo 1 'x))"
0 0 27 29 1 #"\n"
0 0 18 3 49 #";(define f-sum (node/int/sum-quant empty-nodeinfo"
0 0 27 29 1 #"\n"
0 0 18 3 55 #";                                  (list (cons x Node))"
0 0 27 29 1 #"\n"
0 0 18 3 92
(5
 #";                                  (node/int/op/card empty-nodeinfo "
 #"(list (join edges x)))))"
) 0 0 27 29 1 #"\n"
0 0 18 3 15 #";(@check-equal?"
0 0 27 29 1 #"\n"
0 0 18 3 45 #"; (to-string (lift-bounds-int f-sum '() udt))"
0 0 27 29 1 #"\n"
0 0 18 3 17 #"; (to-string ()))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 64
#"; TODO: Checking cardinality case -- stuck on bitwidth question "
0 0 27 29 1 #"\n"
0 0 18 3 13 #"; cardinality"
0 0 27 29 1 #"\n"
0 0 18 3 24 #";(printf \"TEST 23 ~n~n\")"
0 0 27 29 1 #"\n"
0 0 18 3 69
(6
 #";(define f-cardinality (node/int/op/card empty-nodeinfo (list Node))"
 #")"
) 0 0 27 29 1 #"\n"
0 0 18 3 15 #";(@check-equal?"
0 0 27 29 1 #"\n"
0 0 18 3 53 #"; (to-string (lift-bounds-int f-cardinality '() udt))"
0 0 27 29 1 #"\n"
0 0 18 3 61
#"; (to-string (node/int/op/card empty-nodeinfo (list edges))))"
0 0 27 29 1 #"\n"
0           0
