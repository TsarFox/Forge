#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 58 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 10369 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 9 #"prefix-in"
0 0 24 3 1 #" "
0 0 14 3 1 #"@"
0 0 24 3 1 #" "
0 0 14 3 6 #"racket"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"prefix-in"
0 0 24 3 1 #" "
0 0 14 3 1 #"@"
0 0 24 3 1 #" "
0 0 14 3 10 #"racket/set"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 19 #"syntax/parse/define"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 10 #"for-syntax"
0 0 24 3 1 #" "
0 0 14 3 12 #"racket/match"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"shared.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"lang/ast.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 19 3 17 #"\"lang/bounds.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 19 3 12 #"\"breaks.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"server/eval-model.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"server/forgeserver.rkt\""
0 0 24 3 2 #") "
0 0 17 3 8 #"; v long"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 9 #"prefix-in"
0 0 24 3 1 #" "
0 0 14 3 7 #"kodkod:"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"kodkod-cli/server/kks.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"prefix-in"
0 0 24 3 1 #" "
0 0 14 3 7 #"kodkod:"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"kodkod-cli/server/server.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"prefix-in"
0 0 24 3 1 #" "
0 0 14 3 7 #"kodkod:"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"kodkod-cli/server/server-common.rkt\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 9 #"prefix-in"
0 0 24 3 1 #" "
0 0 14 3 9 #"pardinus:"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"pardinus-cli/server/kks.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"prefix-in"
0 0 24 3 1 #" "
0 0 14 3 9 #"pardinus:"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"pardinus-cli/server/server.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"prefix-in"
0 0 24 3 1 #" "
0 0 14 3 9 #"pardinus:"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"pardinus-cli/server/server-common.rkt\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"translate-to-kodkod-cli.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 19 3 31 #"\"translate-from-kodkod-cli.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Commands"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 1 #" "
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 5 #"check"
0 0 24 3 1 #" "
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 4 #"with"
0 0 24 3 1 #" "
0 0 14 3 8 #"evaluate"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; Instance analysis functions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 7 #"is-sat?"
0 0 24 3 1 #" "
0 0 14 3 9 #"is-unsat?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; AST values"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Expression"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 4 #"iden"
0 0 24 3 1 #" "
0 0 14 3 4 #"univ"
0 0 24 3 1 #" "
0 0 14 3 4 #"none"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 1 #"^"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"~"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"&"
0 0 24 3 1 #" "
0 0 14 3 4 #"join"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 4 #"atom"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; Formula"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 14 3 7 #"implies"
0 0 24 3 1 #" "
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 2 #"&&"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 4 #"ifte"
0 0 24 3 1 #" "
0 0 14 3 3 #"iff"
0 0 24 3 1 #" "
0 0 14 3 3 #"<=>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 2 #"ni"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 2 #"!="
0 0 24 3 1 #" "
0 0 14 3 3 #"!in"
0 0 24 3 1 #" "
0 0 14 3 3 #"!ni"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 2 #"no"
0 0 24 3 1 #" "
0 0 14 3 4 #"some"
0 0 24 3 1 #" "
0 0 14 3 3 #"one"
0 0 24 3 1 #" "
0 0 14 3 4 #"lone"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 2 #") "
0 0 17 3 6 #"; two)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; Ints"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 4 #"int="
0 0 24 3 1 #" "
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtract"
0 0 24 3 1 #" "
0 0 14 3 8 #"multiply"
0 0 24 3 1 #" "
0 0 14 3 6 #"divide"
0 0 24 3 1 #" "
0 0 14 3 4 #"sign"
0 0 24 3 1 #" "
0 0 14 3 3 #"abs"
0 0 24 3 1 #" "
0 0 14 3 9 #"remainder"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 4 #"card"
0 0 24 3 1 #" "
0 0 14 3 3 #"sum"
0 0 24 3 1 #" "
0 0 14 3 4 #"sing"
0 0 24 3 1 #" "
0 0 14 3 4 #"succ"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 9 #"sum-quant"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 17 #"node/int/constant"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; Racket stuff"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 15 3 3 #"let"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Technical stuff"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 13 #"set-verbosity"
0 0 24 3 1 #" "
0 0 14 3 13 #"VERBOSITY_LOW"
0 0 24 3 1 #" "
0 0 14 3 14 #"VERBOSITY_HIGH"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 9 #"set-path!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"set-path!"
0 0 24 3 1 #" "
0 0 14 3 4 #"path"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Data structures"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 2 #" ("
0 0 14 3 10 #"prefix-out"
0 0 24 3 1 #" "
0 0 14 3 6 #"forge:"
0 0 24 3 2 #" ("
0 0 14 3 10 #"struct-out"
0 0 24 3 1 #" "
0 0 14 3 3 #"Sig"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"prefix-out"
0 0 24 3 1 #" "
0 0 14 3 6 #"forge:"
0 0 24 3 2 #" ("
0 0 14 3 10 #"struct-out"
0 0 24 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"prefix-out"
0 0 24 3 1 #" "
0 0 14 3 6 #"forge:"
0 0 24 3 2 #" ("
0 0 14 3 10 #"struct-out"
0 0 24 3 1 #" "
0 0 14 3 5 #"Range"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"prefix-out"
0 0 24 3 1 #" "
0 0 14 3 6 #"forge:"
0 0 24 3 2 #" ("
0 0 14 3 10 #"struct-out"
0 0 24 3 1 #" "
0 0 14 3 5 #"Scope"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"prefix-out"
0 0 24 3 1 #" "
0 0 14 3 6 #"forge:"
0 0 24 3 2 #" ("
0 0 14 3 10 #"struct-out"
0 0 24 3 1 #" "
0 0 14 3 5 #"Bound"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"prefix-out"
0 0 24 3 1 #" "
0 0 14 3 6 #"forge:"
0 0 24 3 2 #" ("
0 0 14 3 10 #"struct-out"
0 0 24 3 1 #" "
0 0 14 3 7 #"Options"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"prefix-out"
0 0 24 3 1 #" "
0 0 14 3 6 #"forge:"
0 0 24 3 2 #" ("
0 0 14 3 10 #"struct-out"
0 0 24 3 1 #" "
0 0 14 3 5 #"State"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"prefix-out"
0 0 24 3 1 #" "
0 0 14 3 6 #"forge:"
0 0 24 3 2 #" ("
0 0 14 3 10 #"struct-out"
0 0 24 3 1 #" "
0 0 14 3 8 #"Run-spec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"prefix-out"
0 0 24 3 1 #" "
0 0 14 3 6 #"forge:"
0 0 24 3 2 #" ("
0 0 14 3 10 #"struct-out"
0 0 24 3 1 #" "
0 0 14 3 3 #"Run"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; Export everything for doing scripting"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 2 #" ("
0 0 14 3 10 #"prefix-out"
0 0 24 3 1 #" "
0 0 14 3 6 #"forge:"
0 0 24 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 2 #" ("
0 0 14 3 10 #"prefix-out"
0 0 24 3 1 #" "
0 0 14 3 6 #"forge:"
0 0 24 3 2 #" ("
0 0 14 3 10 #"struct-out"
0 0 24 3 1 #" "
0 0 14 3 5 #"bound"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 2 #" ("
0 0 14 3 10 #"prefix-out"
0 0 24 3 1 #" "
0 0 14 3 6 #"forge:"
0 0 24 3 1 #" "
0 0 14 3 13 #"relation-name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 2 #" ("
0 0 14 3 10 #"prefix-out"
0 0 24 3 1 #" "
0 0 14 3 6 #"forge:"
0 0 24 3 1 #" "
0 0 14 3 10 #"curr-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"prefix-out"
0 0 24 3 1 #" "
0 0 14 3 6 #"forge:"
0 0 24 3 1 #" "
0 0 14 3 13 #"update-state!"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;; Data Structures ;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"Sig"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 4 #"name"
0 0 24 3 7 #"       "
0 0 17 3 8 #"; Symbol"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 3 #"rel"
0 0 24 3 8 #"        "
0 0 17 3 20 #"; node/expr/relation"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 3 #"one"
0 0 24 3 8 #"        "
0 0 17 3 9 #"; Boolean"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 8 #"abstract"
0 0 24 3 3 #"   "
0 0 17 3 9 #"; Boolean"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 7 #"extends"
0 0 24 3 4 #"    "
0 0 17 3 13 #"; Symbol | #f"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 9 #"extenders"
0 0 24 3 2 #"  "
0 0 17 3 14 #"; List<Symbol>"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ) "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 4 #"name"
0 0 24 3 2 #"  "
0 0 17 3 8 #"; Symbol"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 3 #"rel"
0 0 24 3 3 #"   "
0 0 17 3 20 #"; node/expr/relation"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 4 #"sigs"
0 0 24 3 2 #"  "
0 0 17 3 14 #"; List<Symbol>"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 7 #"breaker"
0 0 24 3 1 #" "
0 0 17 3 8 #"; Symbol"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ) "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"Range"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 17 3 5 #"; int"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 5 #"upper"
0 0 24 3 1 #" "
0 0 17 3 5 #"; int"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ) "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"Scope"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 15 3 13 #"default-scope"
0 0 24 3 2 #"  "
0 0 17 3 12 #"; Range | #f"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 8 #"bitwidth"
0 0 24 3 7 #"       "
0 0 17 3 10 #"; int | #f"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 10 #"sig-scopes"
0 0 24 3 5 #"     "
0 0 17 3 20 #"; Map<Symbol, Range>"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ) "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"Bound"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 9 #"pbindings"
0 0 24 3 1 #" "
0 0 17 3 21 #"; Map<Symbol, sbound>"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 9 #"tbindings"
0 0 24 3 1 #" "
0 0 17 3 27 #"; Map<Symbol, List<Symbol>>"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ) "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"Target"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 8 #"instance"
0 0 24 3 1 #" "
0 0 17 3 33 #"; Map<Symbol, List<List<Symbol>>>"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 8 #"distance"
0 0 24 3 1 #" "
0 0 17 3 15 #"; 'close | 'far"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ) "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 7 #"Options"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 6 #"solver"
0 0 24 3 10 #"          "
0 0 17 3 8 #"; symbol"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 47 #"; verbosity       ; int ; handled in shared.rkt"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 7 #"backend"
0 0 24 3 9 #"         "
0 0 17 3 8 #"; symbol"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 2 #"sb"
0 0 24 3 14 #"              "
0 0 17 3 5 #"; int"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 15 #"coregranularity"
0 0 24 3 1 #" "
0 0 17 3 5 #"; int"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 14 #"logtranslation"
0 0 24 3 2 #"  "
0 0 17 3 5 #"; int"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ) "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"State"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 4 #"sigs"
0 0 24 3 8 #"        "
0 0 17 3 18 #"; Map<Symbol, Sig>"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 9 #"sig-order"
0 0 24 3 3 #"   "
0 0 17 3 14 #"; List<Symbol>"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 9 #"relations"
0 0 24 3 3 #"   "
0 0 17 3 23 #"; Map<Symbol, Relation>"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 14 #"relation-order"
0 0 24 3 1 #" "
0 0 17 3 14 #"; List<Symbol>"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 10 #"predicates"
0 0 24 3 2 #"  "
0 0 17 3 13 #"; Set<Symbol>"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 9 #"functions"
0 0 24 3 3 #"   "
0 0 17 3 13 #"; Set<Symbol>"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 9 #"constants"
0 0 24 3 3 #"   "
0 0 17 3 13 #"; Set<Symbol>"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 5 #"insts"
0 0 24 3 7 #"       "
0 0 17 3 13 #"; Set<Symbol>"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 7 #"options"
0 0 24 3 5 #"     "
0 0 17 3 9 #"; Options"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 6 #"runmap"
0 0 24 3 6 #"      "
0 0 17 3 28 #"; Map<Symbol, Run> (as hash)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ) "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"Run-spec"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 5 #"state"
0 0 24 3 3 #"   "
0 0 17 3 7 #"; State"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 5 #"preds"
0 0 24 3 3 #"   "
0 0 17 3 19 #"; Set<node/formula>"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 5 #"scope"
0 0 24 3 3 #"   "
0 0 17 3 7 #"; Scope"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 6 #"bounds"
0 0 24 3 2 #"  "
0 0 17 3 7 #"; Bound"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 6 #"target"
0 0 24 3 2 #"  "
0 0 17 3 13 #"; Target | #f"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ) "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 12 #"Server-ports"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 5 #"stdin"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 6 #"stdout"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"Run"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 4 #"name"
0 0 24 3 5 #"     "
0 0 17 3 8 #"; Symbol"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 7 #"command"
0 0 24 3 2 #"  "
0 0 17 3 17 #"; String (syntax)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 17 3 10 #"; Run-spec"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 6 #"result"
0 0 24 3 3 #"   "
0 0 17 3 8 #"; Stream"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 12 #"server-ports"
0 0 24 3 1 #" "
0 0 17 3 14 #"; Server-ports"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 5 #"atoms"
0 0 24 3 4 #"    "
0 0 17 3 14 #"; List<Symbol>"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 13 #"kodkod-bounds"
0 0 24 3 1 #" "
0 0 17 3 56 #"; List<bound> (lower and upper bounds for each relation)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ) "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;  Initial State  ;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"init-sigs"
0 0 24 3 2 #" ("
0 0 14 3 4 #"hash"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Sig"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 3 #"Int"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"init-sig-order"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"init-relations"
0 0 24 3 2 #" ("
0 0 14 3 4 #"hash"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"succ"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Relation"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"succ"
0 0 24 3 1 #" "
0 0 14 3 4 #"succ"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 3 #"Int"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"init-relation-order"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"succ"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"init-predicates"
0 0 24 3 2 #" ("
0 0 14 3 4 #"@set"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"init-functions"
0 0 24 3 2 #" ("
0 0 14 3 4 #"@set"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"init-constants"
0 0 24 3 2 #" ("
0 0 14 3 4 #"@set"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"init-insts"
0 0 24 3 2 #" ("
0 0 14 3 4 #"@set"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"init-runmap"
0 0 24 3 2 #" ("
0 0 14 3 5 #"@hash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"init-options"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Options"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"SAT4J"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"pardinus"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"init-state"
0 0 24 3 2 #" ("
0 0 14 3 5 #"State"
0 0 24 3 1 #" "
0 0 14 3 9 #"init-sigs"
0 0 24 3 1 #" "
0 0 14 3 14 #"init-sig-order"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 14 #"init-relations"
0 0 24 3 1 #" "
0 0 14 3 19 #"init-relation-order"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 15 #"init-predicates"
0 0 24 3 1 #" "
0 0 14 3 14 #"init-functions"
0 0 24 3 1 #" "
0 0 14 3 14 #"init-constants"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 10 #"init-insts"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 12 #"init-options"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 11 #"init-runmap"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; TODO: GET RID OF THIS"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"current-formula"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-parameter"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"current-expression"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-parameter"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"current-int-expression"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-parameter"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;    Defaults     ;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"DEFAULT-BITWIDTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"DEFAULT-SIG-SCOPE"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Range"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;; State Accessors ;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"type AST-Relation = node/expr/Re"
0 0 17 3 6 #"lation"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"type Sig* = (|| Sig AST-Relation)"
0 0 17 29 1 #"\n"
0 0 17 3 43 #"type Relation* = (|| Relation AST-Relation)"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"type Run-or-State = (|| Run State)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"get-state :: Run-or-State -> State"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"If run-or-state is a State, returns it;"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"if it is a Run-spec or a Run, then returns its state."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 5 #"; Sig"
0 0 17 3 6 #" stuff"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 55 #"get-sig :: Run-or-State (|| Symbol AST-Relation) -> Sig"
0 0 17 29 1 #"\n"
0 0 17 3 62
#"Returns the Sig of a given name/ast-relation from a run/state."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"get-sigs :: Run-or-State, Relation*? -> List<Sig>"
0 0 17 29 1 #"\n"
0 0 17 3 51 #"If a relation is provided, returns the column sigs;"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"otherwise, returns the Sig"
0 0 17 3 39 #"s of the given relation in a run/state."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"get-top-level-sigs :: Run-or-State -> List<Sig>"
0 0 17 29 1 #"\n"
0 0 17 3 63
#"Returns the Sigs in a run/state that do not extend another Sig."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"get-children :: Run-or-State, Sig* -> List<Sig>"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"Returns the children Sigs of a Sig."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"get-fields :: Run-or-State Sig* -> List<Relation>"
0 0 17 29 1 #"\n"
0 0 17 3 55 #"Returns the relations whose first sig is the given sig."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"; Relation stuff"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 66
#"get-relation :: Run-or-State, (|| Symbol AST-Relation) -> Relation"
0 0 17 29 1 #"\n"
0 0 17 3 67
#"Returns the Relation of a given name/ast-relation from a run/state."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"get-relation"
0 0 17 3 35 #"s :: Run-or-State -> List<Relation>"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"Returns the Relations in a run/state."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"; Result stuff"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"get-result :: Run -> Stream"
0 0 17 29 1 #"\n"
0 0 17 3 48 #"Returns a stream of instances for the given run."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"is-sat? :: Run -> boolean"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"is-unsat? :: Run -> boolean"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"Returns whether the given run res"
0 0 17 3 36 #"ulted in sat or unsat, respectively."
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; get-state :: Run-or-State -> State"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; If run-or-state is a State, returns it;"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; if it is a Run-spec or a Run, then returns its state."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-state"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 4 #"Run?"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 14 #"Run-spec-state"
0 0 24 3 2 #" ("
0 0 14 3 12 #"Run-run-spec"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 9 #"Run-spec?"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 14 #"Run-spec-state"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 6 #"State?"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 12 #"run-or-state"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; get-sig :: Run-or-State (|| Symbol Sig*) -> Sig"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; Returns the Sig of a given name/ast-relation from a run/state."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-sig"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 1 #" "
0 0 14 3 15 #"sig-name-or-rel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"sig-name"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 15 #"sig-name-or-rel"
0 0 24 3 2 #") "
0 0 14 3 15 #"sig-name-or-rel"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 19 #"node/expr/relation?"
0 0 24 3 1 #" "
0 0 14 3 15 #"sig-name-or-rel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 13 #"relation-name"
0 0 24 3 1 #" "
0 0 14 3 15 #"sig-name-or-rel"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"Sig?"
0 0 24 3 1 #" "
0 0 14 3 15 #"sig-name-or-rel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 15 #"sig-name-or-rel"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 10 #"State-sigs"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-state"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 3 #")) "
0 0 14 3 8 #"sig-name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; get-sigs :: Run-or-State, Relation*? -> List<Sig>"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; If a relation is provided, returns the column sigs;"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; otherwise, returns the Sigs of the given relation in a run/state."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-sigs"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 2 #" ["
0 0 14 3 8 #"relation"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-state"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 7 #"get-sig"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"Relation-sigs"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-relation"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 10 #"State-sigs"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #" )) "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 15 #"State-sig-order"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; get-top-level-sigs :: Run-or-State -> List<Sig>"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; Returns the Sigs in a run/state that do not extend another Sig."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"get-top-level-sigs"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compose"
0 0 24 3 1 #" "
0 0 14 3 4 #"@not"
0 0 24 3 1 #" "
0 0 14 3 11 #"Sig-extends"
0 0 24 3 3 #") ("
0 0 14 3 8 #"get-sigs"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; get-fields :: Run-or-State Sig* -> List<Relation>"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; Returns the relations whose first sig is the given sig."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-fields"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 1 #" "
0 0 14 3 10 #"sig-or-rel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"\302\240 ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-state"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"\302\240 ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-sig"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 10 #"sig-or-rel"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"\302\240 ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"relations"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-relations"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"\302\240 ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 8 #"relation"
0 0 24 3 1 #" "
0 0 14 3 9 #"relations"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 20
#"\302\240 \302\240 \302\240 \302\240 \302\240 \302\240 \302\240"
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-sigs"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 42
(4
 #"\302\240 \302\240 \302\240 \302\240 \302\240 \302\240 \302\240 "
 #"\302\240 \302\240 \302\240 \302\240 \302\240 \302\240 \302\240 "
) 0 0 14 3 3 #"sig"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"\302\240 \302\240 "
0 0 14 3 8 #"relation"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; get-relation :: Run-or-State, (|| Symbol Relation*) -> Relation"
0 0 24 29 1 #"\n"
0 0 17 3 69
(5
 #"; Returns the Relation of a given name/ast-relation from a run/state"
 #"."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-relation"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 1 #" "
0 0 14 3 20 #"relation-name-or-rel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 20 #"relation-name-or-rel"
0 0 24 3 2 #") "
0 0 14 3 20 #"relation-name-or-rel"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 19 #"node/expr/relation?"
0 0 24 3 1 #" "
0 0 14 3 20 #"relation-name-or-rel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 13 #"relation-name"
0 0 24 3 1 #" "
0 0 14 3 20 #"relation-name-or-rel"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 9 #"Relation?"
0 0 24 3 1 #" "
0 0 14 3 20 #"relation-name-or-rel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"Relation-name"
0 0 24 3 1 #" "
0 0 14 3 20 #"relation-name-or-rel"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 15 #"State-relations"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-state"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 3 #")) "
0 0 14 3 4 #"name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; get-relations :: Run-or-State -> List<Relation>"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; Returns the Relations in a run/state."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-relations"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-state"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 15 #"State-relations"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") )"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 20 #"State-relation-order"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; get-children :: Run-or-State, Sig* -> List<Sig>"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; Returns the children Sigs of a Sig."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-children"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 1 #" "
0 0 14 3 10 #"sig-or-rel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"children-names"
0 0 24 3 2 #" ("
0 0 14 3 13 #"Sig-extenders"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-sig"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 1 #" "
0 0 14 3 10 #"sig-or-rel"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"sig-map"
0 0 24 3 2 #" ("
0 0 14 3 10 #"State-sigs"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-state"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"sig-map"
0 0 24 3 2 #") "
0 0 14 3 14 #"children-names"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; get-result :: Run -> Stream"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; Returns a stream of instances for the given run."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-result"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"Run-result"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; get-pbinding :: Run-spec, Sig -> (|| List<List<Symbol>> #f)"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; Returns the partial binding in a given Run-spec"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; for a given Sig, returning #f if none present."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"get-sig-pbinding"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Bound-pbindings"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Run-spec-bounds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; get-pbinding :: Run-spec, Sig -> (|| List<List<Symbol>> #f)"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; Returns the total binding in a given Run-spec"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; for a given Sig, returning #f if none present."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"get-sig-tbinding"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Bound-tbindings"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Run-spec-bounds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; get-pbinding :: Run-spec, Relation -> (|| List<List<Symbol>> #f)"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; Returns the partial binding in a given Run-spec"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; for a given Relation, returning #f if none present."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"get-relation-pbinding"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Bound-pbindings"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Run-spec-bounds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"Relation-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; get-tbinding :: Run-spec, Relation -> (|| List<List<Symbol>> #f)"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; Returns the total binding in a given Run-spec"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; for a given Relation, returning #f if none present."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"get-relation-tbinding"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Bound-tbindings"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Run-spec-bounds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"Relation-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; get-scope :: (|| Run-spec Scope), (|| Sig Symbol) -> Range"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Returns the run bound of a Sig, in order:"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; - if it is Int, then returns (Range 2^bitwidth 2^bitwidth);"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; - if an explicit bound is given, returns it;"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; - if a default bound is given; returns it;"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; - return DEFAULT-SIG-BOUND"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-scope"
0 0 24 3 1 #" "
0 0 14 3 17 #"run-spec-or-scope"
0 0 24 3 1 #" "
0 0 14 3 11 #"sig-or-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"Scope?"
0 0 24 3 1 #" "
0 0 14 3 17 #"run-spec-or-scope"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 17 #"run-spec-or-scope"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 9 #"Run-spec?"
0 0 24 3 1 #" "
0 0 14 3 17 #"run-spec-or-scope"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"Run-spec-scope"
0 0 24 3 1 #" "
0 0 14 3 17 #"run-spec-or-scope"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"sig-name"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 4 #"Sig?"
0 0 24 3 1 #" "
0 0 14 3 11 #"sig-or-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"sig-or-name"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 11 #"sig-or-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 11 #"sig-or-name"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 8 #"sig-name"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 8 #"bitwidth"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-bitwidth"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 8 #"num-ints"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 8 #"bitwidth"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"Range"
0 0 24 3 1 #" "
0 0 14 3 8 #"num-ints"
0 0 24 3 1 #" "
0 0 14 3 8 #"num-ints"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 9 #"scope-map"
0 0 24 3 2 #" ("
0 0 14 3 16 #"Scope-sig-scopes"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 15 3 13 #"default-scope"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 19 #"Scope-default-scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 14 3 17 #"DEFAULT-SIG-SCOPE"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"scope-map"
0 0 24 3 1 #" "
0 0 14 3 8 #"sig-name"
0 0 24 3 1 #" "
0 0 15 3 13 #"default-scope"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; get-bitwidth :: (|| Run-spec Scope) -> int"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; Returns the bitwidth for a run/scope, returning the"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; DEFAULT-BITWIDTH if none is provided."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-bitwidth"
0 0 24 3 1 #" "
0 0 14 3 17 #"run-spec-or-scope"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 9 #"Run-spec?"
0 0 24 3 1 #" "
0 0 14 3 17 #"run-spec-or-scope"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"Run-spec-scope"
0 0 24 3 1 #" "
0 0 14 3 17 #"run-spec-or-scope"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 6 #"Scope?"
0 0 24 3 1 #" "
0 0 14 3 17 #"run-spec-or-scope"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 17 #"run-spec-or-scope"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 14 #"Scope-bitwidth"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 16 #"DEFAULT-BITWIDTH"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; get-all-rels :: (|| Run Run-spec) -> List<AST-Relation>"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; Returns a list of all sigs, then all relations, as"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; their rels in the order they were defined; if given a Run,"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; includes all of the additional relations used for individual"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; atom access by the evaluator. "
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; Used for translate to kodkod-cli."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-all-rels"
0 0 24 3 1 #" "
0 0 14 3 11 #"run-or-spec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 9 #"Run-spec?"
0 0 24 3 1 #" "
0 0 14 3 11 #"run-or-spec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 11 #"run-or-spec"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"append"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 7 #"Sig-rel"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-sigs"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 12 #"Relation-rel"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-relations"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"Run?"
0 0 24 3 1 #" "
0 0 14 3 11 #"run-or-spec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 11 #"run-or-spec"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #" ("
0 0 14 3 12 #"Run-run-spec"
0 0 24 3 1 #" "
0 0 14 3 11 #"run-or-spec"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"append"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 7 #"Sig-rel"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-sigs"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 12 #"Relation-rel"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-relations"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 7 #"))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; get-relation-map :: (|| Run Run-spec) -> Map<Symbol, AST-Relation>"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; Returns a map from names to AST-Relations."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"get-relation-map"
0 0 24 3 1 #" "
0 0 14 3 11 #"run-or-spec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 8 #"for/hash"
0 0 24 3 3 #" (["
0 0 14 3 3 #"rel"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-all-rels"
0 0 24 3 1 #" "
0 0 14 3 11 #"run-or-spec"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 13 #"relation-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 14 3 3 #"rel"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; get-stdin :: Run -> input-port?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-stdin"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 18 #"Server-ports-stdin"
0 0 24 3 2 #" ("
0 0 14 3 16 #"Run-server-ports"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; get-stdin :: Run -> output-port?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-stdout"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"Server-ports-stdout"
0 0 24 3 2 #" ("
0 0 14 3 16 #"Run-server-ports"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; get-option :: Run-or-state Symbol -> Any"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-option"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 1 #" "
0 0 14 3 6 #"option"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-state"
0 0 24 3 1 #" "
0 0 14 3 12 #"run-or-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"symbol->proc"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"hash"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"solver"
0 0 24 3 1 #" "
0 0 14 3 14 #"Options-solver"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"'"
0 0 14 3 7 #"backend"
0 0 24 3 1 #" "
0 0 14 3 15 #"Options-backend"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"'"
0 0 14 3 2 #"sb"
0 0 24 3 1 #" "
0 0 14 3 10 #"Options-sb"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"'"
0 0 14 3 15 #"coregranularity"
0 0 24 3 1 #" "
0 0 14 3 23 #"Options-coregranularity"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"'"
0 0 14 3 14 #"logtranslation"
0 0 24 3 1 #" "
0 0 14 3 22 #"Options-logtranslation"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 12 #"symbol->proc"
0 0 24 3 1 #" "
0 0 14 3 6 #"option"
0 0 24 3 3 #") ("
0 0 14 3 13 #"State-options"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;; State Updaters  ;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; sig-add-extender :: Sig, Symbol -> Sig"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; Adds a new extender to the given Sig."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"sig-add-extender"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 1 #" "
0 0 14 3 8 #"extender"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"new-extenders"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 13 #"Sig-extenders"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 8 #"extender"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 3 #"Sig"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 9 #"extenders"
0 0 24 3 1 #" "
0 0 14 3 13 #"new-extenders"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; state-add-runmap :: State, symbol, Run -> State"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"state-add-runmap"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 5 #"State"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 6 #"runmap"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-set"
0 0 24 3 2 #" ("
0 0 14 3 12 #"State-runmap"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; state-add-sig :: State, Symbol, bool, bool, (Symbol | #f) -> State"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; Adds a new Sig to the given State; if new Sig extends some"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; other Sig, then updates that Sig with extension."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"state-add-sig"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 3 #"one"
0 0 24 3 1 #" "
0 0 14 3 8 #"abstract"
0 0 24 3 1 #" "
0 0 14 3 7 #"extends"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 15 #"State-sig-order"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 45 #"\"tried to add sig ~a, but it already existed\""
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-sig"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Sig"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 3 #"one"
0 0 24 3 1 #" "
0 0 14 3 8 #"abstract"
0 0 24 3 1 #" "
0 0 14 3 7 #"extends"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 4 #"@and"
0 0 24 3 1 #" "
0 0 14 3 7 #"extends"
0 0 24 3 2 #" ("
0 0 14 3 4 #"@not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 7 #"extends"
0 0 24 3 2 #" ("
0 0 14 3 15 #"State-sig-order"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"Can't extend nonexistent sig.\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"sigs-with-new-sig"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-set"
0 0 24 3 2 #" ("
0 0 14 3 10 #"State-sigs"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-sig"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-state-sigs"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 7 #"extends"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"hash-set"
0 0 24 3 1 #" "
0 0 14 3 17 #"sigs-with-new-sig"
0 0 24 3 1 #" "
0 0 14 3 7 #"extends"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 16 #"sig-add-extender"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 10 #"State-sigs"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 7 #"extends"
0 0 24 3 2 #") "
0 0 14 3 4 #"name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 17 #"sigs-with-new-sig"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"new-state-sig-order"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 15 #"State-sig-order"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 5 #"State"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 4 #"sigs"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-state-sigs"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 9 #"sig-order"
0 0 24 3 1 #" "
0 0 14 3 19 #"new-state-sig-order"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; state-add-relation :: State, Symbol, List<Sig>, Symbol?-> State"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; Adds a new relation to the given State."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"state-add-relation"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 8 #"rel-sigs"
0 0 24 3 2 #" ["
0 0 14 3 7 #"breaker"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 20 #"State-relation-order"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 50 #"\"tried to add relation ~a, but it already existed\""
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-relation"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Relation"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 8 #"rel-sigs"
0 0 24 3 1 #" "
0 0 14 3 7 #"breaker"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"new-state-relations"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-set"
0 0 24 3 2 #" ("
0 0 14 3 15 #"State-relations"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-relation"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"new-state-relation-order"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 20 #"State-relation-order"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 5 #"State"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 9 #"relations"
0 0 24 3 1 #" "
0 0 14 3 19 #"new-state-relations"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 14 #"relation-order"
0 0 24 3 1 #" "
0 0 14 3 24 #"new-state-relation-order"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; state-add-predicate :: State, Symbol -> State"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; Adds a new predicate to the given State."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"state-add-predicate"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"new-state-predicates"
0 0 24 3 2 #" ("
0 0 14 3 7 #"set-add"
0 0 24 3 2 #" ("
0 0 14 3 16 #"State-predicates"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 4 #"name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 5 #"State"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 10 #"predicates"
0 0 24 3 1 #" "
0 0 14 3 20 #"new-state-predicates"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; state-add-function :: State, Symbol -> State"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; Adds a new function to the given State."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"state-add-function"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"new-state-functions"
0 0 24 3 2 #" ("
0 0 14 3 7 #"set-add"
0 0 24 3 2 #" ("
0 0 14 3 15 #"State-functions"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 4 #"name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 5 #"State"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 9 #"functions"
0 0 24 3 1 #" "
0 0 14 3 19 #"new-state-functions"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; state-add-constant :: State, Symbol -> State"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; Adds a new constant to the given State."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"state-add-constant"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"new-state-constants"
0 0 24 3 2 #" ("
0 0 14 3 7 #"set-add"
0 0 24 3 2 #" ("
0 0 14 3 15 #"State-constants"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 4 #"name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 5 #"State"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 9 #"constants"
0 0 24 3 1 #" "
0 0 14 3 19 #"new-state-constants"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; state-set-option :: State, Symbol, Symbol -> State"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; Sets option to value for state."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"state-set-option"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"option"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"options"
0 0 24 3 2 #" ("
0 0 14 3 13 #"State-options"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"option-types"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"hash"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"solver"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"'"
0 0 14 3 7 #"backend"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 39 #"; 'verbosity exact-nonnegative-integer?"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"'"
0 0 14 3 2 #"sb"
0 0 24 3 1 #" "
0 0 14 3 26 #"exact-nonnegative-integer?"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"'"
0 0 14 3 15 #"coregranularity"
0 0 24 3 1 #" "
0 0 14 3 26 #"exact-nonnegative-integer?"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"'"
0 0 14 3 14 #"logtranslation"
0 0 24 3 1 #" "
0 0 14 3 26 #"exact-nonnegative-integer?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 24 3 3 #" (("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 12 #"option-types"
0 0 24 3 1 #" "
0 0 14 3 6 #"option"
0 0 24 3 2 #") "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"raise"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 44 #"\"Setting option ~a requires ~a; received ~a\""
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 6 #"option"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 12 #"option-types"
0 0 24 3 1 #" "
0 0 14 3 6 #"option"
0 0 24 3 2 #") "
0 0 14 3 5 #"value"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"new-options"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"option"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"solver"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 7 #"Options"
0 0 24 3 1 #" "
0 0 14 3 7 #"options"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 6 #"solver"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #"])]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"option"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"backend"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 7 #"Options"
0 0 24 3 1 #" "
0 0 14 3 7 #"options"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 7 #"backend"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #"])]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 29 #"; [(equal? option 'verbosity)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 31 #";  (struct-copy Options options"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 35 #";               [verbosity value])]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"option"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"sb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 7 #"Options"
0 0 24 3 1 #" "
0 0 14 3 7 #"options"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 2 #"sb"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #"])]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"option"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"coregranularity"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 7 #"Options"
0 0 24 3 1 #" "
0 0 14 3 7 #"options"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 15 #"coregranularity"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #"])]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"option"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 14 #"logtranslation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 7 #"Options"
0 0 24 3 1 #" "
0 0 14 3 7 #"options"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 14 #"logtranslation"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 5 #"])]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 5 #"State"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 7 #"options"
0 0 24 3 1 #" "
0 0 14 3 11 #"new-options"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; AST macros"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 19 #"define-simple-macro"
0 0 24 3 2 #" ("
0 0 14 3 7 #"implies"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 19 #"define-simple-macro"
0 0 24 3 2 #" ("
0 0 14 3 3 #"iff"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 19 #"define-simple-macro"
0 0 24 3 2 #" ("
0 0 14 3 3 #"<=>"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 19 #"define-simple-macro"
0 0 24 3 2 #" ("
0 0 14 3 4 #"ifte"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 2 #"=>"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 19 #"define-simple-macro"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 4 #"int="
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 19 #"define-simple-macro"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 4 #"int="
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 19 #"define-simple-macro"
0 0 24 3 2 #" ("
0 0 14 3 2 #"ni"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 19 #"define-simple-macro"
0 0 24 3 2 #" ("
0 0 14 3 2 #"!="
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 19 #"define-simple-macro"
0 0 24 3 2 #" ("
0 0 14 3 3 #"!in"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 19 #"define-simple-macro"
0 0 24 3 2 #" ("
0 0 14 3 3 #"!ni"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 2 #"ni"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;; Forge Commands  ;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; The environment threaded through commands"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"curr-state"
0 0 24 3 1 #" "
0 0 14 3 10 #"init-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"update-state!"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-state"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"curr-state"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Declare a new sig."
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; (sig name [|| [#:one] [#:abstract]] [#:extends parent])"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sig"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"sig"
0 0 24 3 1 #" "
0 0 14 3 7 #"name:id"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~alt"
0 0 24 3 2 #" ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 9 #"#:extends"
0 0 24 3 1 #" "
0 0 14 3 11 #"parent:expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 3 #"~or"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~and"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:one"
0 0 24 3 1 #" "
0 0 14 3 6 #"one-kw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 4 #"~seq"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~and"
0 0 24 3 1 #" "
0 0 23 3 10 #"#:abstract"
0 0 24 3 1 #" "
0 0 14 3 11 #"abstract-kw"
0 0 24 3 6 #"))))) "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"true-name"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"true-one"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~@"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"one-kw"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"~@"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"true-abstract"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~@"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"abstract-kw"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"~@"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"true-parent"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-sig"
0 0 24 3 1 #" "
0 0 14 3 10 #"curr-state"
0 0 24 3 1 #" "
0 0 14 3 6 #"parent"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 16 #"declare-relation"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 9 #"true-name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 11 #"true-parent"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"univ"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 9 #"true-name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"update-state!"
0 0 24 3 2 #" ("
0 0 14 3 13 #"state-add-sig"
0 0 24 3 1 #" "
0 0 14 3 10 #"curr-state"
0 0 24 3 1 #" "
0 0 14 3 9 #"true-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 8 #"true-one"
0 0 24 3 1 #" "
0 0 14 3 13 #"true-abstract"
0 0 24 3 1 #" "
0 0 14 3 11 #"true-parent"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; Declare a new relation"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; (relation name (sig sig sig ...))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 24 3 2 #" ("
0 0 14 3 8 #"relation"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"relation"
0 0 24 3 1 #" "
0 0 14 3 7 #"name:id"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sig1:id"
0 0 24 3 1 #" "
0 0 14 3 7 #"sig2:id"
0 0 24 3 1 #" "
0 0 14 3 4 #"sigs"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 4 #"#:is"
0 0 24 3 1 #" "
0 0 14 3 10 #"breaker:id"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"true-name"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"true-sigs"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"sig1"
0 0 24 3 1 #" "
0 0 14 3 4 #"sig2"
0 0 24 3 1 #" "
0 0 14 3 4 #"sigs"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 94
(6
 #"; (define true-sigs (map (compose Sig-name ;;; Bugged since relation"
 #" before sig in #lang forge"
) 0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 62
#";                                 (curry get-sig curr-state ))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 52 #";                        (list sig1 sig2 sigs ...)))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"true-breaker"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"breaker"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 16 #"declare-relation"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 9 #"true-sigs"
0 0 24 3 3 #") ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"sig1"
0 0 24 3 3 #") ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 9 #"true-name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 13 #"update-state!"
0 0 24 3 2 #" ("
0 0 14 3 18 #"state-add-relation"
0 0 24 3 1 #" "
0 0 14 3 10 #"curr-state"
0 0 24 3 1 #" "
0 0 14 3 9 #"true-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 9 #"true-sigs"
0 0 24 3 1 #" "
0 0 14 3 12 #"true-breaker"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; Declare a new predicate"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; (pred name cond ...)"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; (pred (name var ...) cond ...)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 7 #"name:id"
0 0 24 3 1 #" "
0 0 14 3 10 #"conds:expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"...+"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 2 #"&&"
0 0 24 3 1 #" "
0 0 14 3 5 #"conds"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"update-state!"
0 0 24 3 2 #" ("
0 0 14 3 19 #"state-add-predicate"
0 0 24 3 1 #" "
0 0 14 3 10 #"curr-state"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"name"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 7 #"name:id"
0 0 24 3 1 #" "
0 0 14 3 7 #"args:id"
0 0 24 3 1 #" "
0 0 14 3 4 #"...+"
0 0 24 3 2 #") "
0 0 14 3 10 #"conds:expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"...+"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 14 3 2 #"&&"
0 0 24 3 1 #" "
0 0 14 3 5 #"conds"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"update-state!"
0 0 24 3 2 #" ("
0 0 14 3 19 #"state-add-predicate"
0 0 24 3 1 #" "
0 0 14 3 10 #"curr-state"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"name"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; Declare a new function"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; (fun (name var ...) result)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 24 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"fun"
0 0 24 3 2 #" ("
0 0 14 3 7 #"name:id"
0 0 24 3 1 #" "
0 0 14 3 7 #"args:id"
0 0 24 3 1 #" "
0 0 14 3 4 #"...+"
0 0 24 3 2 #") "
0 0 14 3 11 #"result:expr"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 14 3 6 #"result"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"update-state!"
0 0 24 3 2 #" ("
0 0 14 3 18 #"state-add-function"
0 0 24 3 1 #" "
0 0 14 3 10 #"curr-state"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"name"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; Declare a new constant"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; (const name value)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 24 3 2 #" ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 14 3 7 #"name:id"
0 0 24 3 1 #" "
0 0 14 3 10 #"value:expr"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"update-state!"
0 0 24 3 2 #" ("
0 0 14 3 18 #"state-add-constant"
0 0 24 3 1 #" "
0 0 14 3 10 #"curr-state"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"name"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Define a new bounding instance"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; (inst name binding ...)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-syntax-rule"
0 0 24 3 2 #" ("
0 0 14 3 4 #"inst"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"binds"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"bound"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"set!-values"
0 0 24 3 2 #" ("
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"bound"
0 0 24 3 3 #") ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"bound"
0 0 24 3 1 #" "
0 0 14 3 5 #"binds"
0 0 24 3 3 #")) "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"bound"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Run a given spec"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; (run name"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";      [#:pred [(pred ...)]] "
0 0 24 29 1 #"\n"
0 0 17 3 46 #";      [#:scope [((sig [lower 0] upper) ...)]]"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";      [#:inst instance-name])"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"command"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"~a\""
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 7 #"name:id"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"~alt"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 3 #"~or"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:preds"
0 0 24 3 2 #" ("
0 0 14 3 5 #"preds"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:preds"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:scope"
0 0 24 3 3 #" (("
0 0 14 3 6 #"sig:id"
0 0 24 3 2 #" ("
0 0 14 3 9 #"~optional"
0 0 24 3 1 #" "
0 0 14 3 9 #"lower:nat"
0 0 24 3 1 #" "
0 0 23 3 10 #"#:defaults"
0 0 24 3 3 #" (["
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 21 3 3 #"#'0"
0 0 24 3 4 #"])) "
0 0 14 3 9 #"upper:nat"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 3 #"~or"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:bounds"
0 0 24 3 2 #" ("
0 0 14 3 7 #"boundss"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:bounds"
0 0 24 3 1 #" "
0 0 14 3 5 #"bound"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:solver"
0 0 24 3 1 #" "
0 0 14 3 13 #"solver-choice"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 9 #"#:backend"
0 0 24 3 1 #" "
0 0 14 3 14 #"backend-choice"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:target"
0 0 24 3 1 #" "
0 0 14 3 15 #"target-instance"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 17 #"#:target-distance"
0 0 24 3 1 #" "
0 0 14 3 15 #"target-distance"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 3 #"~or"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~and"
0 0 24 3 1 #" "
0 0 23 3 16 #"#:target-compare"
0 0 24 3 1 #" "
0 0 14 3 14 #"target-compare"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"~and"
0 0 24 3 1 #" "
0 0 23 3 17 #"#:target-contrast"
0 0 24 3 1 #" "
0 0 14 3 15 #"target-contrast"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 2 #"#`"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-name"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~@"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 2 #"~@"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 16 #"no-name-provided"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"run-state"
0 0 24 3 1 #" "
0 0 14 3 10 #"curr-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"run-preds"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"preds"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"run-state"
0 0 24 3 2 #" ("
0 0 14 3 16 #"state-set-option"
0 0 24 3 1 #" "
0 0 14 3 9 #"run-state"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"solver"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"solver-choice"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"run-state"
0 0 24 3 2 #" ("
0 0 14 3 16 #"state-set-option"
0 0 24 3 1 #" "
0 0 14 3 9 #"run-state"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"backend"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 14 #"backend-choice"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"sig-scopes"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"~@"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 8 #"for/hash"
0 0 24 3 3 #" (["
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-sig"
0 0 24 3 1 #" "
0 0 14 3 10 #"curr-state"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 3 #")) "
0 0 14 3 3 #"..."
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 2 #"lo"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 2 #"hi"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Range"
0 0 24 3 1 #" "
0 0 14 3 2 #"lo"
0 0 24 3 1 #" "
0 0 14 3 2 #"hi"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"~@"
0 0 24 3 2 #" ("
0 0 14 3 4 #"hash"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"bitwidth"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 13 #"hash-has-key?"
0 0 24 3 1 #" "
0 0 14 3 10 #"sig-scopes"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 15 3 6 #"begin0"
0 0 24 3 2 #" ("
0 0 14 3 11 #"Range-upper"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"sig-scopes"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"sig-scopes"
0 0 24 3 2 #" ("
0 0 14 3 11 #"hash-remove"
0 0 24 3 1 #" "
0 0 14 3 10 #"sig-scopes"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                             "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 17 #"default-sig-scope"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 13 #"hash-has-key?"
0 0 24 3 1 #" "
0 0 14 3 10 #"sig-scopes"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 7 #"default"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 15 3 6 #"begin0"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"sig-scopes"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 7 #"default"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"sig-scopes"
0 0 24 3 2 #" ("
0 0 14 3 11 #"hash-remove"
0 0 24 3 1 #" "
0 0 14 3 10 #"sig-scopes"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 7 #"default"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"base-scope"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Scope"
0 0 24 3 1 #" "
0 0 15 3 17 #"default-sig-scope"
0 0 24 3 1 #" "
0 0 14 3 8 #"bitwidth"
0 0 24 3 1 #" "
0 0 14 3 10 #"sig-scopes"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 13 #"default-bound"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 7 #"max-int"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 8 #"bitwidth"
0 0 24 3 1 #" "
0 0 14 3 16 #"DEFAULT-BITWIDTH"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 4 #"ints"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 8 #"int-atom"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"max-int"
0 0 24 3 2 #") "
0 0 14 3 7 #"max-int"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 5 #"succs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 4 #"ints"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"ints"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"Bound"
0 0 24 3 2 #" ("
0 0 14 3 4 #"hash"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"hash"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"ints"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 21 3 1 #"'"
0 0 14 3 4 #"succ"
0 0 24 3 1 #" "
0 0 14 3 5 #"succs"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-inst"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 6 #"bounds"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 4 #"sigg"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-sigs"
0 0 24 3 1 #" "
0 0 14 3 9 #"run-state"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Sig-one"
0 0 24 3 1 #" "
0 0 14 3 4 #"sigg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"set!-values"
0 0 24 3 2 #" ("
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 6 #"bounds"
0 0 24 3 3 #") ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 6 #"bounds"
0 0 24 3 2 #" ("
0 0 14 3 3 #"one"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Sig-rel"
0 0 24 3 1 #" "
0 0 14 3 4 #"sigg"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~@"
0 0 24 3 2 #" ("
0 0 14 3 11 #"set!-values"
0 0 24 3 2 #" ("
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 6 #"bounds"
0 0 24 3 3 #") ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 6 #"bounds"
0 0 24 3 1 #" "
0 0 14 3 7 #"boundss"
0 0 24 3 3 #")) "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"set!-values"
0 0 24 3 2 #" ("
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 6 #"bounds"
0 0 24 3 3 #") ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 6 #"bounds"
0 0 24 3 1 #" "
0 0 14 3 5 #"bound"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 6 #"bounds"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 9 #"run-scope"
0 0 24 3 1 #" "
0 0 14 3 9 #"run-bound"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"run-inst"
0 0 24 3 1 #" "
0 0 14 3 10 #"base-scope"
0 0 24 3 1 #" "
0 0 15 3 13 #"default-bound"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"run-target"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Target"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 15 #"target-instance"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 2 #"~?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"target-distance"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"close"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"unless"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"target-distance"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"close"
0 0 24 3 1 #" "
0 0 14 3 3 #"far"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"raise"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 55 #"\"Target distance expected one of (close, far); got ~a.\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"target-distance"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"target-contrast"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"run-preds"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 5 #"preds"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 5 #"))) ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"run-command"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 7 #"command"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Run-spec"
0 0 24 3 1 #" "
0 0 14 3 9 #"run-state"
0 0 24 3 1 #" "
0 0 14 3 9 #"run-preds"
0 0 24 3 1 #" "
0 0 14 3 9 #"run-scope"
0 0 24 3 1 #" "
0 0 14 3 9 #"run-bound"
0 0 24 3 1 #" "
0 0 14 3 10 #"run-target"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 10 #"run-result"
0 0 24 3 1 #" "
0 0 14 3 5 #"atoms"
0 0 24 3 1 #" "
0 0 14 3 12 #"server-ports"
0 0 24 3 1 #" "
0 0 14 3 13 #"kodkod-bounds"
0 0 24 3 3 #") ("
0 0 14 3 14 #"send-to-kodkod"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Run"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"run-command"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 10 #"run-result"
0 0 24 3 1 #" "
0 0 14 3 12 #"server-ports"
0 0 24 3 1 #" "
0 0 14 3 5 #"atoms"
0 0 24 3 1 #" "
0 0 14 3 13 #"kodkod-bounds"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"update-state!"
0 0 24 3 2 #" ("
0 0 14 3 16 #"state-add-runmap"
0 0 24 3 1 #" "
0 0 14 3 10 #"curr-state"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; Test that a spec is sat or unsat"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; (test name"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";       [#:preds [(pred ...)]] "
0 0 24 29 1 #"\n"
0 0 17 3 47 #";       [#:scope [((sig [lower 0] upper) ...)]]"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";       [#:bounds [bound ...]]"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";       [|| sat unsat]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-syntax-rule"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #" "
0 0 23 3 8 #"#:expect"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"sat"
0 0 24 3 1 #" "
0 0 14 3 5 #"unsat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"first-instance"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-first"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Run-result"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"unless"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 14 #"first-instance"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 8 #"expected"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"raise"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"Failed test ~a. Expected ~a, got ~a.~a\""
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 21 3 1 #"'"
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"expected"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 14 #"first-instance"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 14 #"first-instance"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"sat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"~nFound instance ~a\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 14 #"first-instance"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 19 3 2 #"\"\""
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"theorem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"check"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"first-instance"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-first"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Run-result"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"unless"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 14 #"first-instance"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"unsat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"raise"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"Theorem ~a failed. Found instance:~n~a\""
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 21 3 1 #"'"
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 14 #"first-instance"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"raise"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 73
(7
 #"\"Illegal argument to test. Received ~a, expected sat, unsat, or the"
 #"orem.\""
) 0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 21 3 1 #"'"
0 0 14 3 8 #"expected"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; Checks that some predicates are always true."
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; (check name"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";        #:preds [(pred ...)]"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";        [#:scope [((sig [lower 0] upper) ...)]]"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";        [#:bounds [bound ...]]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 24 3 2 #" ("
0 0 14 3 5 #"check"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"check"
0 0 24 3 1 #" "
0 0 14 3 7 #"name:id"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"~alt"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:preds"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:scope"
0 0 24 3 3 #" (("
0 0 14 3 6 #"sig:id"
0 0 24 3 2 #" ("
0 0 14 3 9 #"~optional"
0 0 24 3 1 #" "
0 0 14 3 9 #"lower:nat"
0 0 24 3 1 #" "
0 0 23 3 10 #"#:defaults"
0 0 24 3 3 #" (["
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 21 3 3 #"#'0"
0 0 24 3 4 #"])) "
0 0 14 3 9 #"upper:nat"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"~optional"
0 0 24 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:bounds"
0 0 24 3 2 #" ("
0 0 14 3 5 #"bound"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 5 #")))) "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~@"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:preds"
0 0 24 3 3 #" [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~@"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:scope"
0 0 24 3 3 #" (["
0 0 14 3 3 #"sig"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #"] "
0 0 14 3 3 #"..."
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"~?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~@"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:bounds"
0 0 24 3 2 #" ("
0 0 14 3 5 #"bound"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 7 #"))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; Exprimental: Run in the context of a given external Forge spec"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; (with path-to-forge-spec commands ...)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 24 3 2 #" ("
0 0 14 3 4 #"with"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"with"
0 0 24 3 1 #" "
0 0 14 3 11 #"module-name"
0 0 24 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 10 #"temp-state"
0 0 24 3 1 #" "
0 0 14 3 10 #"curr-state"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"local-require"
0 0 24 3 1 #" "
0 0 14 3 11 #"module-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 5 #"exprs"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"tests\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"update-state!"
0 0 24 3 1 #" "
0 0 14 3 10 #"temp-state"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 8 #"instance"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 24 3 2 #" ("
0 0 14 3 7 #"is-sat?"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"raise"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 45 #"\"Can't evaluate on unsat run. Expression: ~a\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 9 #"expr-name"
0 0 24 3 1 #" "
0 0 14 3 12 #"interpretter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 10 #"node/expr?"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #") ("
0 0 15 3 6 #"begin0"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 8 #"kodkod:e"
0 0 24 3 2 #" ("
0 0 14 3 18 #"current-expression"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 14 #"interpret-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 18 #"current-expression"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 18 #"current-expression"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 13 #"node/formula?"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #") ("
0 0 15 3 6 #"begin0"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 8 #"kodkod:f"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-formula"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 17 #"interpret-formula"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 15 #"current-formula"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-formula"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 9 #"node/int?"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #") ("
0 0 15 3 6 #"begin0"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 8 #"kodkod:i"
0 0 24 3 2 #" ("
0 0 14 3 22 #"current-int-expression"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 13 #"interpret-int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 22 #"current-int-expression"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 22 #"current-int-expression"
0 0 24 3 7 #"))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"all-rels"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-all-rels"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"atom-names"
0 0 24 3 2 #" ("
0 0 14 3 9 #"Run-atoms"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"kodkod:cmd"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 9 #"get-stdin"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 21 #"kodkod:print-cmd-cont"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"(~a \""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"interpretter"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 8 #"all-rels"
0 0 24 3 1 #" "
0 0 14 3 10 #"atom-names"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"kodkod:print-cmd"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"kodkod:print-cmd"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"(evaluate ~a)\""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"kodkod:print-eof"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"run-atoms"
0 0 24 3 2 #" ("
0 0 14 3 9 #"Run-atoms"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 36 #"translate-evaluation-from-kodkod-cli"
0 0 24 3 2 #" ("
0 0 14 3 22 #"kodkod:read-evaluation"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-stdout"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 3 #")) "
0 0 14 3 9 #"run-atoms"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;; Result Functions ;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; is-sat? :: Run -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; Checks if a given run result is 'sat"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"is-sat?"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"first-instance"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-first"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Run-result"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 14 #"first-instance"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"sat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; is-unsat? :: Run -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; Checks if a given run result is 'unsat"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"is-unsat?"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"first-instance"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-first"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Run-result"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 14 #"first-instance"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"unsat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; make-model-generator :: Stream<model> -> (-> model)"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; Creates a thunk which generates a new model on each call."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"make-model-generator"
0 0 24 3 1 #" "
0 0 14 3 12 #"model-stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"thunk"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"ret"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-first"
0 0 24 3 1 #" "
0 0 14 3 12 #"model-stream"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"model-stream"
0 0 24 3 2 #" ("
0 0 14 3 11 #"stream-rest"
0 0 24 3 1 #" "
0 0 14 3 12 #"model-stream"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"ret"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; ; make-model-evaluator :: Run -> (String -> ???)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; ; Creates an evaluator function for a given Run. "
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; ; Executes on the most recently generated instance."
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; (define (make-model-evaluator run)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";   (lambda (command)"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";     (define name (substring command 1 3))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";     (cmd [(stdin)] "
0 0 24 29 1 #"\n"
0 0 17 3 27 #";       (print-cmd command)"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";       (print-cmd \"(evaluate ~a)\" name)"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";       (print-eof))"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";     (define result (read (stdout)))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";     result))"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";     ; (define u (read (open-input-string command)))"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";     ; (println u)"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";     ; u))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 2 #" ("
0 0 14 3 10 #"prefix-out"
0 0 24 3 1 #" "
0 0 14 3 6 #"forge:"
0 0 24 3 1 #" "
0 0 14 3 3 #"nsa"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"nsa"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-parameter"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; display :: Run -> void"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; Lifted function which, when provided a Run,"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; generates a Sterling instance for it."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg1"
0 0 24 3 2 #" ["
0 0 14 3 4 #"arg2"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"@not"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Run?"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg2"
0 0 24 3 2 #" ("
0 0 14 3 8 #"@display"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg1"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg2"
0 0 24 3 3 #") ("
0 0 14 3 8 #"@display"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"model-stream"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Run-result"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"get-next-model"
0 0 24 3 2 #" ("
0 0 14 3 20 #"make-model-generator"
0 0 24 3 1 #" "
0 0 14 3 12 #"model-stream"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"evaluate-str"
0 0 24 3 1 #" "
0 0 14 3 11 #"str-command"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 7 #"in-pipe"
0 0 24 3 1 #" "
0 0 14 3 8 #"out-pipe"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-pipe"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 30 #"; Write string command to pipe"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"write-string"
0 0 24 3 1 #" "
0 0 14 3 11 #"str-command"
0 0 24 3 1 #" "
0 0 14 3 8 #"out-pipe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 17 #"close-output-port"
0 0 24 3 1 #" "
0 0 14 3 8 #"out-pipe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 13 #"with-handlers"
0 0 24 3 4 #" ([("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exn"
0 0 24 3 3 #") ("
0 0 14 3 11 #"exn-message"
0 0 24 3 1 #" "
0 0 14 3 3 #"exn"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 34 #"; Read command as syntax from pipe"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"command-syntax"
0 0 24 3 2 #" ("
0 0 14 3 11 #"read-syntax"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"eval-pipe"
0 0 24 3 1 #" "
0 0 14 3 7 #"in-pipe"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 16 #"close-input-port"
0 0 24 3 1 #" "
0 0 14 3 7 #"in-pipe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 18 #"; Evaluate command"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ns"
0 0 24 3 2 #" ("
0 0 14 3 27 #"namespace-anchor->namespace"
0 0 24 3 2 #" ("
0 0 14 3 3 #"nsa"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"command"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 14 #"command-syntax"
0 0 24 3 1 #" "
0 0 14 3 2 #"ns"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 14 3 7 #"command"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"evaluate"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 7 #"command"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 28 #"get-contrast-model-generator"
0 0 24 3 1 #" "
0 0 14 3 5 #"model"
0 0 24 3 1 #" "
0 0 14 3 7 #"compare"
0 0 24 3 1 #" "
0 0 14 3 8 #"distance"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"unless"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 8 #"distance"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"close"
0 0 24 3 1 #" "
0 0 14 3 3 #"far"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"raise"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 64
#"\"Contrast model distance expected one of ('close, 'far); got ~a\""
0 0 24 3 1 #" "
0 0 14 3 8 #"distance"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"unless"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 7 #"compare"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"compare"
0 0 24 3 1 #" "
0 0 14 3 8 #"contrast"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"raise"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 70
(8
 #"\"Contrast model compare expected one of ('compare, 'contrast); got "
 #"~a\""
) 0 0 24 3 1 #" "
0 0 14 3 7 #"compare"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-state"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 9 #"old-state"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-state"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 16 #"state-set-option"
0 0 24 3 2 #" ("
0 0 14 3 16 #"state-set-option"
0 0 24 3 1 #" "
0 0 14 3 9 #"old-state"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"backend"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"pardinus"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 21 3 1 #"'"
0 0 14 3 6 #"solver"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"TargetSATSolver"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-preds"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 7 #"compare"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"compare"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 14 #"Run-spec-preds"
0 0 24 3 2 #" ("
0 0 14 3 12 #"Run-run-spec"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"foldr"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 4 #"true"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 14 #"Run-spec-preds"
0 0 24 3 2 #" ("
0 0 14 3 12 #"Run-run-spec"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"new-target"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"Target"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 8 #"for/hash"
0 0 24 3 4 #" ([("
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"model"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 7 #"Sig-rel"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-sigs"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 12 #"Relation-rel"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-relations"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-state"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 8 #"distance"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"contrast-run-spec"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 8 #"Run-spec"
0 0 24 3 2 #" ("
0 0 14 3 12 #"Run-run-spec"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 5 #"preds"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-preds"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 6 #"target"
0 0 24 3 1 #" "
0 0 14 3 10 #"new-target"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-state"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 10 #"run-result"
0 0 24 3 1 #" "
0 0 14 3 9 #"atom-rels"
0 0 24 3 1 #" "
0 0 14 3 12 #"server-ports"
0 0 24 3 1 #" "
0 0 14 3 13 #"kodkod-bounds"
0 0 24 3 3 #") ("
0 0 14 3 14 #"send-to-kodkod"
0 0 24 3 1 #" "
0 0 14 3 17 #"contrast-run-spec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"contrast-run"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 3 #"Run"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"~a-contrast\""
0 0 24 3 2 #" ("
0 0 14 3 8 #"Run-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 17 #"contrast-run-spec"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 6 #"result"
0 0 24 3 1 #" "
0 0 14 3 10 #"run-result"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 12 #"server-ports"
0 0 24 3 1 #" "
0 0 14 3 12 #"server-ports"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 20 #"make-model-generator"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-result"
0 0 24 3 1 #" "
0 0 14 3 12 #"contrast-run"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"display-model"
0 0 24 3 1 #" "
0 0 14 3 14 #"get-next-model"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 16 #"get-relation-map"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 12 #"evaluate-str"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 8 #"Run-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 11 #"Run-command"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 19 3 14 #"\"/no-name.rkt\""
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 12 #"get-bitwidth"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 12 #"Run-run-spec"
0 0 24 3 1 #" "
0 0 14 3 3 #"run"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 28 #"get-contrast-model-generator"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;;;; Scope/Bound Updaters ;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; set-bitwidth :: Scope, int -> Scope"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Updates the bitwidth for the given Scope."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"set-bitwidth"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 5 #"Scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 8 #"bitwidth"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; update-int-bound :: Scope, node/expr/relation, Range -> Scope"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; Updates the scope (range) for a given sig in scope."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"update-int-bound"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 11 #"given-scope"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 13 #"relation-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"old-scope"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 2 #" ("
0 0 14 3 4 #"@max"
0 0 24 3 2 #" ("
0 0 14 3 11 #"Range-lower"
0 0 24 3 1 #" "
0 0 14 3 11 #"given-scope"
0 0 24 3 3 #") ("
0 0 14 3 11 #"Range-lower"
0 0 24 3 1 #" "
0 0 14 3 9 #"old-scope"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"@min"
0 0 24 3 2 #" ("
0 0 14 3 11 #"Range-upper"
0 0 24 3 1 #" "
0 0 14 3 11 #"given-scope"
0 0 24 3 3 #") ("
0 0 14 3 11 #"Range-upper"
0 0 24 3 1 #" "
0 0 14 3 9 #"old-scope"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 2 #"@<"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"Bound conflict.\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-scope"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Range"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-sig-scopes"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-set"
0 0 24 3 2 #" ("
0 0 14 3 16 #"Scope-sig-scopes"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 2 #") "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-scope"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 5 #"Scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 10 #"sig-scopes"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-sig-scopes"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 84
(9
 #"; update-bindings :: Bound, node/expr/relation, List<Symbol>, List<S"
 #"ymbol>? -> Bound"
) 0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Updates the partial binding for a given sig or relation."
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; If a binding already exists, takes the intersection."
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; If this results in an exact bound, adds it to the total bounds."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"update-bindings"
0 0 24 3 1 #" "
0 0 14 3 5 #"bound"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 2 #" ["
0 0 14 3 5 #"upper"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list->set"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list->set"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"old-pbindings"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Bound-pbindings"
0 0 24 3 1 #" "
0 0 14 3 5 #"bound"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"old-tbindings"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Bound-tbindings"
0 0 24 3 1 #" "
0 0 14 3 5 #"bound"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 43 #"; New bindings can only strengthen old ones"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 13 #"hash-has-key?"
0 0 24 3 1 #" "
0 0 14 3 13 #"old-pbindings"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"old"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 13 #"old-pbindings"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 2 #" ("
0 0 14 3 9 #"set-union"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sbound-lower"
0 0 24 3 1 #" "
0 0 14 3 3 #"old"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 4 #"@and"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sbound-upper"
0 0 24 3 1 #" "
0 0 14 3 3 #"old"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 13 #"set-intersect"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sbound-upper"
0 0 24 3 1 #" "
0 0 14 3 3 #"old"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 3 #"@or"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sbound-upper"
0 0 24 3 1 #" "
0 0 14 3 3 #"old"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 24 3 2 #" ("
0 0 14 3 3 #"@or"
0 0 24 3 2 #" ("
0 0 14 3 4 #"@not"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 3 #") ("
0 0 14 3 7 #"subset?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"Bound conflict.\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"new-pbindings"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"hash-set"
0 0 24 3 1 #" "
0 0 14 3 13 #"old-pbindings"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sbound"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 36 #"; when exact bounds, put in bindings"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"new-tbindings"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"hash-set"
0 0 24 3 1 #" "
0 0 14 3 13 #"old-tbindings"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 13 #"relation-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 9 #"set->list"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 13 #"old-tbindings"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-bound"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Bound"
0 0 24 3 1 #" "
0 0 14 3 13 #"new-pbindings"
0 0 24 3 1 #" "
0 0 14 3 13 #"new-tbindings"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 9 #"new-bound"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(10
 #"; update-bindings-at :: Bound, node/expr/relation, node/expr/relatio"
 #"n, "
) 0 0 24 29 1 #"\n"
0 0 17 3 52 #";                       List<Symbol>, List<Symbol>? "
0 0 24 29 1 #"\n"
0 0 17 3 34 #";                         -> Bound"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; To be implemented."
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; Updates the partial binding for a given focused relation."
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; Example use is (ni (join Thomas mentors) (+ Tim Shriram))."
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; (define (update-bindings-at bound rel foc lower [upper #f])"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";   scope)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;;;;  Bound Declarations  ;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; (bind scope bound bind-expression)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"match-define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 5 #"bound"
0 0 24 3 1 #" "
0 0 14 3 7 #"binding"
0 0 24 3 3 #") ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-parse"
0 0 24 3 1 #" "
0 0 14 3 7 #"binding"
0 0 24 3 1 #" "
0 0 23 3 16 #"#:datum-literals"
0 0 24 3 2 #" ("
0 0 14 3 2 #"no"
0 0 24 3 1 #" "
0 0 14 3 3 #"one"
0 0 24 3 1 #" "
0 0 14 3 3 #"two"
0 0 24 3 1 #" "
0 0 14 3 4 #"lone"
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"card"
0 0 24 3 1 #" "
0 0 14 3 2 #"is"
0 0 24 3 1 #" "
0 0 14 3 1 #"~"
0 0 24 3 1 #" "
0 0 14 3 4 #"join"
0 0 24 3 1 #" "
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 9 #"CompareOp"
0 0 24 3 1 #" "
0 0 14 3 8 #"QualName"
0 0 24 3 1 #" "
0 0 14 3 5 #"Const"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 22 #"; Cardinality bindings"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"no"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 21 3 2 #"#`"
0 0 24 3 1 #"("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 4 #"none"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"one"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 21 3 2 #"#`"
0 0 24 3 1 #"("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 4 #"card"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"two"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 21 3 2 #"#`"
0 0 24 3 1 #"("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 4 #"card"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"lone"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 21 3 2 #"#`"
0 0 24 3 1 #"("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 4 #"card"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 4 #"card"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 2 #"#`"
0 0 24 3 1 #"("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 5 #"exact"
0 0 24 3 2 #" ("
0 0 14 3 13 #"eval-int-expr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Bound-tbindings"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 9 #"new-scope"
0 0 24 3 2 #" ("
0 0 14 3 16 #"update-int-bound"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Range"
0 0 24 3 1 #" "
0 0 14 3 5 #"exact"
0 0 24 3 1 #" "
0 0 14 3 5 #"exact"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-scope"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 4 #"card"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 14 3 5 #"upper"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 2 #"#`"
0 0 24 3 1 #"("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 9 #"upper-val"
0 0 24 3 2 #" ("
0 0 14 3 13 #"eval-int-expr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"upper"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Bound-tbindings"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 9 #"new-scope"
0 0 24 3 2 #" ("
0 0 14 3 16 #"update-int-bound"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Range"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 9 #"upper-val"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-scope"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 2 #" ("
0 0 14 3 4 #"card"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 14 3 5 #"upper"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 2 #"#`"
0 0 24 3 1 #"("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 9 #"lower-val"
0 0 24 3 2 #" ("
0 0 14 3 13 #"eval-int-expr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"lower"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Bound-tbindings"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 9 #"upper-val"
0 0 24 3 2 #" ("
0 0 14 3 13 #"eval-int-expr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"upper"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Bound-tbindings"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 9 #"new-scope"
0 0 24 3 2 #" ("
0 0 14 3 16 #"update-int-bound"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Range"
0 0 24 3 1 #" "
0 0 14 3 9 #"lower-val"
0 0 24 3 1 #" "
0 0 14 3 9 #"upper-val"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-scope"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 12 #"; Strategies"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"is"
0 0 24 3 2 #" ("
0 0 14 3 1 #"~"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 14 3 5 #"strat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 2 #"#`"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #" ("
0 0 14 3 6 #"get-co"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"strat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"is"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 5 #"strat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 2 #"#`"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"strat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 17 #"; Other instances"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"f:id"
0 0 24 3 1 #" "
0 0 21 3 2 #"#`"
0 0 24 3 1 #"("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 19 #"; Particular bounds"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"cmp"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 23 3 13 #"#:fail-unless"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 2 #" ("
0 0 14 3 13 #"syntax->datum"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 3 #"cmp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 2 #"ni"
0 0 24 3 3 #")) "
0 0 19 3 23 #"\"expected a comparator\""
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 2 #"#`"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"tups"
0 0 24 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"expr"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Bound-tbindings"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #")]) "
0 0 17 3 11 #"; LOOK HERE"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-scope"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"scope"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 44 #"; (if (@not (equal? (relation-arity rel) 1))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 13 #";     #,scope"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 12 #";     (begin"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 49 #";       ;; make sure all sub-sigs exactly defined"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 79
(11
 #";       ; (for ([(sub sup) (in-hash extensions-store)] #:when (equal"
 #"? sup rel))"
) 0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 38 #";       ;   (unless (rel-is-exact sub)"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 92
(12
 #";       ;           (error 'inst \"sub-sig ~a must be exactly specif"
 #"ied before super-sig ~a\" "
) 0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 69
(13
 #";       ;                  (relation-name sub) (relation-name sup)))"
 #")"
) 0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 37 #";       (let ([exact (length tups)]) "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 64
#";         (update-int-bound #,scope rel (Range exact exact))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-bound"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"cmp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 4 #")  ("
0 0 14 3 15 #"update-bindings"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 4 #"tups"
0 0 24 3 1 #" "
0 0 14 3 4 #"tups"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"cmp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"in"
0 0 24 3 3 #") ("
0 0 14 3 15 #"update-bindings"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #" ("
0 0 14 3 4 #"@set"
0 0 24 3 2 #") "
0 0 14 3 4 #"tups"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"cmp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"ni"
0 0 24 3 3 #") ("
0 0 14 3 15 #"update-bindings"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 4 #"tups"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-scope"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-bound"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 28 #"; [(cmp (join foc rel) expr)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 65
#";  #`(let ([tups (eval-exp (alloy->kodkod 'expr) bindings 8 #f)])"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 30 #";      (define new-bound (cond"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 76
(14
 #";        [(equal? 'cmp '=)  (update-bindings-at #,bound rel 'foc tup"
 #"s tups)]"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 78
(15
 #";        [(equal? 'cmp 'in) (update-bindings-at #,bound rel 'foc (@s"
 #"et) tups)]"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 73
(16
 #";        [(equal? 'cmp 'ni) (update-bindings-at #,bound rel 'foc tup"
 #"s)]))"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 35 #";      (values #,scope new-bound))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 10 #"; Bitwidth"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 5 #"n:nat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 12 #"set-bitwidth"
0 0 24 3 1 #" "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"scope"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 28 3 2 #"#,"
0 0 14 3 5 #"bound"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 18 #"raise-syntax-error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"inst"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"Not allowed in bounds constraint\""
0 0 24 3 2 #") "
0 0 14 3 7 #"binding"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;    Run Logic    ;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; send-to-kodkod :: Run-spec -> Stream<model>, List<Symbol>"
0 0 24 29 1 #"\n"
0 0 17 3 83
(17
 #"; Given a Run-spec structure, processes the data and communicates it"
 #" to KodKod-CLI;"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#"; then produces a stream to produce instances generated by KodKod, "
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; along with a list of all of the atom names for sig atoms."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"send-to-kodkod"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 38 #"; Do relation breaks from declarations"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 8 #"relation"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-relations"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 16 #"Relation-breaker"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"break"
0 0 24 3 2 #" ("
0 0 14 3 12 #"Relation-rel"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 3 #") ("
0 0 14 3 16 #"Relation-breaker"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 49 #"; Insert missing upper bounds of partial bindings"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"pbindings"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Bound-pbindings"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Run-spec-bounds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"fixed-sigs"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 8 #"for/hash"
0 0 24 3 4 #" ([("
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 8 #"pbinding"
0 0 24 3 3 #") ("
0 0 14 3 7 #"in-hash"
0 0 24 3 1 #" "
0 0 14 3 9 #"pbindings"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 12 #"match-define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sbound"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #") "
0 0 14 3 8 #"pbinding"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 4 #"@and"
0 0 24 3 2 #" ("
0 0 14 3 2 #"@="
0 0 24 3 2 #" ("
0 0 14 3 14 #"relation-arity"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"@not"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-sig"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 13 #"relation-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"sig-scope"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-scope"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-atoms"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 2 #" ("
0 0 14 3 9 #"set-count"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 3 #") ("
0 0 14 3 11 #"Range-upper"
0 0 24 3 1 #" "
0 0 14 3 9 #"sig-scope"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-names"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"~a~a\""
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 5 #")))) "
0 0 14 3 9 #"new-atoms"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-upper"
0 0 24 3 2 #" ("
0 0 14 3 9 #"set-union"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list->set"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-names"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-upper"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sbound"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"fixed-relations"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 8 #"for/hash"
0 0 24 3 4 #" ([("
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 8 #"pbinding"
0 0 24 3 3 #") ("
0 0 14 3 7 #"in-hash"
0 0 24 3 1 #" "
0 0 14 3 10 #"fixed-sigs"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 12 #"match-define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sbound"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #") "
0 0 14 3 8 #"pbinding"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 4 #"@and"
0 0 24 3 2 #" ("
0 0 14 3 2 #"@>"
0 0 24 3 2 #" ("
0 0 14 3 14 #"relation-arity"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"@not"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-relation"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 13 #"relation-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"types"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-sigs"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"type-uppers"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compose"
0 0 24 3 1 #" "
0 0 14 3 9 #"set->list"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                          "
0 0 14 3 12 #"sbound-upper"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"fixed-sigs"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 5 #"types"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-upper"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list->set"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 17 #"cartesian-product"
0 0 24 3 1 #" "
0 0 14 3 11 #"type-uppers"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-upper"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sbound"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"pbindings"
0 0 24 3 1 #" "
0 0 14 3 15 #"fixed-relations"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 46 #"; Send user defined partial bindings to breaks"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 8 #"instance"
0 0 24 3 2 #" ("
0 0 14 3 11 #"hash-values"
0 0 24 3 1 #" "
0 0 14 3 9 #"pbindings"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"tbindings"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 14 #"init-tbindings"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Bound-tbindings"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Run-spec-bounds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 20 #"fixed-init-tbindings"
0 0 24 3 2 #" ("
0 0 14 3 11 #"hash-remove"
0 0 24 3 2 #" ("
0 0 14 3 11 #"hash-remove"
0 0 24 3 1 #" "
0 0 14 3 14 #"init-tbindings"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"succ"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 8 #"for/fold"
0 0 24 3 3 #" (["
0 0 14 3 9 #"tbindings"
0 0 24 3 1 #" "
0 0 14 3 20 #"fixed-init-tbindings"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                ([("
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 2 #"sb"
0 0 24 3 3 #") ("
0 0 14 3 7 #"in-hash"
0 0 24 3 1 #" "
0 0 14 3 9 #"pbindings"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 38 #"; this nonsense is just for atom names"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 13 #"relation-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"hash-set"
0 0 24 3 1 #" "
0 0 14 3 9 #"tbindings"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 3 #"tup"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sbound-upper"
0 0 24 3 1 #" "
0 0 14 3 2 #"sb"
0 0 24 3 5 #")]) ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"tup"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 64
#"; Get KodKod names, min sets, and max sets of Sigs and Relations"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sig-to-bound"
0 0 24 3 1 #" "
0 0 14 3 9 #"all-atoms"
0 0 24 3 2 #") "
0 0 17 3 34 #"; Map<Symbol, bound>, List<Symbol>"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"get-sig-bounds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 9 #"tbindings"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"relation-to-bound"
0 0 24 3 1 #" "
0 0 17 3 20 #"; Map<Symbol, bound>"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 19 #"get-relation-bounds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-bound"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 44 #"; Get new bounds and constraints from breaks"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 12 #"total-bounds"
0 0 24 3 1 #" "
0 0 14 3 11 #"break-preds"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 10 #"sig-bounds"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compose"
0 0 24 3 2 #" ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-bound"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                     "
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 8 #"get-sigs"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 15 #"relation-bounds"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compose"
0 0 24 3 2 #" ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 17 #"relation-to-bound"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                          "
0 0 14 3 13 #"Relation-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 13 #"get-relations"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 12 #"total-bounds"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 10 #"sig-bounds"
0 0 24 3 1 #" "
0 0 14 3 15 #"relation-bounds"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 4 #"sigs"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-sigs"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 8 #"sig-rels"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 7 #"Sig-rel"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sig"
0 0 24 3 3 #") ("
0 0 14 3 4 #"@not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"sigs"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 12 #"upper-bounds"
0 0 24 3 2 #" ("
0 0 15 3 8 #"for/hash"
0 0 24 3 3 #" (["
0 0 14 3 3 #"sig"
0 0 24 3 1 #" "
0 0 14 3 4 #"sigs"
0 0 24 3 3 #"]) "
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Sig-rel"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bound-upper"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-bound"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 7 #"))))))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 15 #"relations-store"
0 0 24 3 2 #" ("
0 0 15 3 8 #"for/hash"
0 0 24 3 3 #" (["
0 0 14 3 8 #"relation"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-relations"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 23 3 8 #"#:unless"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"Relation-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"succ"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 12 #"Relation-rel"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 3 #") ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 7 #"Sig-rel"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-sigs"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 16 #"extensions-store"
0 0 24 3 2 #" ("
0 0 15 3 8 #"for/hash"
0 0 24 3 3 #" (["
0 0 14 3 3 #"sig"
0 0 24 3 1 #" "
0 0 14 3 4 #"sigs"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 11 #"Sig-extends"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Sig-rel"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 3 #") ("
0 0 14 3 7 #"Sig-rel"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-sig"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #" ("
0 0 14 3 11 #"Sig-extends"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 7 #")))))])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 16 #"constrain-bounds"
0 0 24 3 1 #" "
0 0 14 3 12 #"total-bounds"
0 0 24 3 1 #" "
0 0 14 3 8 #"sig-rels"
0 0 24 3 1 #" "
0 0 14 3 12 #"upper-bounds"
0 0 24 3 1 #" "
0 0 14 3 15 #"relations-store"
0 0 24 3 1 #" "
0 0 14 3 16 #"extensions-store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"clear-breaker-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"sigs-and-rels"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 15 #"State-sig-order"
0 0 24 3 2 #" ("
0 0 14 3 14 #"Run-spec-state"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 20 #"State-relation-order"
0 0 24 3 2 #" ("
0 0 14 3 14 #"Run-spec-state"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"total-bounds"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 5 #"findf"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 13 #"relation-name"
0 0 24 3 2 #" ("
0 0 14 3 14 #"bound-relation"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 14 3 12 #"total-bounds"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 13 #"sigs-and-rels"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"@>="
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-verbosity"
0 0 24 3 2 #") "
0 0 14 3 15 #"VERBOSITY_DEBUG"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"--------------------------\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"Original PBindings: ~n~a~n~n\""
0 0 24 3 2 #" ("
0 0 14 3 15 #"Bound-pbindings"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Run-spec-bounds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"Fixed PBindings: ~n~a~n~n\""
0 0 24 3 1 #" "
0 0 14 3 9 #"pbindings"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"Original TBindings: ~n~a~n~n\""
0 0 24 3 2 #" ("
0 0 14 3 15 #"Bound-tbindings"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Run-spec-bounds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"Fixed TBindings: ~n~a~n~n\""
0 0 24 3 1 #" "
0 0 14 3 9 #"tbindings"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"sig-to-bound: ~n~a~n~n\""
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-bound"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"relation-to-bound: ~n~a~n~n\""
0 0 24 3 1 #" "
0 0 14 3 17 #"relation-to-bound"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"all-atoms: ~n~a~n~n\""
0 0 24 3 1 #" "
0 0 14 3 9 #"all-atoms"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"total-bounds: ~n~a~n~n\""
0 0 24 3 1 #" "
0 0 14 3 12 #"total-bounds"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"--------------------------\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 22 #"#| Print to KodKod-CLI"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"    print configure"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"    declare univ size"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"    declare ints"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"    print Int sig (r0)"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"    print other sigs (r2 ... rm)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"    print succ relation (r(m + 1))"
0 0 17 29 1 #"\n"
0 0 17 3 43 #"    print other relations (r(m + 2) ... rn)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"    print formula / assert formula (f0 ... fk)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"    print solve"
0 0 17 29 1 #"\n"
0 0 17 3 4 #"  |#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 82
(18
 #"; Initializing our kodkod-cli process, and getting ports for communi"
 #"cation with it"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"backend"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-option"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"backend"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 5 #"stdin"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 7 #"backend"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"kodkod"
0 0 24 3 3 #") ("
0 0 14 3 19 #"kodkod:start-server"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 7 #"backend"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"pardinus"
0 0 24 3 3 #") ("
0 0 14 3 21 #"pardinus:start-server"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"stepper"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Target?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Run-spec-target"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"raise"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Invalid backend: ~a\""
0 0 24 3 1 #" "
0 0 14 3 7 #"backend"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 18 #"define-syntax-rule"
0 0 24 3 2 #" ("
0 0 14 3 8 #"kk-print"
0 0 24 3 1 #" "
0 0 14 3 5 #"lines"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"kodkod:cmd"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 5 #"stdin"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"lines"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 39 #"; Print configure and declare univ size"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"bitwidth"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-bitwidth"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"kk-print"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"kodkod:configure"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 90
(19
 #"\":bitwidth ~a :solver ~a :max-solutions 1 :verbosity 7 :sb ~a :core"
 #"-gran ~a :log-trans ~a\""
) 0 0 24 29 1 #"\n"
0 0 24 3 31 #"                               "
0 0 14 3 8 #"bitwidth"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"get-option"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"solver"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"get-option"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"sb"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"get-option"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"coregranularity"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"get-option"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 14 #"logtranslation"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 19 #"kodkod:declare-univ"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 9 #"all-atoms"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 14 #"; Declare ints"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"num-ints"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 8 #"bitwidth"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"kk-print"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 19 #"kodkod:declare-ints"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 8 #"num-ints"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 8 #"num-ints"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 17 3 6 #"; ints"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 5 #"range"
0 0 24 3 1 #" "
0 0 14 3 8 #"num-ints"
0 0 24 3 27 #")))                        "
0 0 17 3 9 #"; indexes"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 49 #"; to-tupleset :: List<List<int>>, int -> tupleset"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"to-tupleset"
0 0 24 3 1 #" "
0 0 14 3 5 #"arity"
0 0 24 3 1 #" "
0 0 14 3 4 #"eles"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"eles"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"@="
0 0 24 3 1 #" "
0 0 14 3 5 #"arity"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 14 #"kodkod:product"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 2 #" ("
0 0 14 3 11 #"to-tupleset"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 5 #"arity"
0 0 24 3 2 #") "
0 0 14 3 4 #"eles"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 15 #"kodkod:tupleset"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:tuples"
0 0 24 3 1 #" "
0 0 14 3 4 #"eles"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-atoms"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 10 #"atom-names"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"atoms"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 3 #"tup"
0 0 24 3 1 #" "
0 0 14 3 10 #"atom-names"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 4 #"atom"
0 0 24 3 1 #" "
0 0 14 3 3 #"tup"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 40 #"; Used to allow using ints in instances."
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 9 #"int-atom?"
0 0 24 3 1 #" "
0 0 14 3 4 #"atom"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 4 #"atom"
0 0 24 3 2 #" ("
0 0 14 3 10 #"int-atom-n"
0 0 24 3 1 #" "
0 0 14 3 4 #"atom"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"unless"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 4 #"atom"
0 0 24 3 1 #" "
0 0 14 3 9 #"all-atoms"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"raise"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"atom (~a) not in all-atoms (~a)\""
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 4 #"atom"
0 0 24 3 1 #" "
0 0 14 3 9 #"all-atoms"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"index-of"
0 0 24 3 1 #" "
0 0 14 3 9 #"all-atoms"
0 0 24 3 1 #" "
0 0 14 3 4 #"atom"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"ret"
0 0 24 3 2 #" ("
0 0 14 3 11 #"to-tupleset"
0 0 24 3 2 #" ("
0 0 14 3 14 #"relation-arity"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #") "
0 0 14 3 5 #"atoms"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"ret"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 3 #"rel"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-all-rels"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 5 #"bound"
0 0 24 3 1 #" "
0 0 14 3 12 #"total-bounds"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"kk-print"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 18 #"kodkod:declare-rel"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"kodkod:r"
0 0 24 3 2 #" ("
0 0 14 3 13 #"relation-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"get-atoms"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bound-lower"
0 0 24 3 1 #" "
0 0 14 3 5 #"bound"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"get-atoms"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bound-upper"
0 0 24 3 1 #" "
0 0 14 3 5 #"bound"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 20 #"; Declare assertions"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"all-rels"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-all-rels"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 26 #"; Get and print predicates"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"run-constraints"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 14 #"Run-spec-preds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 18 #"get-sig-size-preds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 18 #"get-relation-preds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 18 #"get-extender-preds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 11 #"break-preds"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 15 #"run-constraints"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 16 #"assertion-number"
0 0 24 3 2 #" ("
0 0 14 3 11 #"in-naturals"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"kk-print"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 21 #"kodkod:print-cmd-cont"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"(~a \""
0 0 24 3 2 #" ("
0 0 14 3 8 #"kodkod:f"
0 0 24 3 1 #" "
0 0 14 3 16 #"assertion-number"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 23 #"translate-to-kodkod-cli"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 8 #"all-rels"
0 0 24 3 1 #" "
0 0 14 3 9 #"all-atoms"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 16 #"kodkod:print-cmd"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"kodkod:assert"
0 0 24 3 2 #" ("
0 0 14 3 8 #"kodkod:f"
0 0 24 3 1 #" "
0 0 14 3 16 #"assertion-number"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"current-formula"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 16 #"assertion-number"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 15 #"; Print targets"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 18 #"define-syntax-rule"
0 0 24 3 2 #" ("
0 0 14 3 14 #"pardinus-print"
0 0 24 3 1 #" "
0 0 14 3 5 #"lines"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"pardinus:cmd"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 5 #"stdin"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"lines"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Run-spec-target"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"for"
0 0 24 3 4 #" ([("
0 0 14 3 8 #"rel-name"
0 0 24 3 1 #" "
0 0 14 3 5 #"atoms"
0 0 24 3 3 #") ("
0 0 14 3 15 #"Target-instance"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"get-relation-map"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 3 #") ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 8 #"rel-name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"sig-or-rel"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"@="
0 0 24 3 2 #" ("
0 0 14 3 14 #"relation-arity"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"get-sig"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"get-relation"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"pardinus-print"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 23 #"pardinus:declare-target"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"pardinus:r"
0 0 24 3 2 #" ("
0 0 14 3 13 #"relation-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"get-atoms"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 1 #" "
0 0 14 3 5 #"atoms"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"pardinus-print"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 18 #"pardinus:print-cmd"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"(target-option target-mode ~a)\""
0 0 24 3 2 #" ("
0 0 14 3 15 #"Target-distance"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 13 #"; Print solve"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-next-model"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"kk-print"
0 0 24 3 2 #" ("
0 0 14 3 12 #"kodkod:solve"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 12 #"match-define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 7 #"restype"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 3 #") ("
0 0 14 3 25 #"translate-from-kodkod-cli"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 66
#"                                                                 ("
0 0 14 3 20 #"kodkod:read-solution"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                 "
0 0 14 3 8 #"all-rels"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                 "
0 0 14 3 9 #"all-atoms"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 7 #"restype"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"model-stream"
0 0 24 3 2 #" ["
0 0 14 3 4 #"prev"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 4 #"prev"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"prev"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 17 #"no-more-instances"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"prev"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"unsat"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (["
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 11 #"stream-cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"prev"
0 0 24 3 2 #") "
0 0 14 3 4 #"rest"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 4 #"rest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 11 #"stream-cons"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-next-model"
0 0 24 3 3 #") ("
0 0 14 3 12 #"model-stream"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 12 #"model-stream"
0 0 24 3 2 #") "
0 0 14 3 9 #"all-atoms"
0 0 24 3 2 #" ("
0 0 14 3 12 #"Server-ports"
0 0 24 3 1 #" "
0 0 14 3 5 #"stdin"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 2 #") "
0 0 14 3 12 #"total-bounds"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; get-sig-info :: Run-spec -> Map<Symbol, bound>, List<Symbol>"
0 0 24 29 1 #"\n"
0 0 17 3 75
(20
 #"; Given a Run-spec, assigns names to each sig, assigns minimum and m"
 #"aximum "
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(21
 #"; sets of atoms for each, and find the total number of atoms needed "
 #"(including ints)."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-sig-bounds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 9 #"tbindings"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 18 #"; Map<Symbol, int>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"curr-atom-number"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 15 #"; Sig -> Symbol"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-next-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"atom-number"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 16 #"curr-atom-number"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #") "
0 0 21 3 2 #"-1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 16 #"curr-atom-number"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #") "
0 0 14 3 11 #"atom-number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 12 #"default-name"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"~a~a\""
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #") "
0 0 14 3 11 #"atom-number"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 13 #"hash-has-key?"
0 0 24 3 1 #" "
0 0 14 3 9 #"tbindings"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 10 #"bind-names"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"tbindings"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"@<"
0 0 24 3 1 #" "
0 0 14 3 11 #"atom-number"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 10 #"bind-names"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"bind-names"
0 0 24 3 1 #" "
0 0 14 3 11 #"atom-number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 15 3 12 #"default-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"bind-names"
0 0 24 3 2 #") "
0 0 17 3 34 #"; Avoid clash with user atom names"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 13 #"get-next-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 15 3 12 #"default-name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 15 3 12 #"default-name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 26 #"; Sig, int -> List<Symbol>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-next-names"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 5 #")]) ("
0 0 14 3 13 #"get-next-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 26 #"; Map<Symbol, List<Symbol>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-lower"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 21 #"; Sig -> List<Symbol>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"fill-lower"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"own-lower-int"
0 0 24 3 2 #" ("
0 0 14 3 11 #"Range-lower"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-scope"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"children-lower"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 10 #"fill-lower"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-children"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"own-lower"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 10 #"difference"
0 0 24 3 2 #" ("
0 0 14 3 2 #"@-"
0 0 24 3 1 #" "
0 0 14 3 13 #"own-lower-int"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 14 #"children-lower"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"@>"
0 0 24 3 1 #" "
0 0 14 3 10 #"difference"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-next-names"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 1 #" "
0 0 14 3 10 #"difference"
0 0 24 3 2 #") "
0 0 14 3 14 #"children-lower"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 14 #"children-lower"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-lower"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #") "
0 0 14 3 9 #"own-lower"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 9 #"own-lower"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 32 #"; Map<Symbol, List<List<Symbol>>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-upper"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 36 #"; Sig, List<Symbol>? -> List<Symbol>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"fill-upper"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #" ["
0 0 14 3 12 #"parent-names"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"own-upper-int"
0 0 24 3 2 #" ("
0 0 14 3 11 #"Range-upper"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-scope"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"own-lower"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-lower"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"difference"
0 0 24 3 2 #" ("
0 0 14 3 2 #"@-"
0 0 24 3 1 #" "
0 0 14 3 13 #"own-upper-int"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 9 #"own-lower"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 2 #"@<"
0 0 24 3 1 #" "
0 0 14 3 10 #"difference"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"raise"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"Illegal bounds for sig ~a\""
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-names"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 12 #"parent-names"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"take"
0 0 24 3 1 #" "
0 0 14 3 12 #"parent-names"
0 0 24 3 2 #" ("
0 0 14 3 4 #"@min"
0 0 24 3 1 #" "
0 0 14 3 10 #"difference"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 12 #"parent-names"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 14 #"get-next-names"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 1 #" "
0 0 14 3 10 #"difference"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"own-upper"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 9 #"own-lower"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-names"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-upper"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #") "
0 0 14 3 9 #"own-upper"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 5 #"child"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-children"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 5 #")]) ("
0 0 14 3 10 #"fill-upper"
0 0 24 3 1 #" "
0 0 14 3 5 #"child"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-names"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 9 #"own-upper"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-atoms"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 8 #"bitwidth"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-bitwidth"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 7 #"max-int"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 8 #"bitwidth"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"range"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"max-int"
0 0 24 3 2 #") "
0 0 14 3 7 #"max-int"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-lower"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-atoms"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-upper"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-atoms"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 38 #"; Start: Used to allow extending Ints."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 3 #"sig"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-children"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 3 #"Int"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-lower"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-upper"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #") "
0 0 14 3 9 #"int-atoms"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 36 #"; End: Used to allow extending Ints."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"top-level-sigs"
0 0 24 3 2 #" ("
0 0 14 3 18 #"get-top-level-sigs"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"sig-atoms"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 3 #"sig"
0 0 24 3 1 #" "
0 0 14 3 14 #"top-level-sigs"
0 0 24 3 2 #"] "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 23 3 8 #"#:unless"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"fill-lower"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"fill-upper"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"all-atoms"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-atoms"
0 0 24 3 1 #" "
0 0 14 3 9 #"sig-atoms"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 20 #"; Map<Symbol, bound>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"bounds-hash"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 8 #"for/hash"
0 0 24 3 3 #" (["
0 0 14 3 3 #"sig"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-sigs"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 3 #"rel"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Sig-rel"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 5 #"lower"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-lower"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 5 #"upper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-upper"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 5 #"bound"
0 0 24 3 1 #" "
0 0 14 3 3 #"rel"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 11 #"bounds-hash"
0 0 24 3 1 #" "
0 0 14 3 9 #"all-atoms"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; get-relation-info :: Run-spec -> Map<Symbol, bound>"
0 0 24 29 1 #"\n"
0 0 17 3 84
(22
 #"; Given a Run-spec, the atoms assigned to each sig, the atoms assign"
 #"ed to each name,"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#"; and the starting relation name, assigns names to each relation"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; and minimum and maximum sets of atoms for each relation."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"get-relation-bounds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-bound"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"without-succ"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 8 #"for/hash"
0 0 24 3 3 #" (["
0 0 14 3 8 #"relation"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-relations"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 23 3 8 #"#:unless"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"Relation-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"succ"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"sigs"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-sigs"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"sig-atoms"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compose"
0 0 24 3 2 #" ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 14 3 11 #"bound-upper"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-bound"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 14 3 8 #"Sig-name"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                             "
0 0 14 3 4 #"sigs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 17 #"cartesian-product"
0 0 24 3 1 #" "
0 0 14 3 9 #"sig-atoms"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 13 #"Relation-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"bound"
0 0 24 3 2 #" ("
0 0 14 3 12 #"Relation-rel"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 2 #") "
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"ints"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bound-upper"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 12 #"sig-to-bound"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"succ-tuples"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 4 #"ints"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"ints"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"hash-set"
0 0 24 3 1 #" "
0 0 14 3 12 #"without-succ"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"succ"
0 0 24 3 2 #" ("
0 0 14 3 5 #"bound"
0 0 24 3 1 #" "
0 0 14 3 4 #"succ"
0 0 24 3 1 #" "
0 0 14 3 11 #"succ-tuples"
0 0 24 3 1 #" "
0 0 14 3 11 #"succ-tuples"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; get-sig-size-preds :: Run-spec -> List<node/formula>"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; Creates assertions for each Sig to restrict"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; it to the correct lower/upper bound."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"get-sig-size-preds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"max-int"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-bitwidth"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 3 #"sig"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-sigs"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 23 3 8 #"#:unless"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Sig-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 12 #"match-define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Range"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 3 #") ("
0 0 14 3 9 #"get-scope"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"unless"
0 0 24 3 2 #" ("
0 0 14 3 2 #"@<"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 1 #" "
0 0 14 3 7 #"max-int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"raise"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 44 #"\"Upper bound too large for given BitWidth; \""
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                    "
0 0 19 3 39 #"\"Sig: ~a, Upper-bound: ~a, Max-int: ~a\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 3 #"sig"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 7 #"max-int"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 17 #"node/int/constant"
0 0 24 3 1 #" "
0 0 14 3 5 #"lower"
0 0 24 3 3 #") ("
0 0 14 3 4 #"card"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Sig-rel"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 4 #"card"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Sig-rel"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 4 #")) ("
0 0 14 3 17 #"node/int/constant"
0 0 24 3 1 #" "
0 0 14 3 5 #"upper"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; get-extender-preds :: Run-spec -> List<node/formula>"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; Creates assertions for each Sig which has extending Sigs so that:"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; - if it is abstract, then it must equal the sum of its extenders"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; -                    else it must contain the sum of its extenders"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; - all extenders are pair-wise disjoint."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"get-extender-preds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"sig-constraints"
0 0 24 3 2 #" ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 3 #"sig"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-sigs"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 26 #"; get children information"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"children-rels"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 7 #"Sig-rel"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-children"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 55 #"; abstract and sig1, ... extend => (= sig (+ sig1 ...))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 57 #"; not abstract and sig is parent of sig1 => (in sig1 sig)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 64
#"; TODO: optimize by identifying abstract sigs as sum of children"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"abstract"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 1 #" "
0 0 14 3 9 #"extenders"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"@="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 9 #"extenders"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"extenders"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 9 #"extenders"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parent"
0 0 24 3 1 #" "
0 0 14 3 4 #"sig1"
0 0 24 3 1 #" "
0 0 14 3 4 #"sig2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 4 #"sig2"
0 0 24 3 1 #" "
0 0 14 3 4 #"sig1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"extends-constraints"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 12 #"Sig-abstract"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 3 #") ("
0 0 14 3 5 #"cons?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"Sig-extenders"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"abstract"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Sig-rel"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 2 #") "
0 0 14 3 13 #"children-rels"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 6 #"parent"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Sig-rel"
0 0 24 3 1 #" "
0 0 14 3 3 #"sig"
0 0 24 3 3 #")) "
0 0 14 3 13 #"children-rels"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 48 #"; sig1 and sig2 extend sig => (no (& sig1 sig2))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"disjoin-pair"
0 0 24 3 1 #" "
0 0 14 3 4 #"sig1"
0 0 24 3 1 #" "
0 0 14 3 4 #"sig2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"no"
0 0 24 3 2 #" ("
0 0 14 3 1 #"&"
0 0 24 3 1 #" "
0 0 14 3 4 #"sig1"
0 0 24 3 1 #" "
0 0 14 3 4 #"sig2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"disjoin-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-sig"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 12 #"disjoin-pair"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-sig"
0 0 24 3 2 #") "
0 0 14 3 6 #"a-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"disjoin"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 12 #"disjoin-list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 7 #"disjoin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"disjoint-constraints"
0 0 24 3 2 #" ("
0 0 14 3 7 #"disjoin"
0 0 24 3 1 #" "
0 0 14 3 13 #"children-rels"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 19 #"extends-constraints"
0 0 24 3 1 #" "
0 0 14 3 20 #"disjoint-constraints"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 34 #"; combine all constraints together"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 15 #"sig-constraints"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; get-relation-preds :: Run-spec -> List<node/formula>"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; Creates assertions for each Relation to ensure that it does not"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; contain any atoms which don't populate their Sig."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"get-relation-preds"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 8 #"relation"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-relations"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"sig-rels"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 7 #"Sig-rel"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-sigs"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-spec"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"in"
0 0 24 3 2 #" ("
0 0 14 3 12 #"Relation-rel"
0 0 24 3 1 #" "
0 0 14 3 8 #"relation"
0 0 24 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 8 #"sig-rels"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
