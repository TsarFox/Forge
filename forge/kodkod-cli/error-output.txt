(configure :bitwidth 4 :solver SAT4J :max-solutions 1 :verbosity 7 :sb 20 :core-gran 0 :log-trans 1)
(univ 24)
(ints [(-8 0)(-7 1)(-6 2)(-5 3)(-4 4)(-3 5)(-2 6)(-1 7)(0 8)(1 9)(2 10)(3 11)(4 12)(5 13)(6 14)(7 15)])
(r:Int [{(0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14) (15)} :: {(0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14) (15)}])
(r:Node [none :: {(16) (17) (18) (19)}])
(r:Color [{(20) (21) (22)} :: {(20) (21) (22) (23)}])
(r:Red [{(20)} :: {(20)}])
(r:Green [{(21)} :: {(21)}])
(r:Blue [{(22)} :: {(22)}])
(r:succ [{(0 1) (1 2) (2 3) (3 4) (4 5) (5 6) (6 7) (7 8) (8 9) (9 10) (10 11) (11 12) (12 13) (13 14) (14 15)} :: {(0 1) (1 2) (2 3) (3 4) (4 5) (5 6) (6 7) (7 8) (8 9) (9 10) (10 11) (11 12) (12 13) (13 14) (14 15)}])
(r:Edges [(-> none (-> none none)) :: {(16 20 16) (16 20 17) (16 20 18) (16 20 19) (16 21 16) (16 21 17) (16 21 18) (16 21 19) (16 22 16) (16 22 17) (16 22 18) (16 22 19) (16 23 16) (16 23 17) (16 23 18) (16 23 19) (17 20 16) (17 20 17) (17 20 18) (17 20 19) (17 21 16) (17 21 17) (17 21 18) (17 21 19) (17 22 16) (17 22 17) (17 22 18) (17 22 19) (17 23 16) (17 23 17) (17 23 18) (17 23 19) (18 20 16) (18 20 17) (18 20 18) (18 20 19) (18 21 16) (18 21 17) (18 21 18) (18 21 19) (18 22 16) (18 22 17) (18 22 18) (18 22 19) (18 23 16) (18 23 17) (18 23 18) (18 23 19) (19 20 16) (19 20 17) (19 20 18) (19 20 19) (19 21 16) (19 21 17) (19 21 18) (19 21 19) (19 22 16) (19 22 17) (19 22 18) (19 22 19) (19 23 16) (19 23 17) (19 23 18) (19 23 19)}])
(r:8 [{(0)} :: {(0)}])
(r:9 [{(1)} :: {(1)}])
(r:10 [{(2)} :: {(2)}])
(r:11 [{(3)} :: {(3)}])
(r:12 [{(4)} :: {(4)}])
(r:13 [{(5)} :: {(5)}])
(r:14 [{(6)} :: {(6)}])
(r:15 [{(7)} :: {(7)}])
(r:16 [{(8)} :: {(8)}])
(r:17 [{(9)} :: {(9)}])
(r:18 [{(10)} :: {(10)}])
(r:19 [{(11)} :: {(11)}])
(r:20 [{(12)} :: {(12)}])
(r:21 [{(13)} :: {(13)}])
(r:22 [{(14)} :: {(14)}])
(r:23 [{(15)} :: {(15)}])
(r:24 [{(16)} :: {(16)}])
(r:25 [{(17)} :: {(17)}])
(r:26 [{(18)} :: {(18)}])
(r:27 [{(19)} :: {(19)}])
(r:28 [{(20)} :: {(20)}])
(r:29 [{(21)} :: {(21)}])
(r:30 [{(22)} :: {(22)}])
(r:31 [{(23)} :: {(23)}])
(f:0 (! (&& (=> (&& (! (some ([v:c1 : one r:Color] [v:c2 : one (- r:Color v:c1)]) (some (& {([v:n1 : one r:Node] [v:n2 : one r:Node]) (some ([v:cx : one v:c1]) (in (-> v:n1 v:cx v:n2) r:Edges))} {([v:n1 : one r:Node] [v:n2 : one r:Node]) (some ([v:cx : one v:c2]) (in (-> v:n1 v:cx v:n2) r:Edges))}))))) (&& (all ([v:c1 : one r:Color] [v:c2 : one r:Color]) (=> (! (= v:c1 v:c2)) (no (& {([v:n1 : one r:Node] [v:n2 : one r:Node]) (some ([v:cx : one v:c1]) (in (-> v:n1 v:cx v:n2) r:Edges))} {([v:n1 : one r:Node] [v:n2 : one r:Node]) (some ([v:cx : one v:c2]) (in (-> v:n1 v:cx v:n2) r:Edges))})))))) (=> (&& (all ([v:c1 : one r:Color] [v:c2 : one r:Color]) (=> (! (= v:c1 v:c2)) (no (& {([v:n1 : one r:Node] [v:n2 : one r:Node]) (some ([v:cx : one v:c1]) (in (-> v:n1 v:cx v:n2) r:Edges))} {([v:n1 : one r:Node] [v:n2 : one r:Node]) (some ([v:cx : one v:c2]) (in (-> v:n1 v:cx v:n2) r:Edges))}))))) (&& (! (some ([v:c1 : one r:Color] [v:c2 : one (- r:Color v:c1)]) (some (& {([v:n1 : one r:Node] [v:n2 : one r:Node]) (some ([v:cx : one v:c1]) (in (-> v:n1 v:cx v:n2) r:Edges))} {([v:n1 : one r:Node] [v:n2 : one r:Node]) (some ([v:cx : one v:c2]) (in (-> v:n1 v:cx v:n2) r:Edges))})))))))))
(assert f:0)
(f:1 (&& (|| (int< 0 (# r:Node)) (int= 0 (# r:Node))) (|| (int< (# r:Node) 4) (int= (# r:Node) 4))))
(assert f:1)
(f:2 (&& (|| (int< 0 (# r:Color)) (int= 0 (# r:Color))) (|| (int< (# r:Color) 4) (int= (# r:Color) 4))))
(assert f:2)
(f:3 (&& (|| (int< 1 (# r:Red)) (int= 1 (# r:Red))) (|| (int< (# r:Red) 1) (int= (# r:Red) 1))))
(assert f:3)
(f:4 (&& (|| (int< 1 (# r:Green)) (int= 1 (# r:Green))) (|| (int< (# r:Green) 1) (int= (# r:Green) 1))))
(assert f:4)
(f:5 (&& (|| (int< 1 (# r:Blue)) (int= 1 (# r:Blue))) (|| (int< (# r:Blue) 1) (int= (# r:Blue) 1))))
(assert f:5)
(f:6 (in r:succ (-> r:Int r:Int)))
(assert f:6)
(f:7 (in r:Edges (-> r:Node r:Color r:Node)))
(assert f:7)
(f:8 (= r:Color (+ r:Red r:Green r:Blue)))
(assert f:8)
(f:9 (no (& r:Red r:Green)))
(assert f:9)
(f:10 (no (& r:Red r:Blue)))
(assert f:10)
(f:11 (no (& r:Green r:Blue)))
(assert f:11)
(solve)
