; This example illustrates basic arithmetic and
; uninterpreted functions

; (declare-fun time () Int)

(set-option :produce-unsat-cores true)

(declare-const end-time Int)

(declare-fun near-goats (Int) Int)
(declare-fun far-goats (Int) Int)
(declare-fun near-wolves (Int) Int)
(declare-fun far-wolves (Int) Int)

(define-fun orig-wolves ((t Int)) Int
  (if (= (mod t 2) 0)
      (near-wolves t)
      (far-wolves t)
  ))

(define-fun orig-goats ((t Int)) Int
  (if (= (mod t 2) 0)
      (near-goats t)
      (far-goats t)
  ))

(define-fun dst-wolves ((t Int)) Int
  (if (= (mod t 2) 0)
      (far-wolves t)
      (near-wolves t)
  ))

(define-fun dst-goats ((t Int)) Int
  (if (= (mod t 2) 0)
      (far-goats t)
      (near-goats t)
  ))

(define-fun orig-goats-diff ((t Int)) Int
   (- (orig-goats t) (- 3 (orig-goats (+ t 1))))
 )


(define-fun orig-wolves-diff ((t Int)) Int
   (- (orig-wolves t) (- 3 (orig-wolves (+ t 1))))
 )


(define-fun goat-bound ((time Int)) Bool
  (= (+ (near-goats time) (far-goats time)) 3)
)

(define-fun wolf-bound ((time Int)) Bool
  (= (+ (near-wolves time) (far-wolves time)) 3)
)

(define-fun no-eating ((time Int)) Bool
  (and
    (or (= (near-goats time) 0) (>= (near-goats time) (near-wolves time)))
    (or (= (far-goats time) 0) (>= (far-goats time) (far-wolves time)))
  )
)

(assert (forall ((t Int))
  (=> (and
    (>= t 0)
    (<= t end-time))
    (and
      (wolf-bound t)
      (goat-bound t)
      (no-eating t)))))

(assert (forall ((t Int))
  (=> (and (>= t 0) (< t end-time))
  (and
    (>= (orig-goats-diff t) 0)
    (>= (orig-wolves-diff t) 0)
    (<= (+ (orig-goats-diff t) (orig-wolves-diff t)) 2)
    (> (+ (orig-goats-diff t) (orig-wolves-diff t)) 0))
)))

(assert (= 3 (near-wolves 0)))
(assert (= 3 (near-goats 0)))

(assert (= 3 (far-wolves end-time)))
(assert (= 3 (far-goats end-time)))

(assert (> end-time 0))
(assert (< end-time 12))

(check-sat)
(get-model)


(exit)
