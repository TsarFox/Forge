#lang rosette

(require ocelot)
(require "ocelot/nextbutton.rkt")

(bind-universe U B S (i0 i1 i2 i3 i4 i5 z0 z1 z2 z3 z4 z5 z6 z7 z8 z9 z10 z11 z12 z13 z14 z15 z16 z17 z18 z19 z20 z21 z22 z23 z24 z25 z26 z27 z28 z29 z30 z31 z32 z33 z34 z35 z36 z37 z38 z39 z40 z41 z42 z43 z44 z45 z46 z47 z48 z49 z50 z51 z52 z53 z54 z55 z56 z57 z58 z59 z60 z61 z62 z63))

(define verum (= none none))
(define falsum (! verum))

(define bv0 (list falsum falsum falsum falsum falsum falsum))
(define bv1 (list falsum falsum falsum falsum falsum verum))
(define bv2 (list falsum falsum falsum falsum verum falsum))
(define bv3 (list falsum falsum falsum falsum verum verum))
(define bv4 (list falsum falsum falsum verum falsum falsum))
(define bv5 (list falsum falsum falsum verum falsum verum))
(define bv6 (list falsum falsum falsum verum verum falsum))
(define bv7 (list falsum falsum falsum verum verum verum))
(define bv8 (list falsum falsum verum falsum falsum falsum))
(define bv9 (list falsum falsum verum falsum falsum verum))
(define bv10 (list falsum falsum verum falsum verum falsum))
(define bv11 (list falsum falsum verum falsum verum verum))
(define bv12 (list falsum falsum verum verum falsum falsum))
(define bv13 (list falsum falsum verum verum falsum verum))
(define bv14 (list falsum falsum verum verum verum falsum))
(define bv15 (list falsum falsum verum verum verum verum))
(define bv16 (list falsum verum falsum falsum falsum falsum))
(define bv17 (list falsum verum falsum falsum falsum verum))
(define bv18 (list falsum verum falsum falsum verum falsum))
(define bv19 (list falsum verum falsum falsum verum verum))
(define bv20 (list falsum verum falsum verum falsum falsum))
(define bv21 (list falsum verum falsum verum falsum verum))
(define bv22 (list falsum verum falsum verum verum falsum))
(define bv23 (list falsum verum falsum verum verum verum))
(define bv24 (list falsum verum verum falsum falsum falsum))
(define bv25 (list falsum verum verum falsum falsum verum))
(define bv26 (list falsum verum verum falsum verum falsum))
(define bv27 (list falsum verum verum falsum verum verum))
(define bv28 (list falsum verum verum verum falsum falsum))
(define bv29 (list falsum verum verum verum falsum verum))
(define bv30 (list falsum verum verum verum verum falsum))
(define bv31 (list falsum verum verum verum verum verum))
(define bv32 (list verum falsum falsum falsum falsum falsum))
(define bv33 (list verum falsum falsum falsum falsum verum))
(define bv34 (list verum falsum falsum falsum verum falsum))
(define bv35 (list verum falsum falsum falsum verum verum))
(define bv36 (list verum falsum falsum verum falsum falsum))
(define bv37 (list verum falsum falsum verum falsum verum))
(define bv38 (list verum falsum falsum verum verum falsum))
(define bv39 (list verum falsum falsum verum verum verum))
(define bv40 (list verum falsum verum falsum falsum falsum))
(define bv41 (list verum falsum verum falsum falsum verum))
(define bv42 (list verum falsum verum falsum verum falsum))
(define bv43 (list verum falsum verum falsum verum verum))
(define bv44 (list verum falsum verum verum falsum falsum))
(define bv45 (list verum falsum verum verum falsum verum))
(define bv46 (list verum falsum verum verum verum falsum))
(define bv47 (list verum falsum verum verum verum verum))
(define bv48 (list verum verum falsum falsum falsum falsum))
(define bv49 (list verum verum falsum falsum falsum verum))
(define bv50 (list verum verum falsum falsum verum falsum))
(define bv51 (list verum verum falsum falsum verum verum))
(define bv52 (list verum verum falsum verum falsum falsum))
(define bv53 (list verum verum falsum verum falsum verum))
(define bv54 (list verum verum falsum verum verum falsum))
(define bv55 (list verum verum falsum verum verum verum))
(define bv56 (list verum verum verum falsum falsum falsum))
(define bv57 (list verum verum verum falsum falsum verum))
(define bv58 (list verum verum verum falsum verum falsum))
(define bv59 (list verum verum verum falsum verum verum))
(define bv60 (list verum verum verum verum falsum falsum))
(define bv61 (list verum verum verum verum falsum verum))
(define bv62 (list verum verum verum verum verum falsum))
(define bv63 (list verum verum verum verum verum verum))

(define indices (declare-relation 1 "indices"))
(define indices-bounds (make-exact-bound indices '((i0) (i1) (i2) (i3) (i4) (i5) )))

(define ints (declare-relation 1 "ints"))
(define ints-bound (make-exact-bound ints '((z0) (z1) (z2) (z3) (z4) (z5) (z6) (z7) (z8) (z9) (z10) (z11) (z12) (z13) (z14) (z15) (z16) (z17) (z18) (z19) (z20) (z21) (z22) (z23) (z24) (z25) (z26) (z27) (z28) (z29) (z30) (z31) (z32) (z33) (z34) (z35) (z36) (z37) (z38) (z39) (z40) (z41) (z42) (z43) (z44) (z45) (z46) (z47) (z48) (z49) (z50) (z51) (z52) (z53) (z54) (z55) (z56) (z57) (z58) (z59) (z60) (z61) (z62) (z63))))

(define ints-map (declare-relation 2 "ints-map"))
(define ints-map-bound (make-exact-bound ints-map '((z1 i0)
(z2 i1)
(z3 i1) (z3 i0)
(z4 i2)
(z5 i2) (z5 i0)
(z6 i2) (z6 i1)
(z7 i2) (z7 i1) (z7 i0)
(z8 i3)
(z9 i3) (z9 i0)
(z10 i3) (z10 i1)
(z11 i3) (z11 i1) (z11 i0)
(z12 i3) (z12 i2)
(z13 i3) (z13 i2) (z13 i0)
(z14 i3) (z14 i2) (z14 i1)
(z15 i3) (z15 i2) (z15 i1) (z15 i0)
(z16 i4)
(z17 i4) (z17 i0)
(z18 i4) (z18 i1)
(z19 i4) (z19 i1) (z19 i0)
(z20 i4) (z20 i2)
(z21 i4) (z21 i2) (z21 i0)
(z22 i4) (z22 i2) (z22 i1)
(z23 i4) (z23 i2) (z23 i1) (z23 i0)
(z24 i4) (z24 i3)
(z25 i4) (z25 i3) (z25 i0)
(z26 i4) (z26 i3) (z26 i1)
(z27 i4) (z27 i3) (z27 i1) (z27 i0)
(z28 i4) (z28 i3) (z28 i2)
(z29 i4) (z29 i3) (z29 i2) (z29 i0)
(z30 i4) (z30 i3) (z30 i2) (z30 i1)
(z31 i4) (z31 i3) (z31 i2) (z31 i1) (z31 i0)
(z32 i5)
(z33 i5) (z33 i0)
(z34 i5) (z34 i1)
(z35 i5) (z35 i1) (z35 i0)
(z36 i5) (z36 i2)
(z37 i5) (z37 i2) (z37 i0)
(z38 i5) (z38 i2) (z38 i1)
(z39 i5) (z39 i2) (z39 i1) (z39 i0)
(z40 i5) (z40 i3)
(z41 i5) (z41 i3) (z41 i0)
(z42 i5) (z42 i3) (z42 i1)
(z43 i5) (z43 i3) (z43 i1) (z43 i0)
(z44 i5) (z44 i3) (z44 i2)
(z45 i5) (z45 i3) (z45 i2) (z45 i0)
(z46 i5) (z46 i3) (z46 i2) (z46 i1)
(z47 i5) (z47 i3) (z47 i2) (z47 i1) (z47 i0)
(z48 i5) (z48 i4)
(z49 i5) (z49 i4) (z49 i0)
(z50 i5) (z50 i4) (z50 i1)
(z51 i5) (z51 i4) (z51 i1) (z51 i0)
(z52 i5) (z52 i4) (z52 i2)
(z53 i5) (z53 i4) (z53 i2) (z53 i0)
(z54 i5) (z54 i4) (z54 i2) (z54 i1)
(z55 i5) (z55 i4) (z55 i2) (z55 i1) (z55 i0)
(z56 i5) (z56 i4) (z56 i3)
(z57 i5) (z57 i4) (z57 i3) (z57 i0)
(z58 i5) (z58 i4) (z58 i3) (z58 i1)
(z59 i5) (z59 i4) (z59 i3) (z59 i1) (z59 i0)
(z60 i5) (z60 i4) (z60 i3) (z60 i2)
(z61 i5) (z61 i4) (z61 i3) (z61 i2) (z61 i0)
(z62 i5) (z62 i4) (z62 i3) (z62 i2) (z62 i1)
(z63 i5) (z63 i4) (z63 i3) (z63 i2) (z63 i1) (z63 i0))))

(define testR (declare-relation 1 "testR"))
(define testR-bounds (make-upper-bound testR '((z0) (z1) (z2) (z3) (z4) (z5) (z6) (z7) (z8) (z9) (z10) (z11) (z12) (z13) (z14) (z15) (z16) (z17) (z18) (z19) (z20) (z21) (z22) (z23) (z24) (z25) (z26) (z27) (z28) (z29) (z30) (z31) (z32) (z33) (z34) (z35) (z36) (z37) (z38) (z39) (z40) (z41) (z42) (z43) (z44) (z45) (z46) (z47) (z48) (z49) (z50) (z51) (z52) (z53) (z54) (z55) (z56) (z57) (z58) (z59) (z60) (z61) (z62) (z63))))

(define all-bounds (instantiate-bounds (bounds U (append B (list indices-bounds ints-bound ints-map-bound testR-bounds)))))

(define (iff a b)
(and (=> a b) (=> b a)))

; returns sum, carry
(define (halfadd b0 b1)
(define band (and b0 b1))
(values (and (or b0 b1) (not band))
band))

; returns sum, carry
(define (fulladd b0 b1 carry)
(define-values (h1-sum h1-carry) (halfadd b0 b1))
(define-values (h2-sum h2-carry) (halfadd h1-sum carry))
(define carry-out (or h1-carry h2-carry))
(values h2-sum carry-out))

; returns atom representing x + y
(define (plus x y)
(define x0 (list-ref x 5))
(define x1 (list-ref x 4))
(define x2 (list-ref x 3))
(define x3 (list-ref x 2))
(define x4 (list-ref x 1))
(define x5 (list-ref x 0))
(define y0 (list-ref y 5))
(define y1 (list-ref y 4))
(define y2 (list-ref y 3))
(define y3 (list-ref y 2))
(define y4 (list-ref y 1))
(define y5 (list-ref y 0))
(define-values (b0-sum b0-carry) (fulladd x0 y0 falsum))
(define-values (b1-sum b1-carry) (fulladd x1 y1 b0-carry))
(define-values (b2-sum b2-carry) (fulladd x2 y2 b1-carry))
(define-values (b3-sum b3-carry) (fulladd x3 y3 b2-carry))
(define-values (b4-sum b4-carry) (fulladd x4 y4 b3-carry))
(define-values (b5-sum b5-carry) (fulladd x5 y5 b4-carry))
(list b5-sum b4-sum b3-sum b2-sum b1-sum b0-sum))

(define (same-bv bva bvb)
(and 
(iff (list-ref bva 0)(list-ref bvb 0))
(iff (list-ref bva 1)(list-ref bvb 1))
(iff (list-ref bva 2)(list-ref bvb 2))
(iff (list-ref bva 3)(list-ref bvb 3))
(iff (list-ref bva 4)(list-ref bvb 4))
(iff (list-ref bva 5)(list-ref bvb 5))))

(define (atom-to-bv atom)
  (list (in (-> atom i5) ints-map)
        (in (-> atom i4) ints-map)
        (in (-> atom i3) ints-map)
        (in (-> atom i2) ints-map)
        (in (-> atom i1) ints-map)
        (in (-> atom i0) ints-map)))

(define constraints (some ([a testR] [b testR]) (same-bv (plus (atom-to-bv a) (atom-to-bv b)) bv7)))

(println "Finished constraint interpretation, beginning translation.")
(get-model constraints all-bounds S)

; started at 3:05
