#lang rosette

(require ocelot)
(require "ocelot/nextbutton.rkt")

(bind-universe U B S (i0 i1 i2 i3 i4 z0 z1 z2 z3 z4 z5 z6 z7 z8 z9 z10 z11 z12 z13 z14 z15 z16 z17 z18 z19 z20 z21 z22 z23 z24 z25 z26 z27 z28 z29 z30 z31))

(define verum (= none none))
(define falsum (! verum))

(define bv0 (list falsum falsum falsum falsum falsum))
(define bv1 (list falsum falsum falsum falsum verum))
(define bv2 (list falsum falsum falsum verum falsum))
(define bv3 (list falsum falsum falsum verum verum))
(define bv4 (list falsum falsum verum falsum falsum))
(define bv5 (list falsum falsum verum falsum verum))
(define bv6 (list falsum falsum verum verum falsum))
(define bv7 (list falsum falsum verum verum verum))
(define bv8 (list falsum verum falsum falsum falsum))
(define bv9 (list falsum verum falsum falsum verum))
(define bv10 (list falsum verum falsum verum falsum))
(define bv11 (list falsum verum falsum verum verum))
(define bv12 (list falsum verum verum falsum falsum))
(define bv13 (list falsum verum verum falsum verum))
(define bv14 (list falsum verum verum verum falsum))
(define bv15 (list falsum verum verum verum verum))
(define bv16 (list verum falsum falsum falsum falsum))
(define bv17 (list verum falsum falsum falsum verum))
(define bv18 (list verum falsum falsum verum falsum))
(define bv19 (list verum falsum falsum verum verum))
(define bv20 (list verum falsum verum falsum falsum))
(define bv21 (list verum falsum verum falsum verum))
(define bv22 (list verum falsum verum verum falsum))
(define bv23 (list verum falsum verum verum verum))
(define bv24 (list verum verum falsum falsum falsum))
(define bv25 (list verum verum falsum falsum verum))
(define bv26 (list verum verum falsum verum falsum))
(define bv27 (list verum verum falsum verum verum))
(define bv28 (list verum verum verum falsum falsum))
(define bv29 (list verum verum verum falsum verum))
(define bv30 (list verum verum verum verum falsum))
(define bv31 (list verum verum verum verum verum))

(define indices (declare-relation 1 "indices"))
(define indices-bounds (make-exact-bound indices '((i0) (i1) (i2) (i3) (i4) )))

(define ints (declare-relation 1 "ints"))
(define ints-bound (make-exact-bound ints '((z0) (z1) (z2) (z3) (z4) (z5) (z6) (z7) (z8) (z9) (z10) (z11) (z12) (z13) (z14) (z15) (z16) (z17) (z18) (z19) (z20) (z21) (z22) (z23) (z24) (z25) (z26) (z27) (z28) (z29) (z30) (z31))))

(define ints-map (declare-relation 2 "ints-map"))
(define ints-map-bound (make-exact-bound ints-map '((z1 i0)
(z2 i1)
(z3 i1) (z3 i0)
(z4 i2)
(z5 i2) (z5 i0)
(z6 i2) (z6 i1)
(z7 i2) (z7 i1) (z7 i0)
(z8 i3)
(z9 i3) (z9 i0)
(z10 i3) (z10 i1)
(z11 i3) (z11 i1) (z11 i0)
(z12 i3) (z12 i2)
(z13 i3) (z13 i2) (z13 i0)
(z14 i3) (z14 i2) (z14 i1)
(z15 i3) (z15 i2) (z15 i1) (z15 i0)
(z16 i4)
(z17 i4) (z17 i0)
(z18 i4) (z18 i1)
(z19 i4) (z19 i1) (z19 i0)
(z20 i4) (z20 i2)
(z21 i4) (z21 i2) (z21 i0)
(z22 i4) (z22 i2) (z22 i1)
(z23 i4) (z23 i2) (z23 i1) (z23 i0)
(z24 i4) (z24 i3)
(z25 i4) (z25 i3) (z25 i0)
(z26 i4) (z26 i3) (z26 i1)
(z27 i4) (z27 i3) (z27 i1) (z27 i0)
(z28 i4) (z28 i3) (z28 i2)
(z29 i4) (z29 i3) (z29 i2) (z29 i0)
(z30 i4) (z30 i3) (z30 i2) (z30 i1)
(z31 i4) (z31 i3) (z31 i2) (z31 i1) (z31 i0))))

(define testR (declare-relation 1 "testR"))
(define testR-bounds (make-upper-bound testR '((z0) (z1) (z2) (z3) (z4) (z5) (z6) (z7) (z8) (z9) (z10) (z11) (z12) (z13) (z14) (z15) (z16) (z17) (z18) (z19) (z20) (z21) (z22) (z23) (z24) (z25) (z26) (z27) (z28) (z29) (z30) (z31))))

(define all-bounds (instantiate-bounds (bounds U (append B (list indices-bounds ints-bound ints-map-bound testR-bounds)))))

(define (iff a b)
(and (=> a b) (=> b a)))

; returns sum, carry
(define (halfadd b0 b1)
(define band (and b0 b1))
(values (and (or b0 b1) (not band))
band))

; returns sum, carry
(define (fulladd b0 b1 carry)
(define-values (h1-sum h1-carry) (halfadd b0 b1))
(define-values (h2-sum h2-carry) (halfadd h1-sum carry))
(define carry-out (or h1-carry h2-carry))
(values h2-sum carry-out))

; returns atom representing x + y
(define (plus x y)
(define x0 (list-ref x 4))
(define x1 (list-ref x 3))
(define x2 (list-ref x 2))
(define x3 (list-ref x 1))
(define x4 (list-ref x 0))
(define y0 (list-ref y 4))
(define y1 (list-ref y 3))
(define y2 (list-ref y 2))
(define y3 (list-ref y 1))
(define y4 (list-ref y 0))
(define-values (b0-sum b0-carry) (fulladd x0 y0 falsum))
(define-values (b1-sum b1-carry) (fulladd x1 y1 b0-carry))
(define-values (b2-sum b2-carry) (fulladd x2 y2 b1-carry))
(define-values (b3-sum b3-carry) (fulladd x3 y3 b2-carry))
(define-values (b4-sum b4-carry) (fulladd x4 y4 b3-carry))
(list b4-sum b3-sum b2-sum b1-sum b0-sum))

(define (same-bv bva bvb)
(and 
(iff (list-ref bva 0)(list-ref bvb 0))
(iff (list-ref bva 1)(list-ref bvb 1))
(iff (list-ref bva 2)(list-ref bvb 2))
(iff (list-ref bva 3)(list-ref bvb 3))
(iff (list-ref bva 4)(list-ref bvb 4))))

(define (atom-to-bv atom)
  (list (in (-> atom i4) ints-map)
        (in (-> atom i3) ints-map)
        (in (-> atom i2) ints-map)
        (in (-> atom i1) ints-map)
        (in (-> atom i0) ints-map)))

(define constraints (some ([a testR] [b testR]) (same-bv (plus (atom-to-bv a) (atom-to-bv b)) bv7)))

(println "Finished constraint interpretation, beginning translation.")
(get-model constraints all-bounds S)
