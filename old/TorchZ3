; This example illustrates basic arithmetic and
; uninterpreted functions

(define-const p1 Int 1)
(define-const p2 Int 2)
(define-const p5 Int 5)
(define-const p8 Int 8)

(declare-const last-state Int)
(assert (and (< last-state 6) (> last-state 0)))

(declare-fun near-int ((Int) (Int)) Int)
(declare-fun near-bool ((Int) (Int)) Bool)

(assert (near-bool 0 p1))
(assert (near-bool 0 p2))
(assert (near-bool 0 p5))
(assert (near-bool 0 p8))

(declare-fun time ((Int)) Int)
(assert (<= (time last-state) 15))
(assert (= (time 0) 0))

(assert (not (or (near-bool last-state p1) (near-bool last-state p2) (near-bool last-state p5) (near-bool last-state p8))))

(define-fun max ((a Int) (b Int)) Int
  (if (> a b) a b)
)

(define-fun diff ((s Int) (p Int)) Int
  (if (= (mod s 2) 0)
    (- (near-int s p) (near-int (+ s 1) p))
    (- (near-int (+ s 1) p) (near-int s p)))
)

(define-fun person-time ((s Int) (p Int)) Int
  (if (= (diff s p) 1) p 0)
)

(define-fun diffs+ ((s Int)) Bool
  (and (>= (diff s p1) 0)
    (>= (diff s p2) 0)
    (>= (diff s p5) 0)
    (>= (diff s p8) 0))
)

(define-fun diffs-sum ((s Int)) Int
  (+ (diff s p1) (diff s p2) (diff s p5) (diff s p8))
)

(define-fun time-taken ((s Int)) Int
  (max (max (max (person-time s p1) (person-time s p2)) (person-time s p5)) (person-time s p8))
)

(define-fun transition ((s0 Int)) Bool
  (and
    (diffs+ s0)
    (or (= (diffs-sum s0) 1) (= (diffs-sum s0) 2))
    (=  (- (time (+ 1 s0)) (time s0))
        (time-taken s0)))
)

(assert (forall ((s Int) (p Int))
  (=>
    (and
      (>= s 0)
      (<= s last-state)
      (or (= p p1) (= p p2) (= p p5) (= p p8)))

      (and
        (= (near-bool s p) (= (near-int s p) 1))
        (or (= (near-int s p) 1) (= (near-int s p) 0)))
)))

(assert (forall ((s Int) (p Int))
  (=>
    (and
      (>= s 0)
      (< s last-state))
    (transition s)
)))


(check-sat)
(get-model)
(exit)
